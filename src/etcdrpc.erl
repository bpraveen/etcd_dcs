%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.4.0
-module(etcdrpc).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_RangeRequest.SortOrder'/1, 'enum_value_by_symbol_RangeRequest.SortOrder'/1]).
-export(['enum_symbol_by_value_RangeRequest.SortTarget'/1, 'enum_value_by_symbol_RangeRequest.SortTarget'/1]).
-export(['enum_symbol_by_value_Compare.CompareResult'/1, 'enum_value_by_symbol_Compare.CompareResult'/1]).
-export(['enum_symbol_by_value_Compare.CompareTarget'/1, 'enum_value_by_symbol_Compare.CompareTarget'/1]).
-export(['enum_symbol_by_value_WatchCreateRequest.FilterType'/1, 'enum_value_by_symbol_WatchCreateRequest.FilterType'/1]).
-export([enum_symbol_by_value_AlarmType/1, enum_value_by_symbol_AlarmType/1]).
-export(['enum_symbol_by_value_AlarmRequest.AlarmAction'/1, 'enum_value_by_symbol_AlarmRequest.AlarmAction'/1]).
-export(['enum_symbol_by_value_Event.EventType'/1, 'enum_value_by_symbol_Event.EventType'/1]).
-export(['enum_symbol_by_value_Permission.Type'/1, 'enum_value_by_symbol_Permission.Type'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).


%% enumerated types
-type 'RangeRequest.SortOrder'() :: 'NONE' | 'ASCEND' | 'DESCEND'.
-type 'RangeRequest.SortTarget'() :: 'KEY' | 'VERSION' | 'CREATE' | 'MOD' | 'VALUE'.
-type 'Compare.CompareResult'() :: 'EQUAL' | 'GREATER' | 'LESS' | 'NOT_EQUAL'.
-type 'Compare.CompareTarget'() :: 'VERSION' | 'CREATE' | 'MOD' | 'VALUE' | 'LEASE'.
-type 'WatchCreateRequest.FilterType'() :: 'NOPUT' | 'NODELETE'.
-type 'AlarmType'() :: 'NONE' | 'NOSPACE' | 'CORRUPT'.
-type 'AlarmRequest.AlarmAction'() :: 'GET' | 'ACTIVATE' | 'DEACTIVATE'.
-type 'Event.EventType'() :: 'PUT' | 'DELETE'.
-type 'Permission.Type'() :: 'READ' | 'WRITE' | 'READWRITE'.
-export_type(['RangeRequest.SortOrder'/0, 'RangeRequest.SortTarget'/0, 'Compare.CompareResult'/0, 'Compare.CompareTarget'/0, 'WatchCreateRequest.FilterType'/0, 'AlarmType'/0, 'AlarmRequest.AlarmAction'/0, 'Event.EventType'/0, 'Permission.Type'/0]).

%% message types
-type 'ResponseHeader'() ::
      #{cluster_id              => non_neg_integer(), % = 1, 32 bits
        member_id               => non_neg_integer(), % = 2, 32 bits
        revision                => integer(),       % = 3, 32 bits
        raft_term               => non_neg_integer() % = 4, 32 bits
       }.

-type 'RangeRequest'() ::
      #{key                     => iodata(),        % = 1
        range_end               => iodata(),        % = 2
        limit                   => integer(),       % = 3, 32 bits
        revision                => integer(),       % = 4, 32 bits
        sort_order              => 'NONE' | 'ASCEND' | 'DESCEND' | integer(), % = 5, enum RangeRequest.SortOrder
        sort_target             => 'KEY' | 'VERSION' | 'CREATE' | 'MOD' | 'VALUE' | integer(), % = 6, enum RangeRequest.SortTarget
        serializable            => boolean() | 0 | 1, % = 7
        keys_only               => boolean() | 0 | 1, % = 8
        count_only              => boolean() | 0 | 1, % = 9
        min_mod_revision        => integer(),       % = 10, 32 bits
        max_mod_revision        => integer(),       % = 11, 32 bits
        min_create_revision     => integer(),       % = 12, 32 bits
        max_create_revision     => integer()        % = 13, 32 bits
       }.

-type 'RangeResponse'() ::
      #{header                  => 'ResponseHeader'(), % = 1
        kvs                     => ['KeyValue'()],  % = 2
        more                    => boolean() | 0 | 1, % = 3
        count                   => integer()        % = 4, 32 bits
       }.

-type 'PutRequest'() ::
      #{key                     => iodata(),        % = 1
        value                   => iodata(),        % = 2
        lease                   => integer(),       % = 3, 32 bits
        prev_kv                 => boolean() | 0 | 1, % = 4
        ignore_value            => boolean() | 0 | 1, % = 5
        ignore_lease            => boolean() | 0 | 1 % = 6
       }.

-type 'PutResponse'() ::
      #{header                  => 'ResponseHeader'(), % = 1
        prev_kv                 => 'KeyValue'()     % = 2
       }.

-type 'DeleteRangeRequest'() ::
      #{key                     => iodata(),        % = 1
        range_end               => iodata(),        % = 2
        prev_kv                 => boolean() | 0 | 1 % = 3
       }.

-type 'DeleteRangeResponse'() ::
      #{header                  => 'ResponseHeader'(), % = 1
        deleted                 => integer(),       % = 2, 32 bits
        prev_kvs                => ['KeyValue'()]   % = 3
       }.

-type 'RequestOp'() ::
      #{request                 => {request_range, 'RangeRequest'()} | {request_put, 'PutRequest'()} | {request_delete_range, 'DeleteRangeRequest'()} | {request_txn, 'TxnRequest'()} % oneof
       }.

-type 'ResponseOp'() ::
      #{response                => {response_range, 'RangeResponse'()} | {response_put, 'PutResponse'()} | {response_delete_range, 'DeleteRangeResponse'()} | {response_txn, 'TxnResponse'()} % oneof
       }.

-type 'Compare'() ::
      #{result                  => 'EQUAL' | 'GREATER' | 'LESS' | 'NOT_EQUAL' | integer(), % = 1, enum Compare.CompareResult
        target                  => 'VERSION' | 'CREATE' | 'MOD' | 'VALUE' | 'LEASE' | integer(), % = 2, enum Compare.CompareTarget
        key                     => iodata(),        % = 3
        target_union            => {version, integer()} | {create_revision, integer()} | {mod_revision, integer()} | {value, iodata()} | {lease, integer()}, % oneof
        range_end               => iodata()         % = 64
       }.

-type 'TxnRequest'() ::
      #{compare                 => ['Compare'()],   % = 1
        success                 => ['RequestOp'()], % = 2
        failure                 => ['RequestOp'()]  % = 3
       }.

-type 'TxnResponse'() ::
      #{header                  => 'ResponseHeader'(), % = 1
        succeeded               => boolean() | 0 | 1, % = 2
        responses               => ['ResponseOp'()] % = 3
       }.

-type 'CompactionRequest'() ::
      #{revision                => integer(),       % = 1, 32 bits
        physical                => boolean() | 0 | 1 % = 2
       }.

-type 'CompactionResponse'() ::
      #{header                  => 'ResponseHeader'() % = 1
       }.

-type 'HashRequest'() ::
      #{
       }.

-type 'HashKVRequest'() ::
      #{revision                => integer()        % = 1, 32 bits
       }.

-type 'HashKVResponse'() ::
      #{header                  => 'ResponseHeader'(), % = 1
        hash                    => non_neg_integer(), % = 2, 32 bits
        compact_revision        => integer()        % = 3, 32 bits
       }.

-type 'HashResponse'() ::
      #{header                  => 'ResponseHeader'(), % = 1
        hash                    => non_neg_integer() % = 2, 32 bits
       }.

-type 'SnapshotRequest'() ::
      #{
       }.

-type 'SnapshotResponse'() ::
      #{header                  => 'ResponseHeader'(), % = 1
        remaining_bytes         => non_neg_integer(), % = 2, 32 bits
        blob                    => iodata()         % = 3
       }.

-type 'WatchRequest'() ::
      #{request_union           => {create_request, 'WatchCreateRequest'()} | {cancel_request, 'WatchCancelRequest'()} | {progress_request, 'WatchProgressRequest'()} % oneof
       }.

-type 'WatchCreateRequest'() ::
      #{key                     => iodata(),        % = 1
        range_end               => iodata(),        % = 2
        start_revision          => integer(),       % = 3, 32 bits
        progress_notify         => boolean() | 0 | 1, % = 4
        filters                 => ['NOPUT' | 'NODELETE' | integer()], % = 5, enum WatchCreateRequest.FilterType
        prev_kv                 => boolean() | 0 | 1, % = 6
        watch_id                => integer(),       % = 7, 32 bits
        fragment                => boolean() | 0 | 1 % = 8
       }.

-type 'WatchCancelRequest'() ::
      #{watch_id                => integer()        % = 1, 32 bits
       }.

-type 'WatchProgressRequest'() ::
      #{
       }.

-type 'WatchResponse'() ::
      #{header                  => 'ResponseHeader'(), % = 1
        watch_id                => integer(),       % = 2, 32 bits
        created                 => boolean() | 0 | 1, % = 3
        canceled                => boolean() | 0 | 1, % = 4
        compact_revision        => integer(),       % = 5, 32 bits
        cancel_reason           => iolist(),        % = 6
        fragment                => boolean() | 0 | 1, % = 7
        events                  => ['Event'()]      % = 11
       }.

-type 'LeaseGrantRequest'() ::
      #{'TTL'                   => integer(),       % = 1, 32 bits
        'ID'                    => integer()        % = 2, 32 bits
       }.

-type 'LeaseGrantResponse'() ::
      #{header                  => 'ResponseHeader'(), % = 1
        'ID'                    => integer(),       % = 2, 32 bits
        'TTL'                   => integer(),       % = 3, 32 bits
        error                   => iolist()         % = 4
       }.

-type 'LeaseRevokeRequest'() ::
      #{'ID'                    => integer()        % = 1, 32 bits
       }.

-type 'LeaseRevokeResponse'() ::
      #{header                  => 'ResponseHeader'() % = 1
       }.

-type 'LeaseCheckpoint'() ::
      #{'ID'                    => integer(),       % = 1, 32 bits
        remaining_TTL           => integer()        % = 2, 32 bits
       }.

-type 'LeaseCheckpointRequest'() ::
      #{checkpoints             => ['LeaseCheckpoint'()] % = 1
       }.

-type 'LeaseCheckpointResponse'() ::
      #{header                  => 'ResponseHeader'() % = 1
       }.

-type 'LeaseKeepAliveRequest'() ::
      #{'ID'                    => integer()        % = 1, 32 bits
       }.

-type 'LeaseKeepAliveResponse'() ::
      #{header                  => 'ResponseHeader'(), % = 1
        'ID'                    => integer(),       % = 2, 32 bits
        'TTL'                   => integer()        % = 3, 32 bits
       }.

-type 'LeaseTimeToLiveRequest'() ::
      #{'ID'                    => integer(),       % = 1, 32 bits
        keys                    => boolean() | 0 | 1 % = 2
       }.

-type 'LeaseTimeToLiveResponse'() ::
      #{header                  => 'ResponseHeader'(), % = 1
        'ID'                    => integer(),       % = 2, 32 bits
        'TTL'                   => integer(),       % = 3, 32 bits
        grantedTTL              => integer(),       % = 4, 32 bits
        keys                    => [iodata()]       % = 5
       }.

-type 'LeaseLeasesRequest'() ::
      #{
       }.

-type 'LeaseStatus'() ::
      #{'ID'                    => integer()        % = 1, 32 bits
       }.

-type 'LeaseLeasesResponse'() ::
      #{header                  => 'ResponseHeader'(), % = 1
        leases                  => ['LeaseStatus'()] % = 2
       }.

-type 'Member'() ::
      #{'ID'                    => non_neg_integer(), % = 1, 32 bits
        name                    => iolist(),        % = 2
        peerURLs                => [iolist()],      % = 3
        clientURLs              => [iolist()]       % = 4
       }.

-type 'MemberAddRequest'() ::
      #{peerURLs                => [iolist()]       % = 1
       }.

-type 'MemberAddResponse'() ::
      #{header                  => 'ResponseHeader'(), % = 1
        member                  => 'Member'(),      % = 2
        members                 => ['Member'()]     % = 3
       }.

-type 'MemberRemoveRequest'() ::
      #{'ID'                    => non_neg_integer() % = 1, 32 bits
       }.

-type 'MemberRemoveResponse'() ::
      #{header                  => 'ResponseHeader'(), % = 1
        members                 => ['Member'()]     % = 2
       }.

-type 'MemberUpdateRequest'() ::
      #{'ID'                    => non_neg_integer(), % = 1, 32 bits
        peerURLs                => [iolist()]       % = 2
       }.

-type 'MemberUpdateResponse'() ::
      #{header                  => 'ResponseHeader'(), % = 1
        members                 => ['Member'()]     % = 2
       }.

-type 'MemberListRequest'() ::
      #{
       }.

-type 'MemberListResponse'() ::
      #{header                  => 'ResponseHeader'(), % = 1
        members                 => ['Member'()]     % = 2
       }.

-type 'DefragmentRequest'() ::
      #{
       }.

-type 'DefragmentResponse'() ::
      #{header                  => 'ResponseHeader'() % = 1
       }.

-type 'MoveLeaderRequest'() ::
      #{targetID                => non_neg_integer() % = 1, 32 bits
       }.

-type 'MoveLeaderResponse'() ::
      #{header                  => 'ResponseHeader'() % = 1
       }.

-type 'AlarmRequest'() ::
      #{action                  => 'GET' | 'ACTIVATE' | 'DEACTIVATE' | integer(), % = 1, enum AlarmRequest.AlarmAction
        memberID                => non_neg_integer(), % = 2, 32 bits
        alarm                   => 'NONE' | 'NOSPACE' | 'CORRUPT' | integer() % = 3, enum AlarmType
       }.

-type 'AlarmMember'() ::
      #{memberID                => non_neg_integer(), % = 1, 32 bits
        alarm                   => 'NONE' | 'NOSPACE' | 'CORRUPT' | integer() % = 2, enum AlarmType
       }.

-type 'AlarmResponse'() ::
      #{header                  => 'ResponseHeader'(), % = 1
        alarms                  => ['AlarmMember'()] % = 2
       }.

-type 'StatusRequest'() ::
      #{
       }.

-type 'StatusResponse'() ::
      #{header                  => 'ResponseHeader'(), % = 1
        version                 => iolist(),        % = 2
        dbSize                  => integer(),       % = 3, 32 bits
        leader                  => non_neg_integer(), % = 4, 32 bits
        raftIndex               => non_neg_integer(), % = 5, 32 bits
        raftTerm                => non_neg_integer(), % = 6, 32 bits
        raftAppliedIndex        => non_neg_integer(), % = 7, 32 bits
        errors                  => [iolist()],      % = 8
        dbSizeInUse             => integer()        % = 9, 32 bits
       }.

-type 'AuthEnableRequest'() ::
      #{
       }.

-type 'AuthDisableRequest'() ::
      #{
       }.

-type 'AuthenticateRequest'() ::
      #{name                    => iolist(),        % = 1
        password                => iolist()         % = 2
       }.

-type 'AuthUserAddRequest'() ::
      #{name                    => iolist(),        % = 1
        password                => iolist()         % = 2
       }.

-type 'AuthUserGetRequest'() ::
      #{name                    => iolist()         % = 1
       }.

-type 'AuthUserDeleteRequest'() ::
      #{name                    => iolist()         % = 1
       }.

-type 'AuthUserChangePasswordRequest'() ::
      #{name                    => iolist(),        % = 1
        password                => iolist()         % = 2
       }.

-type 'AuthUserGrantRoleRequest'() ::
      #{user                    => iolist(),        % = 1
        role                    => iolist()         % = 2
       }.

-type 'AuthUserRevokeRoleRequest'() ::
      #{name                    => iolist(),        % = 1
        role                    => iolist()         % = 2
       }.

-type 'AuthRoleAddRequest'() ::
      #{name                    => iolist()         % = 1
       }.

-type 'AuthRoleGetRequest'() ::
      #{role                    => iolist()         % = 1
       }.

-type 'AuthUserListRequest'() ::
      #{
       }.

-type 'AuthRoleListRequest'() ::
      #{
       }.

-type 'AuthRoleDeleteRequest'() ::
      #{role                    => iolist()         % = 1
       }.

-type 'AuthRoleGrantPermissionRequest'() ::
      #{name                    => iolist(),        % = 1
        perm                    => 'Permission'()   % = 2
       }.

-type 'AuthRoleRevokePermissionRequest'() ::
      #{role                    => iolist(),        % = 1
        key                     => iodata(),        % = 2
        range_end               => iodata()         % = 3
       }.

-type 'AuthEnableResponse'() ::
      #{header                  => 'ResponseHeader'() % = 1
       }.

-type 'AuthDisableResponse'() ::
      #{header                  => 'ResponseHeader'() % = 1
       }.

-type 'AuthenticateResponse'() ::
      #{header                  => 'ResponseHeader'(), % = 1
        token                   => iolist()         % = 2
       }.

-type 'AuthUserAddResponse'() ::
      #{header                  => 'ResponseHeader'() % = 1
       }.

-type 'AuthUserGetResponse'() ::
      #{header                  => 'ResponseHeader'(), % = 1
        roles                   => [iolist()]       % = 2
       }.

-type 'AuthUserDeleteResponse'() ::
      #{header                  => 'ResponseHeader'() % = 1
       }.

-type 'AuthUserChangePasswordResponse'() ::
      #{header                  => 'ResponseHeader'() % = 1
       }.

-type 'AuthUserGrantRoleResponse'() ::
      #{header                  => 'ResponseHeader'() % = 1
       }.

-type 'AuthUserRevokeRoleResponse'() ::
      #{header                  => 'ResponseHeader'() % = 1
       }.

-type 'AuthRoleAddResponse'() ::
      #{header                  => 'ResponseHeader'() % = 1
       }.

-type 'AuthRoleGetResponse'() ::
      #{header                  => 'ResponseHeader'(), % = 1
        perm                    => ['Permission'()] % = 2
       }.

-type 'AuthRoleListResponse'() ::
      #{header                  => 'ResponseHeader'(), % = 1
        roles                   => [iolist()]       % = 2
       }.

-type 'AuthUserListResponse'() ::
      #{header                  => 'ResponseHeader'(), % = 1
        users                   => [iolist()]       % = 2
       }.

-type 'AuthRoleDeleteResponse'() ::
      #{header                  => 'ResponseHeader'() % = 1
       }.

-type 'AuthRoleGrantPermissionResponse'() ::
      #{header                  => 'ResponseHeader'() % = 1
       }.

-type 'AuthRoleRevokePermissionResponse'() ::
      #{header                  => 'ResponseHeader'() % = 1
       }.

-type 'KeyValue'() ::
      #{key                     => iodata(),        % = 1
        create_revision         => integer(),       % = 2, 32 bits
        mod_revision            => integer(),       % = 3, 32 bits
        version                 => integer(),       % = 4, 32 bits
        value                   => iodata(),        % = 5
        lease                   => integer()        % = 6, 32 bits
       }.

-type 'Event'() ::
      #{type                    => 'PUT' | 'DELETE' | integer(), % = 1, enum Event.EventType
        kv                      => 'KeyValue'(),    % = 2
        prev_kv                 => 'KeyValue'()     % = 3
       }.

-type 'User'() ::
      #{name                    => iodata(),        % = 1
        password                => iodata(),        % = 2
        roles                   => [iolist()]       % = 3
       }.

-type 'Permission'() ::
      #{permType                => 'READ' | 'WRITE' | 'READWRITE' | integer(), % = 1, enum Permission.Type
        key                     => iodata(),        % = 2
        range_end               => iodata()         % = 3
       }.

-type 'Role'() ::
      #{name                    => iodata(),        % = 1
        keyPermission           => ['Permission'()] % = 2
       }.

-export_type(['ResponseHeader'/0, 'RangeRequest'/0, 'RangeResponse'/0, 'PutRequest'/0, 'PutResponse'/0, 'DeleteRangeRequest'/0, 'DeleteRangeResponse'/0, 'RequestOp'/0, 'ResponseOp'/0, 'Compare'/0, 'TxnRequest'/0, 'TxnResponse'/0, 'CompactionRequest'/0, 'CompactionResponse'/0, 'HashRequest'/0, 'HashKVRequest'/0, 'HashKVResponse'/0, 'HashResponse'/0, 'SnapshotRequest'/0, 'SnapshotResponse'/0, 'WatchRequest'/0, 'WatchCreateRequest'/0, 'WatchCancelRequest'/0, 'WatchProgressRequest'/0, 'WatchResponse'/0, 'LeaseGrantRequest'/0, 'LeaseGrantResponse'/0, 'LeaseRevokeRequest'/0, 'LeaseRevokeResponse'/0, 'LeaseCheckpoint'/0, 'LeaseCheckpointRequest'/0, 'LeaseCheckpointResponse'/0, 'LeaseKeepAliveRequest'/0, 'LeaseKeepAliveResponse'/0, 'LeaseTimeToLiveRequest'/0, 'LeaseTimeToLiveResponse'/0, 'LeaseLeasesRequest'/0, 'LeaseStatus'/0, 'LeaseLeasesResponse'/0, 'Member'/0, 'MemberAddRequest'/0, 'MemberAddResponse'/0, 'MemberRemoveRequest'/0, 'MemberRemoveResponse'/0, 'MemberUpdateRequest'/0, 'MemberUpdateResponse'/0, 'MemberListRequest'/0, 'MemberListResponse'/0, 'DefragmentRequest'/0, 'DefragmentResponse'/0, 'MoveLeaderRequest'/0, 'MoveLeaderResponse'/0, 'AlarmRequest'/0, 'AlarmMember'/0, 'AlarmResponse'/0, 'StatusRequest'/0, 'StatusResponse'/0, 'AuthEnableRequest'/0, 'AuthDisableRequest'/0, 'AuthenticateRequest'/0, 'AuthUserAddRequest'/0, 'AuthUserGetRequest'/0, 'AuthUserDeleteRequest'/0, 'AuthUserChangePasswordRequest'/0, 'AuthUserGrantRoleRequest'/0, 'AuthUserRevokeRoleRequest'/0, 'AuthRoleAddRequest'/0, 'AuthRoleGetRequest'/0, 'AuthUserListRequest'/0, 'AuthRoleListRequest'/0, 'AuthRoleDeleteRequest'/0, 'AuthRoleGrantPermissionRequest'/0, 'AuthRoleRevokePermissionRequest'/0, 'AuthEnableResponse'/0, 'AuthDisableResponse'/0, 'AuthenticateResponse'/0, 'AuthUserAddResponse'/0, 'AuthUserGetResponse'/0, 'AuthUserDeleteResponse'/0, 'AuthUserChangePasswordResponse'/0, 'AuthUserGrantRoleResponse'/0, 'AuthUserRevokeRoleResponse'/0, 'AuthRoleAddResponse'/0, 'AuthRoleGetResponse'/0, 'AuthRoleListResponse'/0, 'AuthUserListResponse'/0, 'AuthRoleDeleteResponse'/0, 'AuthRoleGrantPermissionResponse'/0, 'AuthRoleRevokePermissionResponse'/0, 'KeyValue'/0, 'Event'/0, 'User'/0, 'Permission'/0, 'Role'/0]).

-spec encode_msg('ResponseHeader'() | 'RangeRequest'() | 'RangeResponse'() | 'PutRequest'() | 'PutResponse'() | 'DeleteRangeRequest'() | 'DeleteRangeResponse'() | 'RequestOp'() | 'ResponseOp'() | 'Compare'() | 'TxnRequest'() | 'TxnResponse'() | 'CompactionRequest'() | 'CompactionResponse'() | 'HashRequest'() | 'HashKVRequest'() | 'HashKVResponse'() | 'HashResponse'() | 'SnapshotRequest'() | 'SnapshotResponse'() | 'WatchRequest'() | 'WatchCreateRequest'() | 'WatchCancelRequest'() | 'WatchProgressRequest'() | 'WatchResponse'() | 'LeaseGrantRequest'() | 'LeaseGrantResponse'() | 'LeaseRevokeRequest'() | 'LeaseRevokeResponse'() | 'LeaseCheckpoint'() | 'LeaseCheckpointRequest'() | 'LeaseCheckpointResponse'() | 'LeaseKeepAliveRequest'() | 'LeaseKeepAliveResponse'() | 'LeaseTimeToLiveRequest'() | 'LeaseTimeToLiveResponse'() | 'LeaseLeasesRequest'() | 'LeaseStatus'() | 'LeaseLeasesResponse'() | 'Member'() | 'MemberAddRequest'() | 'MemberAddResponse'() | 'MemberRemoveRequest'() | 'MemberRemoveResponse'() | 'MemberUpdateRequest'() | 'MemberUpdateResponse'() | 'MemberListRequest'() | 'MemberListResponse'() | 'DefragmentRequest'() | 'DefragmentResponse'() | 'MoveLeaderRequest'() | 'MoveLeaderResponse'() | 'AlarmRequest'() | 'AlarmMember'() | 'AlarmResponse'() | 'StatusRequest'() | 'StatusResponse'() | 'AuthEnableRequest'() | 'AuthDisableRequest'() | 'AuthenticateRequest'() | 'AuthUserAddRequest'() | 'AuthUserGetRequest'() | 'AuthUserDeleteRequest'() | 'AuthUserChangePasswordRequest'() | 'AuthUserGrantRoleRequest'() | 'AuthUserRevokeRoleRequest'() | 'AuthRoleAddRequest'() | 'AuthRoleGetRequest'() | 'AuthUserListRequest'() | 'AuthRoleListRequest'() | 'AuthRoleDeleteRequest'() | 'AuthRoleGrantPermissionRequest'() | 'AuthRoleRevokePermissionRequest'() | 'AuthEnableResponse'() | 'AuthDisableResponse'() | 'AuthenticateResponse'() | 'AuthUserAddResponse'() | 'AuthUserGetResponse'() | 'AuthUserDeleteResponse'() | 'AuthUserChangePasswordResponse'() | 'AuthUserGrantRoleResponse'() | 'AuthUserRevokeRoleResponse'() | 'AuthRoleAddResponse'() | 'AuthRoleGetResponse'() | 'AuthRoleListResponse'() | 'AuthUserListResponse'() | 'AuthRoleDeleteResponse'() | 'AuthRoleGrantPermissionResponse'() | 'AuthRoleRevokePermissionResponse'() | 'KeyValue'() | 'Event'() | 'User'() | 'Permission'() | 'Role'(), atom()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []).

-spec encode_msg('ResponseHeader'() | 'RangeRequest'() | 'RangeResponse'() | 'PutRequest'() | 'PutResponse'() | 'DeleteRangeRequest'() | 'DeleteRangeResponse'() | 'RequestOp'() | 'ResponseOp'() | 'Compare'() | 'TxnRequest'() | 'TxnResponse'() | 'CompactionRequest'() | 'CompactionResponse'() | 'HashRequest'() | 'HashKVRequest'() | 'HashKVResponse'() | 'HashResponse'() | 'SnapshotRequest'() | 'SnapshotResponse'() | 'WatchRequest'() | 'WatchCreateRequest'() | 'WatchCancelRequest'() | 'WatchProgressRequest'() | 'WatchResponse'() | 'LeaseGrantRequest'() | 'LeaseGrantResponse'() | 'LeaseRevokeRequest'() | 'LeaseRevokeResponse'() | 'LeaseCheckpoint'() | 'LeaseCheckpointRequest'() | 'LeaseCheckpointResponse'() | 'LeaseKeepAliveRequest'() | 'LeaseKeepAliveResponse'() | 'LeaseTimeToLiveRequest'() | 'LeaseTimeToLiveResponse'() | 'LeaseLeasesRequest'() | 'LeaseStatus'() | 'LeaseLeasesResponse'() | 'Member'() | 'MemberAddRequest'() | 'MemberAddResponse'() | 'MemberRemoveRequest'() | 'MemberRemoveResponse'() | 'MemberUpdateRequest'() | 'MemberUpdateResponse'() | 'MemberListRequest'() | 'MemberListResponse'() | 'DefragmentRequest'() | 'DefragmentResponse'() | 'MoveLeaderRequest'() | 'MoveLeaderResponse'() | 'AlarmRequest'() | 'AlarmMember'() | 'AlarmResponse'() | 'StatusRequest'() | 'StatusResponse'() | 'AuthEnableRequest'() | 'AuthDisableRequest'() | 'AuthenticateRequest'() | 'AuthUserAddRequest'() | 'AuthUserGetRequest'() | 'AuthUserDeleteRequest'() | 'AuthUserChangePasswordRequest'() | 'AuthUserGrantRoleRequest'() | 'AuthUserRevokeRoleRequest'() | 'AuthRoleAddRequest'() | 'AuthRoleGetRequest'() | 'AuthUserListRequest'() | 'AuthRoleListRequest'() | 'AuthRoleDeleteRequest'() | 'AuthRoleGrantPermissionRequest'() | 'AuthRoleRevokePermissionRequest'() | 'AuthEnableResponse'() | 'AuthDisableResponse'() | 'AuthenticateResponse'() | 'AuthUserAddResponse'() | 'AuthUserGetResponse'() | 'AuthUserDeleteResponse'() | 'AuthUserChangePasswordResponse'() | 'AuthUserGrantRoleResponse'() | 'AuthUserRevokeRoleResponse'() | 'AuthRoleAddResponse'() | 'AuthRoleGetResponse'() | 'AuthRoleListResponse'() | 'AuthUserListResponse'() | 'AuthRoleDeleteResponse'() | 'AuthRoleGrantPermissionResponse'() | 'AuthRoleRevokePermissionResponse'() | 'KeyValue'() | 'Event'() | 'User'() | 'Permission'() | 'Role'(), atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'ResponseHeader' ->
	  encode_msg_ResponseHeader(id(Msg, TrUserData),
				    TrUserData);
      'RangeRequest' ->
	  encode_msg_RangeRequest(id(Msg, TrUserData),
				  TrUserData);
      'RangeResponse' ->
	  encode_msg_RangeResponse(id(Msg, TrUserData),
				   TrUserData);
      'PutRequest' ->
	  encode_msg_PutRequest(id(Msg, TrUserData), TrUserData);
      'PutResponse' ->
	  encode_msg_PutResponse(id(Msg, TrUserData), TrUserData);
      'DeleteRangeRequest' ->
	  encode_msg_DeleteRangeRequest(id(Msg, TrUserData),
					TrUserData);
      'DeleteRangeResponse' ->
	  encode_msg_DeleteRangeResponse(id(Msg, TrUserData),
					 TrUserData);
      'RequestOp' ->
	  encode_msg_RequestOp(id(Msg, TrUserData), TrUserData);
      'ResponseOp' ->
	  encode_msg_ResponseOp(id(Msg, TrUserData), TrUserData);
      'Compare' ->
	  encode_msg_Compare(id(Msg, TrUserData), TrUserData);
      'TxnRequest' ->
	  encode_msg_TxnRequest(id(Msg, TrUserData), TrUserData);
      'TxnResponse' ->
	  encode_msg_TxnResponse(id(Msg, TrUserData), TrUserData);
      'CompactionRequest' ->
	  encode_msg_CompactionRequest(id(Msg, TrUserData),
				       TrUserData);
      'CompactionResponse' ->
	  encode_msg_CompactionResponse(id(Msg, TrUserData),
					TrUserData);
      'HashRequest' ->
	  encode_msg_HashRequest(id(Msg, TrUserData), TrUserData);
      'HashKVRequest' ->
	  encode_msg_HashKVRequest(id(Msg, TrUserData),
				   TrUserData);
      'HashKVResponse' ->
	  encode_msg_HashKVResponse(id(Msg, TrUserData),
				    TrUserData);
      'HashResponse' ->
	  encode_msg_HashResponse(id(Msg, TrUserData),
				  TrUserData);
      'SnapshotRequest' ->
	  encode_msg_SnapshotRequest(id(Msg, TrUserData),
				     TrUserData);
      'SnapshotResponse' ->
	  encode_msg_SnapshotResponse(id(Msg, TrUserData),
				      TrUserData);
      'WatchRequest' ->
	  encode_msg_WatchRequest(id(Msg, TrUserData),
				  TrUserData);
      'WatchCreateRequest' ->
	  encode_msg_WatchCreateRequest(id(Msg, TrUserData),
					TrUserData);
      'WatchCancelRequest' ->
	  encode_msg_WatchCancelRequest(id(Msg, TrUserData),
					TrUserData);
      'WatchProgressRequest' ->
	  encode_msg_WatchProgressRequest(id(Msg, TrUserData),
					  TrUserData);
      'WatchResponse' ->
	  encode_msg_WatchResponse(id(Msg, TrUserData),
				   TrUserData);
      'LeaseGrantRequest' ->
	  encode_msg_LeaseGrantRequest(id(Msg, TrUserData),
				       TrUserData);
      'LeaseGrantResponse' ->
	  encode_msg_LeaseGrantResponse(id(Msg, TrUserData),
					TrUserData);
      'LeaseRevokeRequest' ->
	  encode_msg_LeaseRevokeRequest(id(Msg, TrUserData),
					TrUserData);
      'LeaseRevokeResponse' ->
	  encode_msg_LeaseRevokeResponse(id(Msg, TrUserData),
					 TrUserData);
      'LeaseCheckpoint' ->
	  encode_msg_LeaseCheckpoint(id(Msg, TrUserData),
				     TrUserData);
      'LeaseCheckpointRequest' ->
	  encode_msg_LeaseCheckpointRequest(id(Msg, TrUserData),
					    TrUserData);
      'LeaseCheckpointResponse' ->
	  encode_msg_LeaseCheckpointResponse(id(Msg, TrUserData),
					     TrUserData);
      'LeaseKeepAliveRequest' ->
	  encode_msg_LeaseKeepAliveRequest(id(Msg, TrUserData),
					   TrUserData);
      'LeaseKeepAliveResponse' ->
	  encode_msg_LeaseKeepAliveResponse(id(Msg, TrUserData),
					    TrUserData);
      'LeaseTimeToLiveRequest' ->
	  encode_msg_LeaseTimeToLiveRequest(id(Msg, TrUserData),
					    TrUserData);
      'LeaseTimeToLiveResponse' ->
	  encode_msg_LeaseTimeToLiveResponse(id(Msg, TrUserData),
					     TrUserData);
      'LeaseLeasesRequest' ->
	  encode_msg_LeaseLeasesRequest(id(Msg, TrUserData),
					TrUserData);
      'LeaseStatus' ->
	  encode_msg_LeaseStatus(id(Msg, TrUserData), TrUserData);
      'LeaseLeasesResponse' ->
	  encode_msg_LeaseLeasesResponse(id(Msg, TrUserData),
					 TrUserData);
      'Member' ->
	  encode_msg_Member(id(Msg, TrUserData), TrUserData);
      'MemberAddRequest' ->
	  encode_msg_MemberAddRequest(id(Msg, TrUserData),
				      TrUserData);
      'MemberAddResponse' ->
	  encode_msg_MemberAddResponse(id(Msg, TrUserData),
				       TrUserData);
      'MemberRemoveRequest' ->
	  encode_msg_MemberRemoveRequest(id(Msg, TrUserData),
					 TrUserData);
      'MemberRemoveResponse' ->
	  encode_msg_MemberRemoveResponse(id(Msg, TrUserData),
					  TrUserData);
      'MemberUpdateRequest' ->
	  encode_msg_MemberUpdateRequest(id(Msg, TrUserData),
					 TrUserData);
      'MemberUpdateResponse' ->
	  encode_msg_MemberUpdateResponse(id(Msg, TrUserData),
					  TrUserData);
      'MemberListRequest' ->
	  encode_msg_MemberListRequest(id(Msg, TrUserData),
				       TrUserData);
      'MemberListResponse' ->
	  encode_msg_MemberListResponse(id(Msg, TrUserData),
					TrUserData);
      'DefragmentRequest' ->
	  encode_msg_DefragmentRequest(id(Msg, TrUserData),
				       TrUserData);
      'DefragmentResponse' ->
	  encode_msg_DefragmentResponse(id(Msg, TrUserData),
					TrUserData);
      'MoveLeaderRequest' ->
	  encode_msg_MoveLeaderRequest(id(Msg, TrUserData),
				       TrUserData);
      'MoveLeaderResponse' ->
	  encode_msg_MoveLeaderResponse(id(Msg, TrUserData),
					TrUserData);
      'AlarmRequest' ->
	  encode_msg_AlarmRequest(id(Msg, TrUserData),
				  TrUserData);
      'AlarmMember' ->
	  encode_msg_AlarmMember(id(Msg, TrUserData), TrUserData);
      'AlarmResponse' ->
	  encode_msg_AlarmResponse(id(Msg, TrUserData),
				   TrUserData);
      'StatusRequest' ->
	  encode_msg_StatusRequest(id(Msg, TrUserData),
				   TrUserData);
      'StatusResponse' ->
	  encode_msg_StatusResponse(id(Msg, TrUserData),
				    TrUserData);
      'AuthEnableRequest' ->
	  encode_msg_AuthEnableRequest(id(Msg, TrUserData),
				       TrUserData);
      'AuthDisableRequest' ->
	  encode_msg_AuthDisableRequest(id(Msg, TrUserData),
					TrUserData);
      'AuthenticateRequest' ->
	  encode_msg_AuthenticateRequest(id(Msg, TrUserData),
					 TrUserData);
      'AuthUserAddRequest' ->
	  encode_msg_AuthUserAddRequest(id(Msg, TrUserData),
					TrUserData);
      'AuthUserGetRequest' ->
	  encode_msg_AuthUserGetRequest(id(Msg, TrUserData),
					TrUserData);
      'AuthUserDeleteRequest' ->
	  encode_msg_AuthUserDeleteRequest(id(Msg, TrUserData),
					   TrUserData);
      'AuthUserChangePasswordRequest' ->
	  encode_msg_AuthUserChangePasswordRequest(id(Msg,
						      TrUserData),
						   TrUserData);
      'AuthUserGrantRoleRequest' ->
	  encode_msg_AuthUserGrantRoleRequest(id(Msg, TrUserData),
					      TrUserData);
      'AuthUserRevokeRoleRequest' ->
	  encode_msg_AuthUserRevokeRoleRequest(id(Msg,
						  TrUserData),
					       TrUserData);
      'AuthRoleAddRequest' ->
	  encode_msg_AuthRoleAddRequest(id(Msg, TrUserData),
					TrUserData);
      'AuthRoleGetRequest' ->
	  encode_msg_AuthRoleGetRequest(id(Msg, TrUserData),
					TrUserData);
      'AuthUserListRequest' ->
	  encode_msg_AuthUserListRequest(id(Msg, TrUserData),
					 TrUserData);
      'AuthRoleListRequest' ->
	  encode_msg_AuthRoleListRequest(id(Msg, TrUserData),
					 TrUserData);
      'AuthRoleDeleteRequest' ->
	  encode_msg_AuthRoleDeleteRequest(id(Msg, TrUserData),
					   TrUserData);
      'AuthRoleGrantPermissionRequest' ->
	  encode_msg_AuthRoleGrantPermissionRequest(id(Msg,
						       TrUserData),
						    TrUserData);
      'AuthRoleRevokePermissionRequest' ->
	  encode_msg_AuthRoleRevokePermissionRequest(id(Msg,
							TrUserData),
						     TrUserData);
      'AuthEnableResponse' ->
	  encode_msg_AuthEnableResponse(id(Msg, TrUserData),
					TrUserData);
      'AuthDisableResponse' ->
	  encode_msg_AuthDisableResponse(id(Msg, TrUserData),
					 TrUserData);
      'AuthenticateResponse' ->
	  encode_msg_AuthenticateResponse(id(Msg, TrUserData),
					  TrUserData);
      'AuthUserAddResponse' ->
	  encode_msg_AuthUserAddResponse(id(Msg, TrUserData),
					 TrUserData);
      'AuthUserGetResponse' ->
	  encode_msg_AuthUserGetResponse(id(Msg, TrUserData),
					 TrUserData);
      'AuthUserDeleteResponse' ->
	  encode_msg_AuthUserDeleteResponse(id(Msg, TrUserData),
					    TrUserData);
      'AuthUserChangePasswordResponse' ->
	  encode_msg_AuthUserChangePasswordResponse(id(Msg,
						       TrUserData),
						    TrUserData);
      'AuthUserGrantRoleResponse' ->
	  encode_msg_AuthUserGrantRoleResponse(id(Msg,
						  TrUserData),
					       TrUserData);
      'AuthUserRevokeRoleResponse' ->
	  encode_msg_AuthUserRevokeRoleResponse(id(Msg,
						   TrUserData),
						TrUserData);
      'AuthRoleAddResponse' ->
	  encode_msg_AuthRoleAddResponse(id(Msg, TrUserData),
					 TrUserData);
      'AuthRoleGetResponse' ->
	  encode_msg_AuthRoleGetResponse(id(Msg, TrUserData),
					 TrUserData);
      'AuthRoleListResponse' ->
	  encode_msg_AuthRoleListResponse(id(Msg, TrUserData),
					  TrUserData);
      'AuthUserListResponse' ->
	  encode_msg_AuthUserListResponse(id(Msg, TrUserData),
					  TrUserData);
      'AuthRoleDeleteResponse' ->
	  encode_msg_AuthRoleDeleteResponse(id(Msg, TrUserData),
					    TrUserData);
      'AuthRoleGrantPermissionResponse' ->
	  encode_msg_AuthRoleGrantPermissionResponse(id(Msg,
							TrUserData),
						     TrUserData);
      'AuthRoleRevokePermissionResponse' ->
	  encode_msg_AuthRoleRevokePermissionResponse(id(Msg,
							 TrUserData),
						      TrUserData);
      'KeyValue' ->
	  encode_msg_KeyValue(id(Msg, TrUserData), TrUserData);
      'Event' ->
	  encode_msg_Event(id(Msg, TrUserData), TrUserData);
      'User' ->
	  encode_msg_User(id(Msg, TrUserData), TrUserData);
      'Permission' ->
	  encode_msg_Permission(id(Msg, TrUserData), TrUserData);
      'Role' ->
	  encode_msg_Role(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_ResponseHeader(Msg, TrUserData) ->
    encode_msg_ResponseHeader(Msg, <<>>, TrUserData).


encode_msg_ResponseHeader(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{cluster_id := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 0 -> Bin;
		    true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{member_id := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= 0 -> B1;
		    true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{revision := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 if TrF3 =:= 0 -> B2;
		    true ->
			e_type_int64(TrF3, <<B2/binary, 24>>, TrUserData)
		 end
	       end;
	   _ -> B2
	 end,
    case M of
      #{raft_term := F4} ->
	  begin
	    TrF4 = id(F4, TrUserData),
	    if TrF4 =:= 0 -> B3;
	       true -> e_varint(TrF4, <<B3/binary, 32>>, TrUserData)
	    end
	  end;
      _ -> B3
    end.

encode_msg_RangeRequest(Msg, TrUserData) ->
    encode_msg_RangeRequest(Msg, <<>>, TrUserData).


encode_msg_RangeRequest(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{key := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case iolist_size(TrF1) of
		   0 -> Bin;
		   _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{range_end := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 case iolist_size(TrF2) of
		   0 -> B1;
		   _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{limit := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 if TrF3 =:= 0 -> B2;
		    true ->
			e_type_int64(TrF3, <<B2/binary, 24>>, TrUserData)
		 end
	       end;
	   _ -> B2
	 end,
    B4 = case M of
	   #{revision := F4} ->
	       begin
		 TrF4 = id(F4, TrUserData),
		 if TrF4 =:= 0 -> B3;
		    true ->
			e_type_int64(TrF4, <<B3/binary, 32>>, TrUserData)
		 end
	       end;
	   _ -> B3
	 end,
    B5 = case M of
	   #{sort_order := F5} ->
	       begin
		 TrF5 = id(F5, TrUserData),
		 if TrF5 =:= 'NONE'; TrF5 =:= 0 -> B4;
		    true ->
			'e_enum_RangeRequest.SortOrder'(TrF5, <<B4/binary, 40>>,
							'MaybeTrUserData')
		 end
	       end;
	   _ -> B4
	 end,
    B6 = case M of
	   #{sort_target := F6} ->
	       begin
		 TrF6 = id(F6, TrUserData),
		 if TrF6 =:= 'KEY'; TrF6 =:= 0 -> B5;
		    true ->
			'e_enum_RangeRequest.SortTarget'(TrF6,
							 <<B5/binary, 48>>,
							 'MaybeTrUserData')
		 end
	       end;
	   _ -> B5
	 end,
    B7 = case M of
	   #{serializable := F7} ->
	       begin
		 TrF7 = id(F7, TrUserData),
		 if TrF7 =:= false -> B6;
		    true -> e_type_bool(TrF7, <<B6/binary, 56>>, TrUserData)
		 end
	       end;
	   _ -> B6
	 end,
    B8 = case M of
	   #{keys_only := F8} ->
	       begin
		 TrF8 = id(F8, TrUserData),
		 if TrF8 =:= false -> B7;
		    true -> e_type_bool(TrF8, <<B7/binary, 64>>, TrUserData)
		 end
	       end;
	   _ -> B7
	 end,
    B9 = case M of
	   #{count_only := F9} ->
	       begin
		 TrF9 = id(F9, TrUserData),
		 if TrF9 =:= false -> B8;
		    true -> e_type_bool(TrF9, <<B8/binary, 72>>, TrUserData)
		 end
	       end;
	   _ -> B8
	 end,
    B10 = case M of
	    #{min_mod_revision := F10} ->
		begin
		  TrF10 = id(F10, TrUserData),
		  if TrF10 =:= 0 -> B9;
		     true ->
			 e_type_int64(TrF10, <<B9/binary, 80>>, TrUserData)
		  end
		end;
	    _ -> B9
	  end,
    B11 = case M of
	    #{max_mod_revision := F11} ->
		begin
		  TrF11 = id(F11, TrUserData),
		  if TrF11 =:= 0 -> B10;
		     true ->
			 e_type_int64(TrF11, <<B10/binary, 88>>, TrUserData)
		  end
		end;
	    _ -> B10
	  end,
    B12 = case M of
	    #{min_create_revision := F12} ->
		begin
		  TrF12 = id(F12, TrUserData),
		  if TrF12 =:= 0 -> B11;
		     true ->
			 e_type_int64(TrF12, <<B11/binary, 96>>, TrUserData)
		  end
		end;
	    _ -> B11
	  end,
    case M of
      #{max_create_revision := F13} ->
	  begin
	    TrF13 = id(F13, TrUserData),
	    if TrF13 =:= 0 -> B12;
	       true ->
		   e_type_int64(TrF13, <<B12/binary, 104>>, TrUserData)
	    end
	  end;
      _ -> B12
    end.

encode_msg_RangeResponse(Msg, TrUserData) ->
    encode_msg_RangeResponse(Msg, <<>>, TrUserData).


encode_msg_RangeResponse(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{header := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			e_mfield_RangeResponse_header(TrF1, <<Bin/binary, 10>>,
						      TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{kvs := F2} ->
	       TrF2 = id(F2, TrUserData),
	       if TrF2 == [] -> B1;
		  true -> e_field_RangeResponse_kvs(TrF2, B1, TrUserData)
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{more := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 if TrF3 =:= false -> B2;
		    true -> e_type_bool(TrF3, <<B2/binary, 24>>, TrUserData)
		 end
	       end;
	   _ -> B2
	 end,
    case M of
      #{count := F4} ->
	  begin
	    TrF4 = id(F4, TrUserData),
	    if TrF4 =:= 0 -> B3;
	       true ->
		   e_type_int64(TrF4, <<B3/binary, 32>>, TrUserData)
	    end
	  end;
      _ -> B3
    end.

encode_msg_PutRequest(Msg, TrUserData) ->
    encode_msg_PutRequest(Msg, <<>>, TrUserData).


encode_msg_PutRequest(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{key := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case iolist_size(TrF1) of
		   0 -> Bin;
		   _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{value := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 case iolist_size(TrF2) of
		   0 -> B1;
		   _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{lease := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 if TrF3 =:= 0 -> B2;
		    true ->
			e_type_int64(TrF3, <<B2/binary, 24>>, TrUserData)
		 end
	       end;
	   _ -> B2
	 end,
    B4 = case M of
	   #{prev_kv := F4} ->
	       begin
		 TrF4 = id(F4, TrUserData),
		 if TrF4 =:= false -> B3;
		    true -> e_type_bool(TrF4, <<B3/binary, 32>>, TrUserData)
		 end
	       end;
	   _ -> B3
	 end,
    B5 = case M of
	   #{ignore_value := F5} ->
	       begin
		 TrF5 = id(F5, TrUserData),
		 if TrF5 =:= false -> B4;
		    true -> e_type_bool(TrF5, <<B4/binary, 40>>, TrUserData)
		 end
	       end;
	   _ -> B4
	 end,
    case M of
      #{ignore_lease := F6} ->
	  begin
	    TrF6 = id(F6, TrUserData),
	    if TrF6 =:= false -> B5;
	       true -> e_type_bool(TrF6, <<B5/binary, 48>>, TrUserData)
	    end
	  end;
      _ -> B5
    end.

encode_msg_PutResponse(Msg, TrUserData) ->
    encode_msg_PutResponse(Msg, <<>>, TrUserData).


encode_msg_PutResponse(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{header := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			e_mfield_PutResponse_header(TrF1, <<Bin/binary, 10>>,
						    TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{prev_kv := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= undefined -> B1;
	       true ->
		   e_mfield_PutResponse_prev_kv(TrF2, <<B1/binary, 18>>,
						TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_DeleteRangeRequest(Msg, TrUserData) ->
    encode_msg_DeleteRangeRequest(Msg, <<>>, TrUserData).


encode_msg_DeleteRangeRequest(#{} = M, Bin,
			      TrUserData) ->
    B1 = case M of
	   #{key := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case iolist_size(TrF1) of
		   0 -> Bin;
		   _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{range_end := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 case iolist_size(TrF2) of
		   0 -> B1;
		   _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    case M of
      #{prev_kv := F3} ->
	  begin
	    TrF3 = id(F3, TrUserData),
	    if TrF3 =:= false -> B2;
	       true -> e_type_bool(TrF3, <<B2/binary, 24>>, TrUserData)
	    end
	  end;
      _ -> B2
    end.

encode_msg_DeleteRangeResponse(Msg, TrUserData) ->
    encode_msg_DeleteRangeResponse(Msg, <<>>, TrUserData).


encode_msg_DeleteRangeResponse(#{} = M, Bin,
			       TrUserData) ->
    B1 = case M of
	   #{header := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			e_mfield_DeleteRangeResponse_header(TrF1,
							    <<Bin/binary, 10>>,
							    TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{deleted := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= 0 -> B1;
		    true ->
			e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    case M of
      #{prev_kvs := F3} ->
	  TrF3 = id(F3, TrUserData),
	  if TrF3 == [] -> B2;
	     true ->
		 e_field_DeleteRangeResponse_prev_kvs(TrF3, B2,
						      TrUserData)
	  end;
      _ -> B2
    end.

encode_msg_RequestOp(Msg, TrUserData) ->
    encode_msg_RequestOp(Msg, <<>>, TrUserData).


encode_msg_RequestOp(#{} = M, Bin, TrUserData) ->
    case M of
      #{request := F1} ->
	  case id(F1, TrUserData) of
	    {request_range, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_mfield_RequestOp_request_range(TrTF1,
						   <<Bin/binary, 10>>,
						   TrUserData)
		end;
	    {request_put, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_mfield_RequestOp_request_put(TrTF1,
						 <<Bin/binary, 18>>, TrUserData)
		end;
	    {request_delete_range, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_mfield_RequestOp_request_delete_range(TrTF1,
							  <<Bin/binary, 26>>,
							  TrUserData)
		end;
	    {request_txn, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_mfield_RequestOp_request_txn(TrTF1,
						 <<Bin/binary, 34>>, TrUserData)
		end
	  end;
      _ -> Bin
    end.

encode_msg_ResponseOp(Msg, TrUserData) ->
    encode_msg_ResponseOp(Msg, <<>>, TrUserData).


encode_msg_ResponseOp(#{} = M, Bin, TrUserData) ->
    case M of
      #{response := F1} ->
	  case id(F1, TrUserData) of
	    {response_range, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_mfield_ResponseOp_response_range(TrTF1,
						     <<Bin/binary, 10>>,
						     TrUserData)
		end;
	    {response_put, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_mfield_ResponseOp_response_put(TrTF1,
						   <<Bin/binary, 18>>,
						   TrUserData)
		end;
	    {response_delete_range, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_mfield_ResponseOp_response_delete_range(TrTF1,
							    <<Bin/binary, 26>>,
							    TrUserData)
		end;
	    {response_txn, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_mfield_ResponseOp_response_txn(TrTF1,
						   <<Bin/binary, 34>>,
						   TrUserData)
		end
	  end;
      _ -> Bin
    end.

encode_msg_Compare(Msg, TrUserData) ->
    encode_msg_Compare(Msg, <<>>, TrUserData).


encode_msg_Compare(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{result := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 'EQUAL'; TrF1 =:= 0 -> Bin;
		    true ->
			'e_enum_Compare.CompareResult'(TrF1, <<Bin/binary, 8>>,
						       'MaybeTrUserData')
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{target := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= 'VERSION'; TrF2 =:= 0 -> B1;
		    true ->
			'e_enum_Compare.CompareTarget'(TrF2, <<B1/binary, 16>>,
						       'MaybeTrUserData')
		 end
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{key := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 case iolist_size(TrF3) of
		   0 -> B2;
		   _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
		 end
	       end;
	   _ -> B2
	 end,
    B4 = case M of
	   #{target_union := F4} ->
	       case id(F4, TrUserData) of
		 {version, TF4} ->
		     begin
		       TrTF4 = id(TF4, TrUserData),
		       e_type_int64(TrTF4, <<B3/binary, 32>>, TrUserData)
		     end;
		 {create_revision, TF4} ->
		     begin
		       TrTF4 = id(TF4, TrUserData),
		       e_type_int64(TrTF4, <<B3/binary, 40>>, TrUserData)
		     end;
		 {mod_revision, TF4} ->
		     begin
		       TrTF4 = id(TF4, TrUserData),
		       e_type_int64(TrTF4, <<B3/binary, 48>>, TrUserData)
		     end;
		 {value, TF4} ->
		     begin
		       TrTF4 = id(TF4, TrUserData),
		       e_type_bytes(TrTF4, <<B3/binary, 58>>, TrUserData)
		     end;
		 {lease, TF4} ->
		     begin
		       TrTF4 = id(TF4, TrUserData),
		       e_type_int64(TrTF4, <<B3/binary, 64>>, TrUserData)
		     end
	       end;
	   _ -> B3
	 end,
    case M of
      #{range_end := F5} ->
	  begin
	    TrF5 = id(F5, TrUserData),
	    case iolist_size(TrF5) of
	      0 -> B4;
	      _ ->
		  e_type_bytes(TrF5, <<B4/binary, 130, 4>>, TrUserData)
	    end
	  end;
      _ -> B4
    end.

encode_msg_TxnRequest(Msg, TrUserData) ->
    encode_msg_TxnRequest(Msg, <<>>, TrUserData).


encode_msg_TxnRequest(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{compare := F1} ->
	       TrF1 = id(F1, TrUserData),
	       if TrF1 == [] -> Bin;
		  true ->
		      e_field_TxnRequest_compare(TrF1, Bin, TrUserData)
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{success := F2} ->
	       TrF2 = id(F2, TrUserData),
	       if TrF2 == [] -> B1;
		  true -> e_field_TxnRequest_success(TrF2, B1, TrUserData)
	       end;
	   _ -> B1
	 end,
    case M of
      #{failure := F3} ->
	  TrF3 = id(F3, TrUserData),
	  if TrF3 == [] -> B2;
	     true -> e_field_TxnRequest_failure(TrF3, B2, TrUserData)
	  end;
      _ -> B2
    end.

encode_msg_TxnResponse(Msg, TrUserData) ->
    encode_msg_TxnResponse(Msg, <<>>, TrUserData).


encode_msg_TxnResponse(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{header := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			e_mfield_TxnResponse_header(TrF1, <<Bin/binary, 10>>,
						    TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{succeeded := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= false -> B1;
		    true -> e_type_bool(TrF2, <<B1/binary, 16>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    case M of
      #{responses := F3} ->
	  TrF3 = id(F3, TrUserData),
	  if TrF3 == [] -> B2;
	     true ->
		 e_field_TxnResponse_responses(TrF3, B2, TrUserData)
	  end;
      _ -> B2
    end.

encode_msg_CompactionRequest(Msg, TrUserData) ->
    encode_msg_CompactionRequest(Msg, <<>>, TrUserData).


encode_msg_CompactionRequest(#{} = M, Bin,
			     TrUserData) ->
    B1 = case M of
	   #{revision := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 0 -> Bin;
		    true ->
			e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{physical := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= false -> B1;
	       true -> e_type_bool(TrF2, <<B1/binary, 16>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_CompactionResponse(Msg, TrUserData) ->
    encode_msg_CompactionResponse(Msg, <<>>, TrUserData).


encode_msg_CompactionResponse(#{} = M, Bin,
			      TrUserData) ->
    case M of
      #{header := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= undefined -> Bin;
	       true ->
		   e_mfield_CompactionResponse_header(TrF1,
						      <<Bin/binary, 10>>,
						      TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_HashRequest(_Msg, _TrUserData) -> <<>>.

encode_msg_HashKVRequest(Msg, TrUserData) ->
    encode_msg_HashKVRequest(Msg, <<>>, TrUserData).


encode_msg_HashKVRequest(#{} = M, Bin, TrUserData) ->
    case M of
      #{revision := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= 0 -> Bin;
	       true ->
		   e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_HashKVResponse(Msg, TrUserData) ->
    encode_msg_HashKVResponse(Msg, <<>>, TrUserData).


encode_msg_HashKVResponse(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{header := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			e_mfield_HashKVResponse_header(TrF1, <<Bin/binary, 10>>,
						       TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{hash := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= 0 -> B1;
		    true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    case M of
      #{compact_revision := F3} ->
	  begin
	    TrF3 = id(F3, TrUserData),
	    if TrF3 =:= 0 -> B2;
	       true ->
		   e_type_int64(TrF3, <<B2/binary, 24>>, TrUserData)
	    end
	  end;
      _ -> B2
    end.

encode_msg_HashResponse(Msg, TrUserData) ->
    encode_msg_HashResponse(Msg, <<>>, TrUserData).


encode_msg_HashResponse(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{header := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			e_mfield_HashResponse_header(TrF1, <<Bin/binary, 10>>,
						     TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{hash := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= 0 -> B1;
	       true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_SnapshotRequest(_Msg, _TrUserData) -> <<>>.

encode_msg_SnapshotResponse(Msg, TrUserData) ->
    encode_msg_SnapshotResponse(Msg, <<>>, TrUserData).


encode_msg_SnapshotResponse(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{header := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			e_mfield_SnapshotResponse_header(TrF1,
							 <<Bin/binary, 10>>,
							 TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{remaining_bytes := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= 0 -> B1;
		    true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    case M of
      #{blob := F3} ->
	  begin
	    TrF3 = id(F3, TrUserData),
	    case iolist_size(TrF3) of
	      0 -> B2;
	      _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
	    end
	  end;
      _ -> B2
    end.

encode_msg_WatchRequest(Msg, TrUserData) ->
    encode_msg_WatchRequest(Msg, <<>>, TrUserData).


encode_msg_WatchRequest(#{} = M, Bin, TrUserData) ->
    case M of
      #{request_union := F1} ->
	  case id(F1, TrUserData) of
	    {create_request, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_mfield_WatchRequest_create_request(TrTF1,
						       <<Bin/binary, 10>>,
						       TrUserData)
		end;
	    {cancel_request, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_mfield_WatchRequest_cancel_request(TrTF1,
						       <<Bin/binary, 18>>,
						       TrUserData)
		end;
	    {progress_request, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_mfield_WatchRequest_progress_request(TrTF1,
							 <<Bin/binary, 26>>,
							 TrUserData)
		end
	  end;
      _ -> Bin
    end.

encode_msg_WatchCreateRequest(Msg, TrUserData) ->
    encode_msg_WatchCreateRequest(Msg, <<>>, TrUserData).


encode_msg_WatchCreateRequest(#{} = M, Bin,
			      TrUserData) ->
    B1 = case M of
	   #{key := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case iolist_size(TrF1) of
		   0 -> Bin;
		   _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{range_end := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 case iolist_size(TrF2) of
		   0 -> B1;
		   _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{start_revision := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 if TrF3 =:= 0 -> B2;
		    true ->
			e_type_int64(TrF3, <<B2/binary, 24>>, TrUserData)
		 end
	       end;
	   _ -> B2
	 end,
    B4 = case M of
	   #{progress_notify := F4} ->
	       begin
		 TrF4 = id(F4, TrUserData),
		 if TrF4 =:= false -> B3;
		    true -> e_type_bool(TrF4, <<B3/binary, 32>>, TrUserData)
		 end
	       end;
	   _ -> B3
	 end,
    B5 = case M of
	   #{filters := F5} ->
	       TrF5 = id(F5, TrUserData),
	       if TrF5 == [] -> B4;
		  true ->
		      e_field_WatchCreateRequest_filters(TrF5, B4, TrUserData)
	       end;
	   _ -> B4
	 end,
    B6 = case M of
	   #{prev_kv := F6} ->
	       begin
		 TrF6 = id(F6, TrUserData),
		 if TrF6 =:= false -> B5;
		    true -> e_type_bool(TrF6, <<B5/binary, 48>>, TrUserData)
		 end
	       end;
	   _ -> B5
	 end,
    B7 = case M of
	   #{watch_id := F7} ->
	       begin
		 TrF7 = id(F7, TrUserData),
		 if TrF7 =:= 0 -> B6;
		    true ->
			e_type_int64(TrF7, <<B6/binary, 56>>, TrUserData)
		 end
	       end;
	   _ -> B6
	 end,
    case M of
      #{fragment := F8} ->
	  begin
	    TrF8 = id(F8, TrUserData),
	    if TrF8 =:= false -> B7;
	       true -> e_type_bool(TrF8, <<B7/binary, 64>>, TrUserData)
	    end
	  end;
      _ -> B7
    end.

encode_msg_WatchCancelRequest(Msg, TrUserData) ->
    encode_msg_WatchCancelRequest(Msg, <<>>, TrUserData).


encode_msg_WatchCancelRequest(#{} = M, Bin,
			      TrUserData) ->
    case M of
      #{watch_id := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= 0 -> Bin;
	       true ->
		   e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_WatchProgressRequest(_Msg, _TrUserData) ->
    <<>>.

encode_msg_WatchResponse(Msg, TrUserData) ->
    encode_msg_WatchResponse(Msg, <<>>, TrUserData).


encode_msg_WatchResponse(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{header := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			e_mfield_WatchResponse_header(TrF1, <<Bin/binary, 10>>,
						      TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{watch_id := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= 0 -> B1;
		    true ->
			e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{created := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 if TrF3 =:= false -> B2;
		    true -> e_type_bool(TrF3, <<B2/binary, 24>>, TrUserData)
		 end
	       end;
	   _ -> B2
	 end,
    B4 = case M of
	   #{canceled := F4} ->
	       begin
		 TrF4 = id(F4, TrUserData),
		 if TrF4 =:= false -> B3;
		    true -> e_type_bool(TrF4, <<B3/binary, 32>>, TrUserData)
		 end
	       end;
	   _ -> B3
	 end,
    B5 = case M of
	   #{compact_revision := F5} ->
	       begin
		 TrF5 = id(F5, TrUserData),
		 if TrF5 =:= 0 -> B4;
		    true ->
			e_type_int64(TrF5, <<B4/binary, 40>>, TrUserData)
		 end
	       end;
	   _ -> B4
	 end,
    B6 = case M of
	   #{cancel_reason := F6} ->
	       begin
		 TrF6 = id(F6, TrUserData),
		 case is_empty_string(TrF6) of
		   true -> B5;
		   false ->
		       e_type_string(TrF6, <<B5/binary, 50>>, TrUserData)
		 end
	       end;
	   _ -> B5
	 end,
    B7 = case M of
	   #{fragment := F7} ->
	       begin
		 TrF7 = id(F7, TrUserData),
		 if TrF7 =:= false -> B6;
		    true -> e_type_bool(TrF7, <<B6/binary, 56>>, TrUserData)
		 end
	       end;
	   _ -> B6
	 end,
    case M of
      #{events := F8} ->
	  TrF8 = id(F8, TrUserData),
	  if TrF8 == [] -> B7;
	     true ->
		 e_field_WatchResponse_events(TrF8, B7, TrUserData)
	  end;
      _ -> B7
    end.

encode_msg_LeaseGrantRequest(Msg, TrUserData) ->
    encode_msg_LeaseGrantRequest(Msg, <<>>, TrUserData).


encode_msg_LeaseGrantRequest(#{} = M, Bin,
			     TrUserData) ->
    B1 = case M of
	   #{'TTL' := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 0 -> Bin;
		    true ->
			e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{'ID' := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= 0 -> B1;
	       true ->
		   e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_LeaseGrantResponse(Msg, TrUserData) ->
    encode_msg_LeaseGrantResponse(Msg, <<>>, TrUserData).


encode_msg_LeaseGrantResponse(#{} = M, Bin,
			      TrUserData) ->
    B1 = case M of
	   #{header := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			e_mfield_LeaseGrantResponse_header(TrF1,
							   <<Bin/binary, 10>>,
							   TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{'ID' := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= 0 -> B1;
		    true ->
			e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{'TTL' := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 if TrF3 =:= 0 -> B2;
		    true ->
			e_type_int64(TrF3, <<B2/binary, 24>>, TrUserData)
		 end
	       end;
	   _ -> B2
	 end,
    case M of
      #{error := F4} ->
	  begin
	    TrF4 = id(F4, TrUserData),
	    case is_empty_string(TrF4) of
	      true -> B3;
	      false ->
		  e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
	    end
	  end;
      _ -> B3
    end.

encode_msg_LeaseRevokeRequest(Msg, TrUserData) ->
    encode_msg_LeaseRevokeRequest(Msg, <<>>, TrUserData).


encode_msg_LeaseRevokeRequest(#{} = M, Bin,
			      TrUserData) ->
    case M of
      #{'ID' := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= 0 -> Bin;
	       true ->
		   e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_LeaseRevokeResponse(Msg, TrUserData) ->
    encode_msg_LeaseRevokeResponse(Msg, <<>>, TrUserData).


encode_msg_LeaseRevokeResponse(#{} = M, Bin,
			       TrUserData) ->
    case M of
      #{header := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= undefined -> Bin;
	       true ->
		   e_mfield_LeaseRevokeResponse_header(TrF1,
						       <<Bin/binary, 10>>,
						       TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_LeaseCheckpoint(Msg, TrUserData) ->
    encode_msg_LeaseCheckpoint(Msg, <<>>, TrUserData).


encode_msg_LeaseCheckpoint(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{'ID' := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 0 -> Bin;
		    true ->
			e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{remaining_TTL := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= 0 -> B1;
	       true ->
		   e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_LeaseCheckpointRequest(Msg, TrUserData) ->
    encode_msg_LeaseCheckpointRequest(Msg, <<>>,
				      TrUserData).


encode_msg_LeaseCheckpointRequest(#{} = M, Bin,
				  TrUserData) ->
    case M of
      #{checkpoints := F1} ->
	  TrF1 = id(F1, TrUserData),
	  if TrF1 == [] -> Bin;
	     true ->
		 e_field_LeaseCheckpointRequest_checkpoints(TrF1, Bin,
							    TrUserData)
	  end;
      _ -> Bin
    end.

encode_msg_LeaseCheckpointResponse(Msg, TrUserData) ->
    encode_msg_LeaseCheckpointResponse(Msg, <<>>,
				       TrUserData).


encode_msg_LeaseCheckpointResponse(#{} = M, Bin,
				   TrUserData) ->
    case M of
      #{header := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= undefined -> Bin;
	       true ->
		   e_mfield_LeaseCheckpointResponse_header(TrF1,
							   <<Bin/binary, 10>>,
							   TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_LeaseKeepAliveRequest(Msg, TrUserData) ->
    encode_msg_LeaseKeepAliveRequest(Msg, <<>>, TrUserData).


encode_msg_LeaseKeepAliveRequest(#{} = M, Bin,
				 TrUserData) ->
    case M of
      #{'ID' := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= 0 -> Bin;
	       true ->
		   e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_LeaseKeepAliveResponse(Msg, TrUserData) ->
    encode_msg_LeaseKeepAliveResponse(Msg, <<>>,
				      TrUserData).


encode_msg_LeaseKeepAliveResponse(#{} = M, Bin,
				  TrUserData) ->
    B1 = case M of
	   #{header := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			e_mfield_LeaseKeepAliveResponse_header(TrF1,
							       <<Bin/binary,
								 10>>,
							       TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{'ID' := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= 0 -> B1;
		    true ->
			e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    case M of
      #{'TTL' := F3} ->
	  begin
	    TrF3 = id(F3, TrUserData),
	    if TrF3 =:= 0 -> B2;
	       true ->
		   e_type_int64(TrF3, <<B2/binary, 24>>, TrUserData)
	    end
	  end;
      _ -> B2
    end.

encode_msg_LeaseTimeToLiveRequest(Msg, TrUserData) ->
    encode_msg_LeaseTimeToLiveRequest(Msg, <<>>,
				      TrUserData).


encode_msg_LeaseTimeToLiveRequest(#{} = M, Bin,
				  TrUserData) ->
    B1 = case M of
	   #{'ID' := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 0 -> Bin;
		    true ->
			e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{keys := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= false -> B1;
	       true -> e_type_bool(TrF2, <<B1/binary, 16>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_LeaseTimeToLiveResponse(Msg, TrUserData) ->
    encode_msg_LeaseTimeToLiveResponse(Msg, <<>>,
				       TrUserData).


encode_msg_LeaseTimeToLiveResponse(#{} = M, Bin,
				   TrUserData) ->
    B1 = case M of
	   #{header := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			e_mfield_LeaseTimeToLiveResponse_header(TrF1,
								<<Bin/binary,
								  10>>,
								TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{'ID' := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= 0 -> B1;
		    true ->
			e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{'TTL' := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 if TrF3 =:= 0 -> B2;
		    true ->
			e_type_int64(TrF3, <<B2/binary, 24>>, TrUserData)
		 end
	       end;
	   _ -> B2
	 end,
    B4 = case M of
	   #{grantedTTL := F4} ->
	       begin
		 TrF4 = id(F4, TrUserData),
		 if TrF4 =:= 0 -> B3;
		    true ->
			e_type_int64(TrF4, <<B3/binary, 32>>, TrUserData)
		 end
	       end;
	   _ -> B3
	 end,
    case M of
      #{keys := F5} ->
	  TrF5 = id(F5, TrUserData),
	  if TrF5 == [] -> B4;
	     true ->
		 e_field_LeaseTimeToLiveResponse_keys(TrF5, B4,
						      TrUserData)
	  end;
      _ -> B4
    end.

encode_msg_LeaseLeasesRequest(_Msg, _TrUserData) ->
    <<>>.

encode_msg_LeaseStatus(Msg, TrUserData) ->
    encode_msg_LeaseStatus(Msg, <<>>, TrUserData).


encode_msg_LeaseStatus(#{} = M, Bin, TrUserData) ->
    case M of
      #{'ID' := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= 0 -> Bin;
	       true ->
		   e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_LeaseLeasesResponse(Msg, TrUserData) ->
    encode_msg_LeaseLeasesResponse(Msg, <<>>, TrUserData).


encode_msg_LeaseLeasesResponse(#{} = M, Bin,
			       TrUserData) ->
    B1 = case M of
	   #{header := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			e_mfield_LeaseLeasesResponse_header(TrF1,
							    <<Bin/binary, 10>>,
							    TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{leases := F2} ->
	  TrF2 = id(F2, TrUserData),
	  if TrF2 == [] -> B1;
	     true ->
		 e_field_LeaseLeasesResponse_leases(TrF2, B1, TrUserData)
	  end;
      _ -> B1
    end.

encode_msg_Member(Msg, TrUserData) ->
    encode_msg_Member(Msg, <<>>, TrUserData).


encode_msg_Member(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{'ID' := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 0 -> Bin;
		    true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{name := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 case is_empty_string(TrF2) of
		   true -> B1;
		   false ->
		       e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{peerURLs := F3} ->
	       TrF3 = id(F3, TrUserData),
	       if TrF3 == [] -> B2;
		  true -> e_field_Member_peerURLs(TrF3, B2, TrUserData)
	       end;
	   _ -> B2
	 end,
    case M of
      #{clientURLs := F4} ->
	  TrF4 = id(F4, TrUserData),
	  if TrF4 == [] -> B3;
	     true -> e_field_Member_clientURLs(TrF4, B3, TrUserData)
	  end;
      _ -> B3
    end.

encode_msg_MemberAddRequest(Msg, TrUserData) ->
    encode_msg_MemberAddRequest(Msg, <<>>, TrUserData).


encode_msg_MemberAddRequest(#{} = M, Bin, TrUserData) ->
    case M of
      #{peerURLs := F1} ->
	  TrF1 = id(F1, TrUserData),
	  if TrF1 == [] -> Bin;
	     true ->
		 e_field_MemberAddRequest_peerURLs(TrF1, Bin, TrUserData)
	  end;
      _ -> Bin
    end.

encode_msg_MemberAddResponse(Msg, TrUserData) ->
    encode_msg_MemberAddResponse(Msg, <<>>, TrUserData).


encode_msg_MemberAddResponse(#{} = M, Bin,
			     TrUserData) ->
    B1 = case M of
	   #{header := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			e_mfield_MemberAddResponse_header(TrF1,
							  <<Bin/binary, 10>>,
							  TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{member := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= undefined -> B1;
		    true ->
			e_mfield_MemberAddResponse_member(TrF2,
							  <<B1/binary, 18>>,
							  TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    case M of
      #{members := F3} ->
	  TrF3 = id(F3, TrUserData),
	  if TrF3 == [] -> B2;
	     true ->
		 e_field_MemberAddResponse_members(TrF3, B2, TrUserData)
	  end;
      _ -> B2
    end.

encode_msg_MemberRemoveRequest(Msg, TrUserData) ->
    encode_msg_MemberRemoveRequest(Msg, <<>>, TrUserData).


encode_msg_MemberRemoveRequest(#{} = M, Bin,
			       TrUserData) ->
    case M of
      #{'ID' := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= 0 -> Bin;
	       true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_MemberRemoveResponse(Msg, TrUserData) ->
    encode_msg_MemberRemoveResponse(Msg, <<>>, TrUserData).


encode_msg_MemberRemoveResponse(#{} = M, Bin,
				TrUserData) ->
    B1 = case M of
	   #{header := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			e_mfield_MemberRemoveResponse_header(TrF1,
							     <<Bin/binary, 10>>,
							     TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{members := F2} ->
	  TrF2 = id(F2, TrUserData),
	  if TrF2 == [] -> B1;
	     true ->
		 e_field_MemberRemoveResponse_members(TrF2, B1,
						      TrUserData)
	  end;
      _ -> B1
    end.

encode_msg_MemberUpdateRequest(Msg, TrUserData) ->
    encode_msg_MemberUpdateRequest(Msg, <<>>, TrUserData).


encode_msg_MemberUpdateRequest(#{} = M, Bin,
			       TrUserData) ->
    B1 = case M of
	   #{'ID' := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 0 -> Bin;
		    true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{peerURLs := F2} ->
	  TrF2 = id(F2, TrUserData),
	  if TrF2 == [] -> B1;
	     true ->
		 e_field_MemberUpdateRequest_peerURLs(TrF2, B1,
						      TrUserData)
	  end;
      _ -> B1
    end.

encode_msg_MemberUpdateResponse(Msg, TrUserData) ->
    encode_msg_MemberUpdateResponse(Msg, <<>>, TrUserData).


encode_msg_MemberUpdateResponse(#{} = M, Bin,
				TrUserData) ->
    B1 = case M of
	   #{header := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			e_mfield_MemberUpdateResponse_header(TrF1,
							     <<Bin/binary, 10>>,
							     TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{members := F2} ->
	  TrF2 = id(F2, TrUserData),
	  if TrF2 == [] -> B1;
	     true ->
		 e_field_MemberUpdateResponse_members(TrF2, B1,
						      TrUserData)
	  end;
      _ -> B1
    end.

encode_msg_MemberListRequest(_Msg, _TrUserData) -> <<>>.

encode_msg_MemberListResponse(Msg, TrUserData) ->
    encode_msg_MemberListResponse(Msg, <<>>, TrUserData).


encode_msg_MemberListResponse(#{} = M, Bin,
			      TrUserData) ->
    B1 = case M of
	   #{header := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			e_mfield_MemberListResponse_header(TrF1,
							   <<Bin/binary, 10>>,
							   TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{members := F2} ->
	  TrF2 = id(F2, TrUserData),
	  if TrF2 == [] -> B1;
	     true ->
		 e_field_MemberListResponse_members(TrF2, B1, TrUserData)
	  end;
      _ -> B1
    end.

encode_msg_DefragmentRequest(_Msg, _TrUserData) -> <<>>.

encode_msg_DefragmentResponse(Msg, TrUserData) ->
    encode_msg_DefragmentResponse(Msg, <<>>, TrUserData).


encode_msg_DefragmentResponse(#{} = M, Bin,
			      TrUserData) ->
    case M of
      #{header := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= undefined -> Bin;
	       true ->
		   e_mfield_DefragmentResponse_header(TrF1,
						      <<Bin/binary, 10>>,
						      TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_MoveLeaderRequest(Msg, TrUserData) ->
    encode_msg_MoveLeaderRequest(Msg, <<>>, TrUserData).


encode_msg_MoveLeaderRequest(#{} = M, Bin,
			     TrUserData) ->
    case M of
      #{targetID := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= 0 -> Bin;
	       true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_MoveLeaderResponse(Msg, TrUserData) ->
    encode_msg_MoveLeaderResponse(Msg, <<>>, TrUserData).


encode_msg_MoveLeaderResponse(#{} = M, Bin,
			      TrUserData) ->
    case M of
      #{header := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= undefined -> Bin;
	       true ->
		   e_mfield_MoveLeaderResponse_header(TrF1,
						      <<Bin/binary, 10>>,
						      TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_AlarmRequest(Msg, TrUserData) ->
    encode_msg_AlarmRequest(Msg, <<>>, TrUserData).


encode_msg_AlarmRequest(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{action := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 'GET'; TrF1 =:= 0 -> Bin;
		    true ->
			'e_enum_AlarmRequest.AlarmAction'(TrF1,
							  <<Bin/binary, 8>>,
							  'MaybeTrUserData')
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{memberID := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= 0 -> B1;
		    true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    case M of
      #{alarm := F3} ->
	  begin
	    TrF3 = id(F3, TrUserData),
	    if TrF3 =:= 'NONE'; TrF3 =:= 0 -> B2;
	       true ->
		   e_enum_AlarmType(TrF3, <<B2/binary, 24>>,
				    'MaybeTrUserData')
	    end
	  end;
      _ -> B2
    end.

encode_msg_AlarmMember(Msg, TrUserData) ->
    encode_msg_AlarmMember(Msg, <<>>, TrUserData).


encode_msg_AlarmMember(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{memberID := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 0 -> Bin;
		    true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{alarm := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= 'NONE'; TrF2 =:= 0 -> B1;
	       true ->
		   e_enum_AlarmType(TrF2, <<B1/binary, 16>>,
				    'MaybeTrUserData')
	    end
	  end;
      _ -> B1
    end.

encode_msg_AlarmResponse(Msg, TrUserData) ->
    encode_msg_AlarmResponse(Msg, <<>>, TrUserData).


encode_msg_AlarmResponse(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{header := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			e_mfield_AlarmResponse_header(TrF1, <<Bin/binary, 10>>,
						      TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{alarms := F2} ->
	  TrF2 = id(F2, TrUserData),
	  if TrF2 == [] -> B1;
	     true ->
		 e_field_AlarmResponse_alarms(TrF2, B1, TrUserData)
	  end;
      _ -> B1
    end.

encode_msg_StatusRequest(_Msg, _TrUserData) -> <<>>.

encode_msg_StatusResponse(Msg, TrUserData) ->
    encode_msg_StatusResponse(Msg, <<>>, TrUserData).


encode_msg_StatusResponse(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{header := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			e_mfield_StatusResponse_header(TrF1, <<Bin/binary, 10>>,
						       TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{version := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 case is_empty_string(TrF2) of
		   true -> B1;
		   false ->
		       e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{dbSize := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 if TrF3 =:= 0 -> B2;
		    true ->
			e_type_int64(TrF3, <<B2/binary, 24>>, TrUserData)
		 end
	       end;
	   _ -> B2
	 end,
    B4 = case M of
	   #{leader := F4} ->
	       begin
		 TrF4 = id(F4, TrUserData),
		 if TrF4 =:= 0 -> B3;
		    true -> e_varint(TrF4, <<B3/binary, 32>>, TrUserData)
		 end
	       end;
	   _ -> B3
	 end,
    B5 = case M of
	   #{raftIndex := F5} ->
	       begin
		 TrF5 = id(F5, TrUserData),
		 if TrF5 =:= 0 -> B4;
		    true -> e_varint(TrF5, <<B4/binary, 40>>, TrUserData)
		 end
	       end;
	   _ -> B4
	 end,
    B6 = case M of
	   #{raftTerm := F6} ->
	       begin
		 TrF6 = id(F6, TrUserData),
		 if TrF6 =:= 0 -> B5;
		    true -> e_varint(TrF6, <<B5/binary, 48>>, TrUserData)
		 end
	       end;
	   _ -> B5
	 end,
    B7 = case M of
	   #{raftAppliedIndex := F7} ->
	       begin
		 TrF7 = id(F7, TrUserData),
		 if TrF7 =:= 0 -> B6;
		    true -> e_varint(TrF7, <<B6/binary, 56>>, TrUserData)
		 end
	       end;
	   _ -> B6
	 end,
    B8 = case M of
	   #{errors := F8} ->
	       TrF8 = id(F8, TrUserData),
	       if TrF8 == [] -> B7;
		  true ->
		      e_field_StatusResponse_errors(TrF8, B7, TrUserData)
	       end;
	   _ -> B7
	 end,
    case M of
      #{dbSizeInUse := F9} ->
	  begin
	    TrF9 = id(F9, TrUserData),
	    if TrF9 =:= 0 -> B8;
	       true ->
		   e_type_int64(TrF9, <<B8/binary, 72>>, TrUserData)
	    end
	  end;
      _ -> B8
    end.

encode_msg_AuthEnableRequest(_Msg, _TrUserData) -> <<>>.

encode_msg_AuthDisableRequest(_Msg, _TrUserData) ->
    <<>>.

encode_msg_AuthenticateRequest(Msg, TrUserData) ->
    encode_msg_AuthenticateRequest(Msg, <<>>, TrUserData).


encode_msg_AuthenticateRequest(#{} = M, Bin,
			       TrUserData) ->
    B1 = case M of
	   #{name := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case is_empty_string(TrF1) of
		   true -> Bin;
		   false ->
		       e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{password := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    case is_empty_string(TrF2) of
	      true -> B1;
	      false ->
		  e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_AuthUserAddRequest(Msg, TrUserData) ->
    encode_msg_AuthUserAddRequest(Msg, <<>>, TrUserData).


encode_msg_AuthUserAddRequest(#{} = M, Bin,
			      TrUserData) ->
    B1 = case M of
	   #{name := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case is_empty_string(TrF1) of
		   true -> Bin;
		   false ->
		       e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{password := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    case is_empty_string(TrF2) of
	      true -> B1;
	      false ->
		  e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_AuthUserGetRequest(Msg, TrUserData) ->
    encode_msg_AuthUserGetRequest(Msg, <<>>, TrUserData).


encode_msg_AuthUserGetRequest(#{} = M, Bin,
			      TrUserData) ->
    case M of
      #{name := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    case is_empty_string(TrF1) of
	      true -> Bin;
	      false ->
		  e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_AuthUserDeleteRequest(Msg, TrUserData) ->
    encode_msg_AuthUserDeleteRequest(Msg, <<>>, TrUserData).


encode_msg_AuthUserDeleteRequest(#{} = M, Bin,
				 TrUserData) ->
    case M of
      #{name := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    case is_empty_string(TrF1) of
	      true -> Bin;
	      false ->
		  e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_AuthUserChangePasswordRequest(Msg,
					 TrUserData) ->
    encode_msg_AuthUserChangePasswordRequest(Msg, <<>>,
					     TrUserData).


encode_msg_AuthUserChangePasswordRequest(#{} = M, Bin,
					 TrUserData) ->
    B1 = case M of
	   #{name := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case is_empty_string(TrF1) of
		   true -> Bin;
		   false ->
		       e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{password := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    case is_empty_string(TrF2) of
	      true -> B1;
	      false ->
		  e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_AuthUserGrantRoleRequest(Msg, TrUserData) ->
    encode_msg_AuthUserGrantRoleRequest(Msg, <<>>,
					TrUserData).


encode_msg_AuthUserGrantRoleRequest(#{} = M, Bin,
				    TrUserData) ->
    B1 = case M of
	   #{user := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case is_empty_string(TrF1) of
		   true -> Bin;
		   false ->
		       e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{role := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    case is_empty_string(TrF2) of
	      true -> B1;
	      false ->
		  e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_AuthUserRevokeRoleRequest(Msg, TrUserData) ->
    encode_msg_AuthUserRevokeRoleRequest(Msg, <<>>,
					 TrUserData).


encode_msg_AuthUserRevokeRoleRequest(#{} = M, Bin,
				     TrUserData) ->
    B1 = case M of
	   #{name := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case is_empty_string(TrF1) of
		   true -> Bin;
		   false ->
		       e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{role := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    case is_empty_string(TrF2) of
	      true -> B1;
	      false ->
		  e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_AuthRoleAddRequest(Msg, TrUserData) ->
    encode_msg_AuthRoleAddRequest(Msg, <<>>, TrUserData).


encode_msg_AuthRoleAddRequest(#{} = M, Bin,
			      TrUserData) ->
    case M of
      #{name := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    case is_empty_string(TrF1) of
	      true -> Bin;
	      false ->
		  e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_AuthRoleGetRequest(Msg, TrUserData) ->
    encode_msg_AuthRoleGetRequest(Msg, <<>>, TrUserData).


encode_msg_AuthRoleGetRequest(#{} = M, Bin,
			      TrUserData) ->
    case M of
      #{role := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    case is_empty_string(TrF1) of
	      true -> Bin;
	      false ->
		  e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_AuthUserListRequest(_Msg, _TrUserData) ->
    <<>>.

encode_msg_AuthRoleListRequest(_Msg, _TrUserData) ->
    <<>>.

encode_msg_AuthRoleDeleteRequest(Msg, TrUserData) ->
    encode_msg_AuthRoleDeleteRequest(Msg, <<>>, TrUserData).


encode_msg_AuthRoleDeleteRequest(#{} = M, Bin,
				 TrUserData) ->
    case M of
      #{role := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    case is_empty_string(TrF1) of
	      true -> Bin;
	      false ->
		  e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_AuthRoleGrantPermissionRequest(Msg,
					  TrUserData) ->
    encode_msg_AuthRoleGrantPermissionRequest(Msg, <<>>,
					      TrUserData).


encode_msg_AuthRoleGrantPermissionRequest(#{} = M, Bin,
					  TrUserData) ->
    B1 = case M of
	   #{name := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case is_empty_string(TrF1) of
		   true -> Bin;
		   false ->
		       e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{perm := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= undefined -> B1;
	       true ->
		   e_mfield_AuthRoleGrantPermissionRequest_perm(TrF2,
								<<B1/binary,
								  18>>,
								TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_AuthRoleRevokePermissionRequest(Msg,
					   TrUserData) ->
    encode_msg_AuthRoleRevokePermissionRequest(Msg, <<>>,
					       TrUserData).


encode_msg_AuthRoleRevokePermissionRequest(#{} = M, Bin,
					   TrUserData) ->
    B1 = case M of
	   #{role := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case is_empty_string(TrF1) of
		   true -> Bin;
		   false ->
		       e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{key := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 case iolist_size(TrF2) of
		   0 -> B1;
		   _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    case M of
      #{range_end := F3} ->
	  begin
	    TrF3 = id(F3, TrUserData),
	    case iolist_size(TrF3) of
	      0 -> B2;
	      _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
	    end
	  end;
      _ -> B2
    end.

encode_msg_AuthEnableResponse(Msg, TrUserData) ->
    encode_msg_AuthEnableResponse(Msg, <<>>, TrUserData).


encode_msg_AuthEnableResponse(#{} = M, Bin,
			      TrUserData) ->
    case M of
      #{header := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= undefined -> Bin;
	       true ->
		   e_mfield_AuthEnableResponse_header(TrF1,
						      <<Bin/binary, 10>>,
						      TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_AuthDisableResponse(Msg, TrUserData) ->
    encode_msg_AuthDisableResponse(Msg, <<>>, TrUserData).


encode_msg_AuthDisableResponse(#{} = M, Bin,
			       TrUserData) ->
    case M of
      #{header := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= undefined -> Bin;
	       true ->
		   e_mfield_AuthDisableResponse_header(TrF1,
						       <<Bin/binary, 10>>,
						       TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_AuthenticateResponse(Msg, TrUserData) ->
    encode_msg_AuthenticateResponse(Msg, <<>>, TrUserData).


encode_msg_AuthenticateResponse(#{} = M, Bin,
				TrUserData) ->
    B1 = case M of
	   #{header := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			e_mfield_AuthenticateResponse_header(TrF1,
							     <<Bin/binary, 10>>,
							     TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{token := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    case is_empty_string(TrF2) of
	      true -> B1;
	      false ->
		  e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_AuthUserAddResponse(Msg, TrUserData) ->
    encode_msg_AuthUserAddResponse(Msg, <<>>, TrUserData).


encode_msg_AuthUserAddResponse(#{} = M, Bin,
			       TrUserData) ->
    case M of
      #{header := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= undefined -> Bin;
	       true ->
		   e_mfield_AuthUserAddResponse_header(TrF1,
						       <<Bin/binary, 10>>,
						       TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_AuthUserGetResponse(Msg, TrUserData) ->
    encode_msg_AuthUserGetResponse(Msg, <<>>, TrUserData).


encode_msg_AuthUserGetResponse(#{} = M, Bin,
			       TrUserData) ->
    B1 = case M of
	   #{header := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			e_mfield_AuthUserGetResponse_header(TrF1,
							    <<Bin/binary, 10>>,
							    TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{roles := F2} ->
	  TrF2 = id(F2, TrUserData),
	  if TrF2 == [] -> B1;
	     true ->
		 e_field_AuthUserGetResponse_roles(TrF2, B1, TrUserData)
	  end;
      _ -> B1
    end.

encode_msg_AuthUserDeleteResponse(Msg, TrUserData) ->
    encode_msg_AuthUserDeleteResponse(Msg, <<>>,
				      TrUserData).


encode_msg_AuthUserDeleteResponse(#{} = M, Bin,
				  TrUserData) ->
    case M of
      #{header := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= undefined -> Bin;
	       true ->
		   e_mfield_AuthUserDeleteResponse_header(TrF1,
							  <<Bin/binary, 10>>,
							  TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_AuthUserChangePasswordResponse(Msg,
					  TrUserData) ->
    encode_msg_AuthUserChangePasswordResponse(Msg, <<>>,
					      TrUserData).


encode_msg_AuthUserChangePasswordResponse(#{} = M, Bin,
					  TrUserData) ->
    case M of
      #{header := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= undefined -> Bin;
	       true ->
		   e_mfield_AuthUserChangePasswordResponse_header(TrF1,
								  <<Bin/binary,
								    10>>,
								  TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_AuthUserGrantRoleResponse(Msg, TrUserData) ->
    encode_msg_AuthUserGrantRoleResponse(Msg, <<>>,
					 TrUserData).


encode_msg_AuthUserGrantRoleResponse(#{} = M, Bin,
				     TrUserData) ->
    case M of
      #{header := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= undefined -> Bin;
	       true ->
		   e_mfield_AuthUserGrantRoleResponse_header(TrF1,
							     <<Bin/binary, 10>>,
							     TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_AuthUserRevokeRoleResponse(Msg,
				      TrUserData) ->
    encode_msg_AuthUserRevokeRoleResponse(Msg, <<>>,
					  TrUserData).


encode_msg_AuthUserRevokeRoleResponse(#{} = M, Bin,
				      TrUserData) ->
    case M of
      #{header := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= undefined -> Bin;
	       true ->
		   e_mfield_AuthUserRevokeRoleResponse_header(TrF1,
							      <<Bin/binary,
								10>>,
							      TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_AuthRoleAddResponse(Msg, TrUserData) ->
    encode_msg_AuthRoleAddResponse(Msg, <<>>, TrUserData).


encode_msg_AuthRoleAddResponse(#{} = M, Bin,
			       TrUserData) ->
    case M of
      #{header := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= undefined -> Bin;
	       true ->
		   e_mfield_AuthRoleAddResponse_header(TrF1,
						       <<Bin/binary, 10>>,
						       TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_AuthRoleGetResponse(Msg, TrUserData) ->
    encode_msg_AuthRoleGetResponse(Msg, <<>>, TrUserData).


encode_msg_AuthRoleGetResponse(#{} = M, Bin,
			       TrUserData) ->
    B1 = case M of
	   #{header := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			e_mfield_AuthRoleGetResponse_header(TrF1,
							    <<Bin/binary, 10>>,
							    TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{perm := F2} ->
	  TrF2 = id(F2, TrUserData),
	  if TrF2 == [] -> B1;
	     true ->
		 e_field_AuthRoleGetResponse_perm(TrF2, B1, TrUserData)
	  end;
      _ -> B1
    end.

encode_msg_AuthRoleListResponse(Msg, TrUserData) ->
    encode_msg_AuthRoleListResponse(Msg, <<>>, TrUserData).


encode_msg_AuthRoleListResponse(#{} = M, Bin,
				TrUserData) ->
    B1 = case M of
	   #{header := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			e_mfield_AuthRoleListResponse_header(TrF1,
							     <<Bin/binary, 10>>,
							     TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{roles := F2} ->
	  TrF2 = id(F2, TrUserData),
	  if TrF2 == [] -> B1;
	     true ->
		 e_field_AuthRoleListResponse_roles(TrF2, B1, TrUserData)
	  end;
      _ -> B1
    end.

encode_msg_AuthUserListResponse(Msg, TrUserData) ->
    encode_msg_AuthUserListResponse(Msg, <<>>, TrUserData).


encode_msg_AuthUserListResponse(#{} = M, Bin,
				TrUserData) ->
    B1 = case M of
	   #{header := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			e_mfield_AuthUserListResponse_header(TrF1,
							     <<Bin/binary, 10>>,
							     TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{users := F2} ->
	  TrF2 = id(F2, TrUserData),
	  if TrF2 == [] -> B1;
	     true ->
		 e_field_AuthUserListResponse_users(TrF2, B1, TrUserData)
	  end;
      _ -> B1
    end.

encode_msg_AuthRoleDeleteResponse(Msg, TrUserData) ->
    encode_msg_AuthRoleDeleteResponse(Msg, <<>>,
				      TrUserData).


encode_msg_AuthRoleDeleteResponse(#{} = M, Bin,
				  TrUserData) ->
    case M of
      #{header := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= undefined -> Bin;
	       true ->
		   e_mfield_AuthRoleDeleteResponse_header(TrF1,
							  <<Bin/binary, 10>>,
							  TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_AuthRoleGrantPermissionResponse(Msg,
					   TrUserData) ->
    encode_msg_AuthRoleGrantPermissionResponse(Msg, <<>>,
					       TrUserData).


encode_msg_AuthRoleGrantPermissionResponse(#{} = M, Bin,
					   TrUserData) ->
    case M of
      #{header := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= undefined -> Bin;
	       true ->
		   e_mfield_AuthRoleGrantPermissionResponse_header(TrF1,
								   <<Bin/binary,
								     10>>,
								   TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_AuthRoleRevokePermissionResponse(Msg,
					    TrUserData) ->
    encode_msg_AuthRoleRevokePermissionResponse(Msg, <<>>,
						TrUserData).


encode_msg_AuthRoleRevokePermissionResponse(#{} = M,
					    Bin, TrUserData) ->
    case M of
      #{header := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= undefined -> Bin;
	       true ->
		   e_mfield_AuthRoleRevokePermissionResponse_header(TrF1,
								    <<Bin/binary,
								      10>>,
								    TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_KeyValue(Msg, TrUserData) ->
    encode_msg_KeyValue(Msg, <<>>, TrUserData).


encode_msg_KeyValue(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{key := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case iolist_size(TrF1) of
		   0 -> Bin;
		   _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{create_revision := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= 0 -> B1;
		    true ->
			e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{mod_revision := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 if TrF3 =:= 0 -> B2;
		    true ->
			e_type_int64(TrF3, <<B2/binary, 24>>, TrUserData)
		 end
	       end;
	   _ -> B2
	 end,
    B4 = case M of
	   #{version := F4} ->
	       begin
		 TrF4 = id(F4, TrUserData),
		 if TrF4 =:= 0 -> B3;
		    true ->
			e_type_int64(TrF4, <<B3/binary, 32>>, TrUserData)
		 end
	       end;
	   _ -> B3
	 end,
    B5 = case M of
	   #{value := F5} ->
	       begin
		 TrF5 = id(F5, TrUserData),
		 case iolist_size(TrF5) of
		   0 -> B4;
		   _ -> e_type_bytes(TrF5, <<B4/binary, 42>>, TrUserData)
		 end
	       end;
	   _ -> B4
	 end,
    case M of
      #{lease := F6} ->
	  begin
	    TrF6 = id(F6, TrUserData),
	    if TrF6 =:= 0 -> B5;
	       true ->
		   e_type_int64(TrF6, <<B5/binary, 48>>, TrUserData)
	    end
	  end;
      _ -> B5
    end.

encode_msg_Event(Msg, TrUserData) ->
    encode_msg_Event(Msg, <<>>, TrUserData).


encode_msg_Event(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{type := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 'PUT'; TrF1 =:= 0 -> Bin;
		    true ->
			'e_enum_Event.EventType'(TrF1, <<Bin/binary, 8>>,
						 'MaybeTrUserData')
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{kv := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= undefined -> B1;
		    true ->
			e_mfield_Event_kv(TrF2, <<B1/binary, 18>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    case M of
      #{prev_kv := F3} ->
	  begin
	    TrF3 = id(F3, TrUserData),
	    if TrF3 =:= undefined -> B2;
	       true ->
		   e_mfield_Event_prev_kv(TrF3, <<B2/binary, 26>>,
					  TrUserData)
	    end
	  end;
      _ -> B2
    end.

encode_msg_User(Msg, TrUserData) ->
    encode_msg_User(Msg, <<>>, TrUserData).


encode_msg_User(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{name := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case iolist_size(TrF1) of
		   0 -> Bin;
		   _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{password := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 case iolist_size(TrF2) of
		   0 -> B1;
		   _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    case M of
      #{roles := F3} ->
	  TrF3 = id(F3, TrUserData),
	  if TrF3 == [] -> B2;
	     true -> e_field_User_roles(TrF3, B2, TrUserData)
	  end;
      _ -> B2
    end.

encode_msg_Permission(Msg, TrUserData) ->
    encode_msg_Permission(Msg, <<>>, TrUserData).


encode_msg_Permission(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{permType := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 'READ'; TrF1 =:= 0 -> Bin;
		    true ->
			'e_enum_Permission.Type'(TrF1, <<Bin/binary, 8>>,
						 'MaybeTrUserData')
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{key := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 case iolist_size(TrF2) of
		   0 -> B1;
		   _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    case M of
      #{range_end := F3} ->
	  begin
	    TrF3 = id(F3, TrUserData),
	    case iolist_size(TrF3) of
	      0 -> B2;
	      _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
	    end
	  end;
      _ -> B2
    end.

encode_msg_Role(Msg, TrUserData) ->
    encode_msg_Role(Msg, <<>>, TrUserData).


encode_msg_Role(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{name := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case iolist_size(TrF1) of
		   0 -> Bin;
		   _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{keyPermission := F2} ->
	  TrF2 = id(F2, TrUserData),
	  if TrF2 == [] -> B1;
	     true -> e_field_Role_keyPermission(TrF2, B1, TrUserData)
	  end;
      _ -> B1
    end.

e_mfield_RangeResponse_header(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_ResponseHeader(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_RangeResponse_kvs(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_KeyValue(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_RangeResponse_kvs([Elem | Rest], Bin,
			  TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_RangeResponse_kvs(id(Elem, TrUserData),
				      Bin2, TrUserData),
    e_field_RangeResponse_kvs(Rest, Bin3, TrUserData);
e_field_RangeResponse_kvs([], Bin, _TrUserData) -> Bin.

e_mfield_PutResponse_header(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_ResponseHeader(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_PutResponse_prev_kv(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_KeyValue(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_DeleteRangeResponse_header(Msg, Bin,
				    TrUserData) ->
    SubBin = encode_msg_ResponseHeader(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_DeleteRangeResponse_prev_kvs(Msg, Bin,
				      TrUserData) ->
    SubBin = encode_msg_KeyValue(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_DeleteRangeResponse_prev_kvs([Elem | Rest], Bin,
				     TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_DeleteRangeResponse_prev_kvs(id(Elem,
						    TrUserData),
						 Bin2, TrUserData),
    e_field_DeleteRangeResponse_prev_kvs(Rest, Bin3,
					 TrUserData);
e_field_DeleteRangeResponse_prev_kvs([], Bin,
				     _TrUserData) ->
    Bin.

e_mfield_RequestOp_request_range(Msg, Bin,
				 TrUserData) ->
    SubBin = encode_msg_RangeRequest(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_RequestOp_request_put(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_PutRequest(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_RequestOp_request_delete_range(Msg, Bin,
					TrUserData) ->
    SubBin = encode_msg_DeleteRangeRequest(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_RequestOp_request_txn(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_TxnRequest(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ResponseOp_response_range(Msg, Bin,
				   TrUserData) ->
    SubBin = encode_msg_RangeResponse(Msg, <<>>,
				      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ResponseOp_response_put(Msg, Bin,
				 TrUserData) ->
    SubBin = encode_msg_PutResponse(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ResponseOp_response_delete_range(Msg, Bin,
					  TrUserData) ->
    SubBin = encode_msg_DeleteRangeResponse(Msg, <<>>,
					    TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ResponseOp_response_txn(Msg, Bin,
				 TrUserData) ->
    SubBin = encode_msg_TxnResponse(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_TxnRequest_compare(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Compare(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_TxnRequest_compare([Elem | Rest], Bin,
			   TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_TxnRequest_compare(id(Elem, TrUserData),
				       Bin2, TrUserData),
    e_field_TxnRequest_compare(Rest, Bin3, TrUserData);
e_field_TxnRequest_compare([], Bin, _TrUserData) -> Bin.

e_mfield_TxnRequest_success(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_RequestOp(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_TxnRequest_success([Elem | Rest], Bin,
			   TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_TxnRequest_success(id(Elem, TrUserData),
				       Bin2, TrUserData),
    e_field_TxnRequest_success(Rest, Bin3, TrUserData);
e_field_TxnRequest_success([], Bin, _TrUserData) -> Bin.

e_mfield_TxnRequest_failure(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_RequestOp(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_TxnRequest_failure([Elem | Rest], Bin,
			   TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_TxnRequest_failure(id(Elem, TrUserData),
				       Bin2, TrUserData),
    e_field_TxnRequest_failure(Rest, Bin3, TrUserData);
e_field_TxnRequest_failure([], Bin, _TrUserData) -> Bin.

e_mfield_TxnResponse_header(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_ResponseHeader(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_TxnResponse_responses(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_ResponseOp(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_TxnResponse_responses([Elem | Rest], Bin,
			      TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_TxnResponse_responses(id(Elem,
					     TrUserData),
					  Bin2, TrUserData),
    e_field_TxnResponse_responses(Rest, Bin3, TrUserData);
e_field_TxnResponse_responses([], Bin, _TrUserData) ->
    Bin.

e_mfield_CompactionResponse_header(Msg, Bin,
				   TrUserData) ->
    SubBin = encode_msg_ResponseHeader(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_HashKVResponse_header(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_ResponseHeader(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_HashResponse_header(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_ResponseHeader(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_SnapshotResponse_header(Msg, Bin,
				 TrUserData) ->
    SubBin = encode_msg_ResponseHeader(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_WatchRequest_create_request(Msg, Bin,
				     TrUserData) ->
    SubBin = encode_msg_WatchCreateRequest(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_WatchRequest_cancel_request(Msg, Bin,
				     TrUserData) ->
    SubBin = encode_msg_WatchCancelRequest(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_WatchRequest_progress_request(_Msg, Bin,
				       _TrUserData) ->
    <<Bin/binary, 0>>.

e_field_WatchCreateRequest_filters(Elems, Bin,
				   TrUserData)
    when Elems =/= [] ->
    SubBin = e_pfield_WatchCreateRequest_filters(Elems,
						 <<>>, TrUserData),
    Bin2 = <<Bin/binary, 42>>,
    Bin3 = e_varint(byte_size(SubBin), Bin2),
    <<Bin3/binary, SubBin/binary>>;
e_field_WatchCreateRequest_filters([], Bin,
				   _TrUserData) ->
    Bin.

e_pfield_WatchCreateRequest_filters([Value | Rest], Bin,
				    TrUserData) ->
    Bin2 = 'e_enum_WatchCreateRequest.FilterType'(id(Value,
						     TrUserData),
						  Bin, TrUserData),
    e_pfield_WatchCreateRequest_filters(Rest, Bin2,
					TrUserData);
e_pfield_WatchCreateRequest_filters([], Bin,
				    _TrUserData) ->
    Bin.

e_mfield_WatchResponse_header(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_ResponseHeader(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_WatchResponse_events(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Event(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_WatchResponse_events([Elem | Rest], Bin,
			     TrUserData) ->
    Bin2 = <<Bin/binary, 90>>,
    Bin3 = e_mfield_WatchResponse_events(id(Elem,
					    TrUserData),
					 Bin2, TrUserData),
    e_field_WatchResponse_events(Rest, Bin3, TrUserData);
e_field_WatchResponse_events([], Bin, _TrUserData) ->
    Bin.

e_mfield_LeaseGrantResponse_header(Msg, Bin,
				   TrUserData) ->
    SubBin = encode_msg_ResponseHeader(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_LeaseRevokeResponse_header(Msg, Bin,
				    TrUserData) ->
    SubBin = encode_msg_ResponseHeader(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_LeaseCheckpointRequest_checkpoints(Msg, Bin,
					    TrUserData) ->
    SubBin = encode_msg_LeaseCheckpoint(Msg, <<>>,
					TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_LeaseCheckpointRequest_checkpoints([Elem
					    | Rest],
					   Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	e_mfield_LeaseCheckpointRequest_checkpoints(id(Elem,
						       TrUserData),
						    Bin2, TrUserData),
    e_field_LeaseCheckpointRequest_checkpoints(Rest, Bin3,
					       TrUserData);
e_field_LeaseCheckpointRequest_checkpoints([], Bin,
					   _TrUserData) ->
    Bin.

e_mfield_LeaseCheckpointResponse_header(Msg, Bin,
					TrUserData) ->
    SubBin = encode_msg_ResponseHeader(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_LeaseKeepAliveResponse_header(Msg, Bin,
				       TrUserData) ->
    SubBin = encode_msg_ResponseHeader(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_LeaseTimeToLiveResponse_header(Msg, Bin,
					TrUserData) ->
    SubBin = encode_msg_ResponseHeader(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_LeaseTimeToLiveResponse_keys([Elem | Rest], Bin,
				     TrUserData) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 = e_type_bytes(id(Elem, TrUserData), Bin2,
			TrUserData),
    e_field_LeaseTimeToLiveResponse_keys(Rest, Bin3,
					 TrUserData);
e_field_LeaseTimeToLiveResponse_keys([], Bin,
				     _TrUserData) ->
    Bin.

e_mfield_LeaseLeasesResponse_header(Msg, Bin,
				    TrUserData) ->
    SubBin = encode_msg_ResponseHeader(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_LeaseLeasesResponse_leases(Msg, Bin,
				    TrUserData) ->
    SubBin = encode_msg_LeaseStatus(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_LeaseLeasesResponse_leases([Elem | Rest], Bin,
				   TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_LeaseLeasesResponse_leases(id(Elem,
						  TrUserData),
					       Bin2, TrUserData),
    e_field_LeaseLeasesResponse_leases(Rest, Bin3,
				       TrUserData);
e_field_LeaseLeasesResponse_leases([], Bin,
				   _TrUserData) ->
    Bin.

e_field_Member_peerURLs([Elem | Rest], Bin,
			TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
			 TrUserData),
    e_field_Member_peerURLs(Rest, Bin3, TrUserData);
e_field_Member_peerURLs([], Bin, _TrUserData) -> Bin.

e_field_Member_clientURLs([Elem | Rest], Bin,
			  TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
			 TrUserData),
    e_field_Member_clientURLs(Rest, Bin3, TrUserData);
e_field_Member_clientURLs([], Bin, _TrUserData) -> Bin.

e_field_MemberAddRequest_peerURLs([Elem | Rest], Bin,
				  TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
			 TrUserData),
    e_field_MemberAddRequest_peerURLs(Rest, Bin3,
				      TrUserData);
e_field_MemberAddRequest_peerURLs([], Bin,
				  _TrUserData) ->
    Bin.

e_mfield_MemberAddResponse_header(Msg, Bin,
				  TrUserData) ->
    SubBin = encode_msg_ResponseHeader(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_MemberAddResponse_member(Msg, Bin,
				  TrUserData) ->
    SubBin = encode_msg_Member(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_MemberAddResponse_members(Msg, Bin,
				   TrUserData) ->
    SubBin = encode_msg_Member(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_MemberAddResponse_members([Elem | Rest], Bin,
				  TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_MemberAddResponse_members(id(Elem,
						 TrUserData),
					      Bin2, TrUserData),
    e_field_MemberAddResponse_members(Rest, Bin3,
				      TrUserData);
e_field_MemberAddResponse_members([], Bin,
				  _TrUserData) ->
    Bin.

e_mfield_MemberRemoveResponse_header(Msg, Bin,
				     TrUserData) ->
    SubBin = encode_msg_ResponseHeader(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_MemberRemoveResponse_members(Msg, Bin,
				      TrUserData) ->
    SubBin = encode_msg_Member(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_MemberRemoveResponse_members([Elem | Rest], Bin,
				     TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_MemberRemoveResponse_members(id(Elem,
						    TrUserData),
						 Bin2, TrUserData),
    e_field_MemberRemoveResponse_members(Rest, Bin3,
					 TrUserData);
e_field_MemberRemoveResponse_members([], Bin,
				     _TrUserData) ->
    Bin.

e_field_MemberUpdateRequest_peerURLs([Elem | Rest], Bin,
				     TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
			 TrUserData),
    e_field_MemberUpdateRequest_peerURLs(Rest, Bin3,
					 TrUserData);
e_field_MemberUpdateRequest_peerURLs([], Bin,
				     _TrUserData) ->
    Bin.

e_mfield_MemberUpdateResponse_header(Msg, Bin,
				     TrUserData) ->
    SubBin = encode_msg_ResponseHeader(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_MemberUpdateResponse_members(Msg, Bin,
				      TrUserData) ->
    SubBin = encode_msg_Member(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_MemberUpdateResponse_members([Elem | Rest], Bin,
				     TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_MemberUpdateResponse_members(id(Elem,
						    TrUserData),
						 Bin2, TrUserData),
    e_field_MemberUpdateResponse_members(Rest, Bin3,
					 TrUserData);
e_field_MemberUpdateResponse_members([], Bin,
				     _TrUserData) ->
    Bin.

e_mfield_MemberListResponse_header(Msg, Bin,
				   TrUserData) ->
    SubBin = encode_msg_ResponseHeader(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_MemberListResponse_members(Msg, Bin,
				    TrUserData) ->
    SubBin = encode_msg_Member(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_MemberListResponse_members([Elem | Rest], Bin,
				   TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_MemberListResponse_members(id(Elem,
						  TrUserData),
					       Bin2, TrUserData),
    e_field_MemberListResponse_members(Rest, Bin3,
				       TrUserData);
e_field_MemberListResponse_members([], Bin,
				   _TrUserData) ->
    Bin.

e_mfield_DefragmentResponse_header(Msg, Bin,
				   TrUserData) ->
    SubBin = encode_msg_ResponseHeader(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_MoveLeaderResponse_header(Msg, Bin,
				   TrUserData) ->
    SubBin = encode_msg_ResponseHeader(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_AlarmResponse_header(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_ResponseHeader(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_AlarmResponse_alarms(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_AlarmMember(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_AlarmResponse_alarms([Elem | Rest], Bin,
			     TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_AlarmResponse_alarms(id(Elem,
					    TrUserData),
					 Bin2, TrUserData),
    e_field_AlarmResponse_alarms(Rest, Bin3, TrUserData);
e_field_AlarmResponse_alarms([], Bin, _TrUserData) ->
    Bin.

e_mfield_StatusResponse_header(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_ResponseHeader(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_StatusResponse_errors([Elem | Rest], Bin,
			      TrUserData) ->
    Bin2 = <<Bin/binary, 66>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
			 TrUserData),
    e_field_StatusResponse_errors(Rest, Bin3, TrUserData);
e_field_StatusResponse_errors([], Bin, _TrUserData) ->
    Bin.

e_mfield_AuthRoleGrantPermissionRequest_perm(Msg, Bin,
					     TrUserData) ->
    SubBin = encode_msg_Permission(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_AuthEnableResponse_header(Msg, Bin,
				   TrUserData) ->
    SubBin = encode_msg_ResponseHeader(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_AuthDisableResponse_header(Msg, Bin,
				    TrUserData) ->
    SubBin = encode_msg_ResponseHeader(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_AuthenticateResponse_header(Msg, Bin,
				     TrUserData) ->
    SubBin = encode_msg_ResponseHeader(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_AuthUserAddResponse_header(Msg, Bin,
				    TrUserData) ->
    SubBin = encode_msg_ResponseHeader(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_AuthUserGetResponse_header(Msg, Bin,
				    TrUserData) ->
    SubBin = encode_msg_ResponseHeader(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_AuthUserGetResponse_roles([Elem | Rest], Bin,
				  TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
			 TrUserData),
    e_field_AuthUserGetResponse_roles(Rest, Bin3,
				      TrUserData);
e_field_AuthUserGetResponse_roles([], Bin,
				  _TrUserData) ->
    Bin.

e_mfield_AuthUserDeleteResponse_header(Msg, Bin,
				       TrUserData) ->
    SubBin = encode_msg_ResponseHeader(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_AuthUserChangePasswordResponse_header(Msg, Bin,
					       TrUserData) ->
    SubBin = encode_msg_ResponseHeader(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_AuthUserGrantRoleResponse_header(Msg, Bin,
					  TrUserData) ->
    SubBin = encode_msg_ResponseHeader(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_AuthUserRevokeRoleResponse_header(Msg, Bin,
					   TrUserData) ->
    SubBin = encode_msg_ResponseHeader(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_AuthRoleAddResponse_header(Msg, Bin,
				    TrUserData) ->
    SubBin = encode_msg_ResponseHeader(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_AuthRoleGetResponse_header(Msg, Bin,
				    TrUserData) ->
    SubBin = encode_msg_ResponseHeader(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_AuthRoleGetResponse_perm(Msg, Bin,
				  TrUserData) ->
    SubBin = encode_msg_Permission(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_AuthRoleGetResponse_perm([Elem | Rest], Bin,
				 TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_AuthRoleGetResponse_perm(id(Elem,
						TrUserData),
					     Bin2, TrUserData),
    e_field_AuthRoleGetResponse_perm(Rest, Bin3,
				     TrUserData);
e_field_AuthRoleGetResponse_perm([], Bin,
				 _TrUserData) ->
    Bin.

e_mfield_AuthRoleListResponse_header(Msg, Bin,
				     TrUserData) ->
    SubBin = encode_msg_ResponseHeader(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_AuthRoleListResponse_roles([Elem | Rest], Bin,
				   TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
			 TrUserData),
    e_field_AuthRoleListResponse_roles(Rest, Bin3,
				       TrUserData);
e_field_AuthRoleListResponse_roles([], Bin,
				   _TrUserData) ->
    Bin.

e_mfield_AuthUserListResponse_header(Msg, Bin,
				     TrUserData) ->
    SubBin = encode_msg_ResponseHeader(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_AuthUserListResponse_users([Elem | Rest], Bin,
				   TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
			 TrUserData),
    e_field_AuthUserListResponse_users(Rest, Bin3,
				       TrUserData);
e_field_AuthUserListResponse_users([], Bin,
				   _TrUserData) ->
    Bin.

e_mfield_AuthRoleDeleteResponse_header(Msg, Bin,
				       TrUserData) ->
    SubBin = encode_msg_ResponseHeader(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_AuthRoleGrantPermissionResponse_header(Msg,
						Bin, TrUserData) ->
    SubBin = encode_msg_ResponseHeader(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_AuthRoleRevokePermissionResponse_header(Msg,
						 Bin, TrUserData) ->
    SubBin = encode_msg_ResponseHeader(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Event_kv(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_KeyValue(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Event_prev_kv(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_KeyValue(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_User_roles([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
			 TrUserData),
    e_field_User_roles(Rest, Bin3, TrUserData);
e_field_User_roles([], Bin, _TrUserData) -> Bin.

e_mfield_Role_keyPermission(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Permission(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Role_keyPermission([Elem | Rest], Bin,
			   TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_Role_keyPermission(id(Elem, TrUserData),
				       Bin2, TrUserData),
    e_field_Role_keyPermission(Rest, Bin3, TrUserData);
e_field_Role_keyPermission([], Bin, _TrUserData) -> Bin.

'e_enum_RangeRequest.SortOrder'('NONE', Bin,
				_TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_RangeRequest.SortOrder'('ASCEND', Bin,
				_TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_RangeRequest.SortOrder'('DESCEND', Bin,
				_TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_RangeRequest.SortOrder'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

'e_enum_RangeRequest.SortTarget'('KEY', Bin,
				 _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_RangeRequest.SortTarget'('VERSION', Bin,
				 _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_RangeRequest.SortTarget'('CREATE', Bin,
				 _TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_RangeRequest.SortTarget'('MOD', Bin,
				 _TrUserData) ->
    <<Bin/binary, 3>>;
'e_enum_RangeRequest.SortTarget'('VALUE', Bin,
				 _TrUserData) ->
    <<Bin/binary, 4>>;
'e_enum_RangeRequest.SortTarget'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

'e_enum_Compare.CompareResult'('EQUAL', Bin,
			       _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_Compare.CompareResult'('GREATER', Bin,
			       _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_Compare.CompareResult'('LESS', Bin,
			       _TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_Compare.CompareResult'('NOT_EQUAL', Bin,
			       _TrUserData) ->
    <<Bin/binary, 3>>;
'e_enum_Compare.CompareResult'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

'e_enum_Compare.CompareTarget'('VERSION', Bin,
			       _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_Compare.CompareTarget'('CREATE', Bin,
			       _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_Compare.CompareTarget'('MOD', Bin,
			       _TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_Compare.CompareTarget'('VALUE', Bin,
			       _TrUserData) ->
    <<Bin/binary, 3>>;
'e_enum_Compare.CompareTarget'('LEASE', Bin,
			       _TrUserData) ->
    <<Bin/binary, 4>>;
'e_enum_Compare.CompareTarget'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

'e_enum_WatchCreateRequest.FilterType'('NOPUT', Bin,
				       _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_WatchCreateRequest.FilterType'('NODELETE', Bin,
				       _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_WatchCreateRequest.FilterType'(V, Bin,
				       _TrUserData) ->
    e_varint(V, Bin).

e_enum_AlarmType('NONE', Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_enum_AlarmType('NOSPACE', Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_enum_AlarmType('CORRUPT', Bin, _TrUserData) ->
    <<Bin/binary, 2>>;
e_enum_AlarmType(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

'e_enum_AlarmRequest.AlarmAction'('GET', Bin,
				  _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_AlarmRequest.AlarmAction'('ACTIVATE', Bin,
				  _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_AlarmRequest.AlarmAction'('DEACTIVATE', Bin,
				  _TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_AlarmRequest.AlarmAction'(V, Bin,
				  _TrUserData) ->
    e_varint(V, Bin).

'e_enum_Event.EventType'('PUT', Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_Event.EventType'('DELETE', Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_Event.EventType'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

'e_enum_Permission.Type'('READ', Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_Permission.Type'('WRITE', Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_Permission.Type'('READWRITE', Bin,
			 _TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_Permission.Type'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) ->
    not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
      true -> true;
      false -> string_has_chars(T)
    end;
string_has_chars(B)
    when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('ResponseHeader', Bin, TrUserData) ->
    id(decode_msg_ResponseHeader(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('RangeRequest', Bin, TrUserData) ->
    id(decode_msg_RangeRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('RangeResponse', Bin, TrUserData) ->
    id(decode_msg_RangeResponse(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('PutRequest', Bin, TrUserData) ->
    id(decode_msg_PutRequest(Bin, TrUserData), TrUserData);
decode_msg_2_doit('PutResponse', Bin, TrUserData) ->
    id(decode_msg_PutResponse(Bin, TrUserData), TrUserData);
decode_msg_2_doit('DeleteRangeRequest', Bin,
		  TrUserData) ->
    id(decode_msg_DeleteRangeRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('DeleteRangeResponse', Bin,
		  TrUserData) ->
    id(decode_msg_DeleteRangeResponse(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('RequestOp', Bin, TrUserData) ->
    id(decode_msg_RequestOp(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ResponseOp', Bin, TrUserData) ->
    id(decode_msg_ResponseOp(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Compare', Bin, TrUserData) ->
    id(decode_msg_Compare(Bin, TrUserData), TrUserData);
decode_msg_2_doit('TxnRequest', Bin, TrUserData) ->
    id(decode_msg_TxnRequest(Bin, TrUserData), TrUserData);
decode_msg_2_doit('TxnResponse', Bin, TrUserData) ->
    id(decode_msg_TxnResponse(Bin, TrUserData), TrUserData);
decode_msg_2_doit('CompactionRequest', Bin,
		  TrUserData) ->
    id(decode_msg_CompactionRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('CompactionResponse', Bin,
		  TrUserData) ->
    id(decode_msg_CompactionResponse(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('HashRequest', Bin, TrUserData) ->
    id(decode_msg_HashRequest(Bin, TrUserData), TrUserData);
decode_msg_2_doit('HashKVRequest', Bin, TrUserData) ->
    id(decode_msg_HashKVRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('HashKVResponse', Bin, TrUserData) ->
    id(decode_msg_HashKVResponse(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('HashResponse', Bin, TrUserData) ->
    id(decode_msg_HashResponse(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('SnapshotRequest', Bin, TrUserData) ->
    id(decode_msg_SnapshotRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('SnapshotResponse', Bin,
		  TrUserData) ->
    id(decode_msg_SnapshotResponse(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('WatchRequest', Bin, TrUserData) ->
    id(decode_msg_WatchRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('WatchCreateRequest', Bin,
		  TrUserData) ->
    id(decode_msg_WatchCreateRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('WatchCancelRequest', Bin,
		  TrUserData) ->
    id(decode_msg_WatchCancelRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('WatchProgressRequest', Bin,
		  TrUserData) ->
    id(decode_msg_WatchProgressRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('WatchResponse', Bin, TrUserData) ->
    id(decode_msg_WatchResponse(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('LeaseGrantRequest', Bin,
		  TrUserData) ->
    id(decode_msg_LeaseGrantRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('LeaseGrantResponse', Bin,
		  TrUserData) ->
    id(decode_msg_LeaseGrantResponse(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('LeaseRevokeRequest', Bin,
		  TrUserData) ->
    id(decode_msg_LeaseRevokeRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('LeaseRevokeResponse', Bin,
		  TrUserData) ->
    id(decode_msg_LeaseRevokeResponse(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('LeaseCheckpoint', Bin, TrUserData) ->
    id(decode_msg_LeaseCheckpoint(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('LeaseCheckpointRequest', Bin,
		  TrUserData) ->
    id(decode_msg_LeaseCheckpointRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('LeaseCheckpointResponse', Bin,
		  TrUserData) ->
    id(decode_msg_LeaseCheckpointResponse(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('LeaseKeepAliveRequest', Bin,
		  TrUserData) ->
    id(decode_msg_LeaseKeepAliveRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('LeaseKeepAliveResponse', Bin,
		  TrUserData) ->
    id(decode_msg_LeaseKeepAliveResponse(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('LeaseTimeToLiveRequest', Bin,
		  TrUserData) ->
    id(decode_msg_LeaseTimeToLiveRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('LeaseTimeToLiveResponse', Bin,
		  TrUserData) ->
    id(decode_msg_LeaseTimeToLiveResponse(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('LeaseLeasesRequest', Bin,
		  TrUserData) ->
    id(decode_msg_LeaseLeasesRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('LeaseStatus', Bin, TrUserData) ->
    id(decode_msg_LeaseStatus(Bin, TrUserData), TrUserData);
decode_msg_2_doit('LeaseLeasesResponse', Bin,
		  TrUserData) ->
    id(decode_msg_LeaseLeasesResponse(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('Member', Bin, TrUserData) ->
    id(decode_msg_Member(Bin, TrUserData), TrUserData);
decode_msg_2_doit('MemberAddRequest', Bin,
		  TrUserData) ->
    id(decode_msg_MemberAddRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('MemberAddResponse', Bin,
		  TrUserData) ->
    id(decode_msg_MemberAddResponse(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('MemberRemoveRequest', Bin,
		  TrUserData) ->
    id(decode_msg_MemberRemoveRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('MemberRemoveResponse', Bin,
		  TrUserData) ->
    id(decode_msg_MemberRemoveResponse(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('MemberUpdateRequest', Bin,
		  TrUserData) ->
    id(decode_msg_MemberUpdateRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('MemberUpdateResponse', Bin,
		  TrUserData) ->
    id(decode_msg_MemberUpdateResponse(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('MemberListRequest', Bin,
		  TrUserData) ->
    id(decode_msg_MemberListRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('MemberListResponse', Bin,
		  TrUserData) ->
    id(decode_msg_MemberListResponse(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('DefragmentRequest', Bin,
		  TrUserData) ->
    id(decode_msg_DefragmentRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('DefragmentResponse', Bin,
		  TrUserData) ->
    id(decode_msg_DefragmentResponse(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('MoveLeaderRequest', Bin,
		  TrUserData) ->
    id(decode_msg_MoveLeaderRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('MoveLeaderResponse', Bin,
		  TrUserData) ->
    id(decode_msg_MoveLeaderResponse(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('AlarmRequest', Bin, TrUserData) ->
    id(decode_msg_AlarmRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('AlarmMember', Bin, TrUserData) ->
    id(decode_msg_AlarmMember(Bin, TrUserData), TrUserData);
decode_msg_2_doit('AlarmResponse', Bin, TrUserData) ->
    id(decode_msg_AlarmResponse(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('StatusRequest', Bin, TrUserData) ->
    id(decode_msg_StatusRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('StatusResponse', Bin, TrUserData) ->
    id(decode_msg_StatusResponse(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('AuthEnableRequest', Bin,
		  TrUserData) ->
    id(decode_msg_AuthEnableRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('AuthDisableRequest', Bin,
		  TrUserData) ->
    id(decode_msg_AuthDisableRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('AuthenticateRequest', Bin,
		  TrUserData) ->
    id(decode_msg_AuthenticateRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('AuthUserAddRequest', Bin,
		  TrUserData) ->
    id(decode_msg_AuthUserAddRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('AuthUserGetRequest', Bin,
		  TrUserData) ->
    id(decode_msg_AuthUserGetRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('AuthUserDeleteRequest', Bin,
		  TrUserData) ->
    id(decode_msg_AuthUserDeleteRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('AuthUserChangePasswordRequest', Bin,
		  TrUserData) ->
    id(decode_msg_AuthUserChangePasswordRequest(Bin,
						TrUserData),
       TrUserData);
decode_msg_2_doit('AuthUserGrantRoleRequest', Bin,
		  TrUserData) ->
    id(decode_msg_AuthUserGrantRoleRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('AuthUserRevokeRoleRequest', Bin,
		  TrUserData) ->
    id(decode_msg_AuthUserRevokeRoleRequest(Bin,
					    TrUserData),
       TrUserData);
decode_msg_2_doit('AuthRoleAddRequest', Bin,
		  TrUserData) ->
    id(decode_msg_AuthRoleAddRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('AuthRoleGetRequest', Bin,
		  TrUserData) ->
    id(decode_msg_AuthRoleGetRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('AuthUserListRequest', Bin,
		  TrUserData) ->
    id(decode_msg_AuthUserListRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('AuthRoleListRequest', Bin,
		  TrUserData) ->
    id(decode_msg_AuthRoleListRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('AuthRoleDeleteRequest', Bin,
		  TrUserData) ->
    id(decode_msg_AuthRoleDeleteRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('AuthRoleGrantPermissionRequest', Bin,
		  TrUserData) ->
    id(decode_msg_AuthRoleGrantPermissionRequest(Bin,
						 TrUserData),
       TrUserData);
decode_msg_2_doit('AuthRoleRevokePermissionRequest',
		  Bin, TrUserData) ->
    id(decode_msg_AuthRoleRevokePermissionRequest(Bin,
						  TrUserData),
       TrUserData);
decode_msg_2_doit('AuthEnableResponse', Bin,
		  TrUserData) ->
    id(decode_msg_AuthEnableResponse(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('AuthDisableResponse', Bin,
		  TrUserData) ->
    id(decode_msg_AuthDisableResponse(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('AuthenticateResponse', Bin,
		  TrUserData) ->
    id(decode_msg_AuthenticateResponse(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('AuthUserAddResponse', Bin,
		  TrUserData) ->
    id(decode_msg_AuthUserAddResponse(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('AuthUserGetResponse', Bin,
		  TrUserData) ->
    id(decode_msg_AuthUserGetResponse(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('AuthUserDeleteResponse', Bin,
		  TrUserData) ->
    id(decode_msg_AuthUserDeleteResponse(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('AuthUserChangePasswordResponse', Bin,
		  TrUserData) ->
    id(decode_msg_AuthUserChangePasswordResponse(Bin,
						 TrUserData),
       TrUserData);
decode_msg_2_doit('AuthUserGrantRoleResponse', Bin,
		  TrUserData) ->
    id(decode_msg_AuthUserGrantRoleResponse(Bin,
					    TrUserData),
       TrUserData);
decode_msg_2_doit('AuthUserRevokeRoleResponse', Bin,
		  TrUserData) ->
    id(decode_msg_AuthUserRevokeRoleResponse(Bin,
					     TrUserData),
       TrUserData);
decode_msg_2_doit('AuthRoleAddResponse', Bin,
		  TrUserData) ->
    id(decode_msg_AuthRoleAddResponse(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('AuthRoleGetResponse', Bin,
		  TrUserData) ->
    id(decode_msg_AuthRoleGetResponse(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('AuthRoleListResponse', Bin,
		  TrUserData) ->
    id(decode_msg_AuthRoleListResponse(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('AuthUserListResponse', Bin,
		  TrUserData) ->
    id(decode_msg_AuthUserListResponse(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('AuthRoleDeleteResponse', Bin,
		  TrUserData) ->
    id(decode_msg_AuthRoleDeleteResponse(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('AuthRoleGrantPermissionResponse',
		  Bin, TrUserData) ->
    id(decode_msg_AuthRoleGrantPermissionResponse(Bin,
						  TrUserData),
       TrUserData);
decode_msg_2_doit('AuthRoleRevokePermissionResponse',
		  Bin, TrUserData) ->
    id(decode_msg_AuthRoleRevokePermissionResponse(Bin,
						   TrUserData),
       TrUserData);
decode_msg_2_doit('KeyValue', Bin, TrUserData) ->
    id(decode_msg_KeyValue(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Event', Bin, TrUserData) ->
    id(decode_msg_Event(Bin, TrUserData), TrUserData);
decode_msg_2_doit('User', Bin, TrUserData) ->
    id(decode_msg_User(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Permission', Bin, TrUserData) ->
    id(decode_msg_Permission(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Role', Bin, TrUserData) ->
    id(decode_msg_Role(Bin, TrUserData), TrUserData).



decode_msg_ResponseHeader(Bin, TrUserData) ->
    dfp_read_field_def_ResponseHeader(Bin, 0, 0,
				      id(0, TrUserData), id(0, TrUserData),
				      id(0, TrUserData), id(0, TrUserData),
				      TrUserData).

dfp_read_field_def_ResponseHeader(<<8, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_ResponseHeader_cluster_id(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_ResponseHeader(<<16, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_ResponseHeader_member_id(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_ResponseHeader(<<24, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_ResponseHeader_revision(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_ResponseHeader(<<32, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_ResponseHeader_raft_term(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_ResponseHeader(<<>>, 0, 0, F@_1,
				  F@_2, F@_3, F@_4, _) ->
    #{cluster_id => F@_1, member_id => F@_2,
      revision => F@_3, raft_term => F@_4};
dfp_read_field_def_ResponseHeader(Other, Z1, Z2, F@_1,
				  F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_ResponseHeader(Other, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_ResponseHeader(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ResponseHeader(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     TrUserData);
dg_read_field_def_ResponseHeader(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_ResponseHeader_cluster_id(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, TrUserData);
      16 ->
	  d_field_ResponseHeader_member_id(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, TrUserData);
      24 ->
	  d_field_ResponseHeader_revision(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, TrUserData);
      32 ->
	  d_field_ResponseHeader_raft_term(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ResponseHeader(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, TrUserData);
	    1 ->
		skip_64_ResponseHeader(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, TrUserData);
	    2 ->
		skip_length_delimited_ResponseHeader(Rest, 0, 0, F@_1,
						     F@_2, F@_3, F@_4,
						     TrUserData);
	    3 ->
		skip_group_ResponseHeader(Rest, Key bsr 3, 0, F@_1,
					  F@_2, F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_ResponseHeader(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, TrUserData)
	  end
    end;
dg_read_field_def_ResponseHeader(<<>>, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, _) ->
    #{cluster_id => F@_1, member_id => F@_2,
      revision => F@_3, raft_term => F@_4}.

d_field_ResponseHeader_cluster_id(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_ResponseHeader_cluster_id(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      TrUserData);
d_field_ResponseHeader_cluster_id(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_ResponseHeader(RestF, 0, 0,
				      NewFValue, F@_2, F@_3, F@_4, TrUserData).

d_field_ResponseHeader_member_id(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_ResponseHeader_member_id(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     TrUserData);
d_field_ResponseHeader_member_id(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_ResponseHeader(RestF, 0, 0, F@_1,
				      NewFValue, F@_3, F@_4, TrUserData).

d_field_ResponseHeader_revision(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_ResponseHeader_revision(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				    TrUserData);
d_field_ResponseHeader_revision(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_ResponseHeader(RestF, 0, 0, F@_1,
				      F@_2, NewFValue, F@_4, TrUserData).

d_field_ResponseHeader_raft_term(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_ResponseHeader_raft_term(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     TrUserData);
d_field_ResponseHeader_raft_term(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_ResponseHeader(RestF, 0, 0, F@_1,
				      F@_2, F@_3, NewFValue, TrUserData).

skip_varint_ResponseHeader(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_ResponseHeader(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData);
skip_varint_ResponseHeader(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_ResponseHeader(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_ResponseHeader(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_ResponseHeader(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 TrUserData);
skip_length_delimited_ResponseHeader(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4,
				     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ResponseHeader(Rest2, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, TrUserData).

skip_group_ResponseHeader(Bin, FNum, Z2, F@_1, F@_2,
			  F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ResponseHeader(Rest, 0, Z2, F@_1,
				      F@_2, F@_3, F@_4, TrUserData).

skip_32_ResponseHeader(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_ResponseHeader(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, TrUserData).

skip_64_ResponseHeader(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_ResponseHeader(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, TrUserData).

decode_msg_RangeRequest(Bin, TrUserData) ->
    dfp_read_field_def_RangeRequest(Bin, 0, 0,
				    id(<<>>, TrUserData), id(<<>>, TrUserData),
				    id(0, TrUserData), id(0, TrUserData),
				    id('NONE', TrUserData),
				    id('KEY', TrUserData),
				    id(false, TrUserData),
				    id(false, TrUserData),
				    id(false, TrUserData), id(0, TrUserData),
				    id(0, TrUserData), id(0, TrUserData),
				    id(0, TrUserData), TrUserData).

dfp_read_field_def_RangeRequest(<<10, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				TrUserData) ->
    d_field_RangeRequest_key(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			     F@_12, F@_13, TrUserData);
dfp_read_field_def_RangeRequest(<<18, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				TrUserData) ->
    d_field_RangeRequest_range_end(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_RangeRequest(<<24, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				TrUserData) ->
    d_field_RangeRequest_limit(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_RangeRequest(<<32, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				TrUserData) ->
    d_field_RangeRequest_revision(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_RangeRequest(<<40, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				TrUserData) ->
    d_field_RangeRequest_sort_order(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				    F@_9, F@_10, F@_11, F@_12, F@_13,
				    TrUserData);
dfp_read_field_def_RangeRequest(<<48, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				TrUserData) ->
    d_field_RangeRequest_sort_target(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				     F@_9, F@_10, F@_11, F@_12, F@_13,
				     TrUserData);
dfp_read_field_def_RangeRequest(<<56, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				TrUserData) ->
    d_field_RangeRequest_serializable(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				      F@_9, F@_10, F@_11, F@_12, F@_13,
				      TrUserData);
dfp_read_field_def_RangeRequest(<<64, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				TrUserData) ->
    d_field_RangeRequest_keys_only(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_RangeRequest(<<72, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				TrUserData) ->
    d_field_RangeRequest_count_only(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				    F@_9, F@_10, F@_11, F@_12, F@_13,
				    TrUserData);
dfp_read_field_def_RangeRequest(<<80, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				TrUserData) ->
    d_field_RangeRequest_min_mod_revision(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
					  F@_13, TrUserData);
dfp_read_field_def_RangeRequest(<<88, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				TrUserData) ->
    d_field_RangeRequest_max_mod_revision(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
					  F@_13, TrUserData);
dfp_read_field_def_RangeRequest(<<96, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				TrUserData) ->
    d_field_RangeRequest_min_create_revision(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					     F@_7, F@_8, F@_9, F@_10, F@_11,
					     F@_12, F@_13, TrUserData);
dfp_read_field_def_RangeRequest(<<104, Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				TrUserData) ->
    d_field_RangeRequest_max_create_revision(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					     F@_7, F@_8, F@_9, F@_10, F@_11,
					     F@_12, F@_13, TrUserData);
dfp_read_field_def_RangeRequest(<<>>, 0, 0, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, F@_12, F@_13, _) ->
    #{key => F@_1, range_end => F@_2, limit => F@_3,
      revision => F@_4, sort_order => F@_5,
      sort_target => F@_6, serializable => F@_7,
      keys_only => F@_8, count_only => F@_9,
      min_mod_revision => F@_10, max_mod_revision => F@_11,
      min_create_revision => F@_12,
      max_create_revision => F@_13};
dfp_read_field_def_RangeRequest(Other, Z1, Z2, F@_1,
				F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    dg_read_field_def_RangeRequest(Other, Z1, Z2, F@_1,
				   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				   F@_9, F@_10, F@_11, F@_12, F@_13,
				   TrUserData).

dg_read_field_def_RangeRequest(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			       TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_RangeRequest(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				   F@_13, TrUserData);
dg_read_field_def_RangeRequest(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			       TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_RangeRequest_key(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				   F@_11, F@_12, F@_13, TrUserData);
      18 ->
	  d_field_RangeRequest_range_end(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					 F@_9, F@_10, F@_11, F@_12, F@_13,
					 TrUserData);
      24 ->
	  d_field_RangeRequest_limit(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				     F@_11, F@_12, F@_13, TrUserData);
      32 ->
	  d_field_RangeRequest_revision(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					F@_9, F@_10, F@_11, F@_12, F@_13,
					TrUserData);
      40 ->
	  d_field_RangeRequest_sort_order(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					  F@_9, F@_10, F@_11, F@_12, F@_13,
					  TrUserData);
      48 ->
	  d_field_RangeRequest_sort_target(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					   F@_9, F@_10, F@_11, F@_12, F@_13,
					   TrUserData);
      56 ->
	  d_field_RangeRequest_serializable(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					    F@_8, F@_9, F@_10, F@_11, F@_12,
					    F@_13, TrUserData);
      64 ->
	  d_field_RangeRequest_keys_only(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					 F@_9, F@_10, F@_11, F@_12, F@_13,
					 TrUserData);
      72 ->
	  d_field_RangeRequest_count_only(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					  F@_9, F@_10, F@_11, F@_12, F@_13,
					  TrUserData);
      80 ->
	  d_field_RangeRequest_min_mod_revision(Rest, 0, 0, F@_1,
						F@_2, F@_3, F@_4, F@_5, F@_6,
						F@_7, F@_8, F@_9, F@_10, F@_11,
						F@_12, F@_13, TrUserData);
      88 ->
	  d_field_RangeRequest_max_mod_revision(Rest, 0, 0, F@_1,
						F@_2, F@_3, F@_4, F@_5, F@_6,
						F@_7, F@_8, F@_9, F@_10, F@_11,
						F@_12, F@_13, TrUserData);
      96 ->
	  d_field_RangeRequest_min_create_revision(Rest, 0, 0,
						   F@_1, F@_2, F@_3, F@_4, F@_5,
						   F@_6, F@_7, F@_8, F@_9,
						   F@_10, F@_11, F@_12, F@_13,
						   TrUserData);
      104 ->
	  d_field_RangeRequest_max_create_revision(Rest, 0, 0,
						   F@_1, F@_2, F@_3, F@_4, F@_5,
						   F@_6, F@_7, F@_8, F@_9,
						   F@_10, F@_11, F@_12, F@_13,
						   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_RangeRequest(Rest, 0, 0, F@_1, F@_2, F@_3,
					 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					 F@_10, F@_11, F@_12, F@_13,
					 TrUserData);
	    1 ->
		skip_64_RangeRequest(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				     F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				     F@_12, F@_13, TrUserData);
	    2 ->
		skip_length_delimited_RangeRequest(Rest, 0, 0, F@_1,
						   F@_2, F@_3, F@_4, F@_5, F@_6,
						   F@_7, F@_8, F@_9, F@_10,
						   F@_11, F@_12, F@_13,
						   TrUserData);
	    3 ->
		skip_group_RangeRequest(Rest, Key bsr 3, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					F@_9, F@_10, F@_11, F@_12, F@_13,
					TrUserData);
	    5 ->
		skip_32_RangeRequest(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				     F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				     F@_12, F@_13, TrUserData)
	  end
    end;
dg_read_field_def_RangeRequest(<<>>, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, F@_12, F@_13, _) ->
    #{key => F@_1, range_end => F@_2, limit => F@_3,
      revision => F@_4, sort_order => F@_5,
      sort_target => F@_6, serializable => F@_7,
      keys_only => F@_8, count_only => F@_9,
      min_mod_revision => F@_10, max_mod_revision => F@_11,
      min_create_revision => F@_12,
      max_create_revision => F@_13}.

d_field_RangeRequest_key(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_RangeRequest_key(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_RangeRequest_key(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			 F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_RangeRequest(RestF, 0, 0, NewFValue,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				    F@_9, F@_10, F@_11, F@_12, F@_13,
				    TrUserData).

d_field_RangeRequest_range_end(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			       TrUserData)
    when N < 57 ->
    d_field_RangeRequest_range_end(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				   F@_13, TrUserData);
d_field_RangeRequest_range_end(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_RangeRequest(RestF, 0, 0, F@_1,
				    NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7,
				    F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				    TrUserData).

d_field_RangeRequest_limit(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_RangeRequest_limit(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			       F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_RangeRequest_limit(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, F@_8,
			   F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_RangeRequest(RestF, 0, 0, F@_1, F@_2,
				    NewFValue, F@_4, F@_5, F@_6, F@_7, F@_8,
				    F@_9, F@_10, F@_11, F@_12, F@_13,
				    TrUserData).

d_field_RangeRequest_revision(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			      TrUserData)
    when N < 57 ->
    d_field_RangeRequest_revision(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				  F@_13, TrUserData);
d_field_RangeRequest_revision(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			      TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_RangeRequest(RestF, 0, 0, F@_1, F@_2,
				    F@_3, NewFValue, F@_5, F@_6, F@_7, F@_8,
				    F@_9, F@_10, F@_11, F@_12, F@_13,
				    TrUserData).

d_field_RangeRequest_sort_order(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				TrUserData)
    when N < 57 ->
    d_field_RangeRequest_sort_order(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				    F@_13, TrUserData);
d_field_RangeRequest_sort_order(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7,
				F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_RangeRequest.SortOrder'(begin
					      <<Res:32/signed-native>> = <<(X
									      bsl
									      N
									      +
									      Acc):32/unsigned-native>>,
					      id(Res, TrUserData)
					    end),
	    TrUserData),
	 Rest},
    dfp_read_field_def_RangeRequest(RestF, 0, 0, F@_1, F@_2,
				    F@_3, F@_4, NewFValue, F@_6, F@_7, F@_8,
				    F@_9, F@_10, F@_11, F@_12, F@_13,
				    TrUserData).

d_field_RangeRequest_sort_target(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				 TrUserData)
    when N < 57 ->
    d_field_RangeRequest_sort_target(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				     F@_12, F@_13, TrUserData);
d_field_RangeRequest_sort_target(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7,
				 F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				 TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_RangeRequest.SortTarget'(begin
					       <<Res:32/signed-native>> = <<(X
									       bsl
									       N
									       +
									       Acc):32/unsigned-native>>,
					       id(Res, TrUserData)
					     end),
	    TrUserData),
	 Rest},
    dfp_read_field_def_RangeRequest(RestF, 0, 0, F@_1, F@_2,
				    F@_3, F@_4, F@_5, NewFValue, F@_7, F@_8,
				    F@_9, F@_10, F@_11, F@_12, F@_13,
				    TrUserData).

d_field_RangeRequest_serializable(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				  TrUserData)
    when N < 57 ->
    d_field_RangeRequest_serializable(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				      F@_11, F@_12, F@_13, TrUserData);
d_field_RangeRequest_serializable(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _,
				  F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				  TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_RangeRequest(RestF, 0, 0, F@_1, F@_2,
				    F@_3, F@_4, F@_5, F@_6, NewFValue, F@_8,
				    F@_9, F@_10, F@_11, F@_12, F@_13,
				    TrUserData).

d_field_RangeRequest_keys_only(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			       TrUserData)
    when N < 57 ->
    d_field_RangeRequest_keys_only(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				   F@_13, TrUserData);
d_field_RangeRequest_keys_only(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       _, F@_9, F@_10, F@_11, F@_12, F@_13,
			       TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_RangeRequest(RestF, 0, 0, F@_1, F@_2,
				    F@_3, F@_4, F@_5, F@_6, F@_7, NewFValue,
				    F@_9, F@_10, F@_11, F@_12, F@_13,
				    TrUserData).

d_field_RangeRequest_count_only(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				TrUserData)
    when N < 57 ->
    d_field_RangeRequest_count_only(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				    F@_13, TrUserData);
d_field_RangeRequest_count_only(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, F@_8, _, F@_10, F@_11, F@_12, F@_13,
				TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_RangeRequest(RestF, 0, 0, F@_1, F@_2,
				    F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				    NewFValue, F@_10, F@_11, F@_12, F@_13,
				    TrUserData).

d_field_RangeRequest_min_mod_revision(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				      F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_RangeRequest_min_mod_revision(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					  F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					  F@_11, F@_12, F@_13, TrUserData);
d_field_RangeRequest_min_mod_revision(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, _, F@_11, F@_12,
				      F@_13, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_RangeRequest(RestF, 0, 0, F@_1, F@_2,
				    F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				    NewFValue, F@_11, F@_12, F@_13, TrUserData).

d_field_RangeRequest_max_mod_revision(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				      F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_RangeRequest_max_mod_revision(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					  F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					  F@_11, F@_12, F@_13, TrUserData);
d_field_RangeRequest_max_mod_revision(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, F@_10, _, F@_12,
				      F@_13, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_RangeRequest(RestF, 0, 0, F@_1, F@_2,
				    F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				    F@_10, NewFValue, F@_12, F@_13, TrUserData).

d_field_RangeRequest_min_create_revision(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					 F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_RangeRequest_min_create_revision(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					     F@_10, F@_11, F@_12, F@_13,
					     TrUserData);
d_field_RangeRequest_min_create_revision(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					 _, F@_13, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_RangeRequest(RestF, 0, 0, F@_1, F@_2,
				    F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				    F@_10, F@_11, NewFValue, F@_13, TrUserData).

d_field_RangeRequest_max_create_revision(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					 F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_RangeRequest_max_create_revision(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					     F@_10, F@_11, F@_12, F@_13,
					     TrUserData);
d_field_RangeRequest_max_create_revision(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					 F@_12, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_RangeRequest(RestF, 0, 0, F@_1, F@_2,
				    F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				    F@_10, F@_11, F@_12, NewFValue, TrUserData).

skip_varint_RangeRequest(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    skip_varint_RangeRequest(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			     F@_12, F@_13, TrUserData);
skip_varint_RangeRequest(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    dfp_read_field_def_RangeRequest(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				    F@_9, F@_10, F@_11, F@_12, F@_13,
				    TrUserData).

skip_length_delimited_RangeRequest(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				   TrUserData)
    when N < 57 ->
    skip_length_delimited_RangeRequest(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				       F@_11, F@_12, F@_13, TrUserData);
skip_length_delimited_RangeRequest(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				   TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RangeRequest(Rest2, 0, 0, F@_1, F@_2,
				    F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				    F@_10, F@_11, F@_12, F@_13, TrUserData).

skip_group_RangeRequest(Bin, FNum, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
			F@_13, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_RangeRequest(Rest, 0, Z2, F@_1, F@_2,
				    F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				    F@_10, F@_11, F@_12, F@_13, TrUserData).

skip_32_RangeRequest(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    dfp_read_field_def_RangeRequest(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				    F@_9, F@_10, F@_11, F@_12, F@_13,
				    TrUserData).

skip_64_RangeRequest(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    dfp_read_field_def_RangeRequest(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				    F@_9, F@_10, F@_11, F@_12, F@_13,
				    TrUserData).

decode_msg_RangeResponse(Bin, TrUserData) ->
    dfp_read_field_def_RangeResponse(Bin, 0, 0,
				     id(undefined, TrUserData),
				     id([], TrUserData), id(false, TrUserData),
				     id(0, TrUserData), TrUserData).

dfp_read_field_def_RangeResponse(<<10, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_RangeResponse_header(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, TrUserData);
dfp_read_field_def_RangeResponse(<<18, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_RangeResponse_kvs(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData);
dfp_read_field_def_RangeResponse(<<24, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_RangeResponse_more(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData);
dfp_read_field_def_RangeResponse(<<32, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_RangeResponse_count(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData);
dfp_read_field_def_RangeResponse(<<>>, 0, 0, F@_1, R1,
				 F@_3, F@_4, TrUserData) ->
    S1 = #{more => F@_3, count => F@_4},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{header => F@_1}
	 end,
    if R1 == '$undef' -> S2;
       true -> S2#{kvs => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_RangeResponse(Other, Z1, Z2, F@_1,
				 F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_RangeResponse(Other, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_RangeResponse(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_RangeResponse(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				    TrUserData);
dg_read_field_def_RangeResponse(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_RangeResponse_header(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, TrUserData);
      18 ->
	  d_field_RangeResponse_kvs(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, TrUserData);
      24 ->
	  d_field_RangeResponse_more(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, TrUserData);
      32 ->
	  d_field_RangeResponse_count(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_RangeResponse(Rest, 0, 0, F@_1, F@_2, F@_3,
					  F@_4, TrUserData);
	    1 ->
		skip_64_RangeResponse(Rest, 0, 0, F@_1, F@_2, F@_3,
				      F@_4, TrUserData);
	    2 ->
		skip_length_delimited_RangeResponse(Rest, 0, 0, F@_1,
						    F@_2, F@_3, F@_4,
						    TrUserData);
	    3 ->
		skip_group_RangeResponse(Rest, Key bsr 3, 0, F@_1, F@_2,
					 F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_RangeResponse(Rest, 0, 0, F@_1, F@_2, F@_3,
				      F@_4, TrUserData)
	  end
    end;
dg_read_field_def_RangeResponse(<<>>, 0, 0, F@_1, R1,
				F@_3, F@_4, TrUserData) ->
    S1 = #{more => F@_3, count => F@_4},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{header => F@_1}
	 end,
    if R1 == '$undef' -> S2;
       true -> S2#{kvs => lists_reverse(R1, TrUserData)}
    end.

d_field_RangeResponse_header(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_RangeResponse_header(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_RangeResponse_header(<<0:1, X:7, Rest/binary>>,
			     N, Acc, Prev, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ResponseHeader(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_RangeResponse(RestF, 0, 0,
				     if Prev == '$undef' -> NewFValue;
					true ->
					    merge_msg_ResponseHeader(Prev,
								     NewFValue,
								     TrUserData)
				     end,
				     F@_2, F@_3, F@_4, TrUserData).

d_field_RangeResponse_kvs(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_RangeResponse_kvs(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_RangeResponse_kvs(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, Prev, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_KeyValue(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_RangeResponse(RestF, 0, 0, F@_1,
				     cons(NewFValue, Prev, TrUserData), F@_3,
				     F@_4, TrUserData).

d_field_RangeResponse_more(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_RangeResponse_more(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_RangeResponse_more(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_RangeResponse(RestF, 0, 0, F@_1,
				     F@_2, NewFValue, F@_4, TrUserData).

d_field_RangeResponse_count(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_RangeResponse_count(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_RangeResponse_count(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_RangeResponse(RestF, 0, 0, F@_1,
				     F@_2, F@_3, NewFValue, TrUserData).

skip_varint_RangeResponse(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_RangeResponse(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData);
skip_varint_RangeResponse(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_RangeResponse(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_RangeResponse(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_RangeResponse(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					TrUserData);
skip_length_delimited_RangeResponse(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4,
				    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RangeResponse(Rest2, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, TrUserData).

skip_group_RangeResponse(Bin, FNum, Z2, F@_1, F@_2,
			 F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_RangeResponse(Rest, 0, Z2, F@_1,
				     F@_2, F@_3, F@_4, TrUserData).

skip_32_RangeResponse(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_RangeResponse(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, TrUserData).

skip_64_RangeResponse(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_RangeResponse(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, TrUserData).

decode_msg_PutRequest(Bin, TrUserData) ->
    dfp_read_field_def_PutRequest(Bin, 0, 0,
				  id(<<>>, TrUserData), id(<<>>, TrUserData),
				  id(0, TrUserData), id(false, TrUserData),
				  id(false, TrUserData), id(false, TrUserData),
				  TrUserData).

dfp_read_field_def_PutRequest(<<10, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			      TrUserData) ->
    d_field_PutRequest_key(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_PutRequest(<<18, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			      TrUserData) ->
    d_field_PutRequest_value(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_PutRequest(<<24, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			      TrUserData) ->
    d_field_PutRequest_lease(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_PutRequest(<<32, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			      TrUserData) ->
    d_field_PutRequest_prev_kv(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_PutRequest(<<40, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			      TrUserData) ->
    d_field_PutRequest_ignore_value(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_PutRequest(<<48, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			      TrUserData) ->
    d_field_PutRequest_ignore_lease(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_PutRequest(<<>>, 0, 0, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, _) ->
    #{key => F@_1, value => F@_2, lease => F@_3,
      prev_kv => F@_4, ignore_value => F@_5,
      ignore_lease => F@_6};
dfp_read_field_def_PutRequest(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dg_read_field_def_PutRequest(Other, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, TrUserData).

dg_read_field_def_PutRequest(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			     TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_PutRequest(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 TrUserData);
dg_read_field_def_PutRequest(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_PutRequest_key(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, F@_6, TrUserData);
      18 ->
	  d_field_PutRequest_value(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, TrUserData);
      24 ->
	  d_field_PutRequest_lease(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, TrUserData);
      32 ->
	  d_field_PutRequest_prev_kv(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, F@_6, TrUserData);
      40 ->
	  d_field_PutRequest_ignore_value(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, F@_6, TrUserData);
      48 ->
	  d_field_PutRequest_ignore_lease(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, F@_6, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_PutRequest(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, F@_5, F@_6, TrUserData);
	    1 ->
		skip_64_PutRequest(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   F@_5, F@_6, TrUserData);
	    2 ->
		skip_length_delimited_PutRequest(Rest, 0, 0, F@_1, F@_2,
						 F@_3, F@_4, F@_5, F@_6,
						 TrUserData);
	    3 ->
		skip_group_PutRequest(Rest, Key bsr 3, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, F@_6, TrUserData);
	    5 ->
		skip_32_PutRequest(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   F@_5, F@_6, TrUserData)
	  end
    end;
dg_read_field_def_PutRequest(<<>>, 0, 0, F@_1, F@_2,
			     F@_3, F@_4, F@_5, F@_6, _) ->
    #{key => F@_1, value => F@_2, lease => F@_3,
      prev_kv => F@_4, ignore_value => F@_5,
      ignore_lease => F@_6}.

d_field_PutRequest_key(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_PutRequest_key(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_PutRequest_key(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_PutRequest(RestF, 0, 0, NewFValue,
				  F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

d_field_PutRequest_value(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_PutRequest_value(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_PutRequest_value(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_PutRequest(RestF, 0, 0, F@_1,
				  NewFValue, F@_3, F@_4, F@_5, F@_6,
				  TrUserData).

d_field_PutRequest_lease(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_PutRequest_lease(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_PutRequest_lease(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_PutRequest(RestF, 0, 0, F@_1, F@_2,
				  NewFValue, F@_4, F@_5, F@_6, TrUserData).

d_field_PutRequest_prev_kv(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_PutRequest_prev_kv(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_PutRequest_prev_kv(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_PutRequest(RestF, 0, 0, F@_1, F@_2,
				  F@_3, NewFValue, F@_5, F@_6, TrUserData).

d_field_PutRequest_ignore_value(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				TrUserData)
    when N < 57 ->
    d_field_PutRequest_ignore_value(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    F@_6, TrUserData);
d_field_PutRequest_ignore_value(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6,
				TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_PutRequest(RestF, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, NewFValue, F@_6, TrUserData).

d_field_PutRequest_ignore_lease(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				TrUserData)
    when N < 57 ->
    d_field_PutRequest_ignore_lease(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    F@_6, TrUserData);
d_field_PutRequest_ignore_lease(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _,
				TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_PutRequest(RestF, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, F@_5, NewFValue, TrUserData).

skip_varint_PutRequest(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    skip_varint_PutRequest(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, TrUserData);
skip_varint_PutRequest(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_PutRequest(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_length_delimited_PutRequest(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 TrUserData)
    when N < 57 ->
    skip_length_delimited_PutRequest(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, F@_6, TrUserData);
skip_length_delimited_PutRequest(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_PutRequest(Rest2, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_group_PutRequest(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		      F@_4, F@_5, F@_6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_PutRequest(Rest, 0, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_32_PutRequest(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_PutRequest(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_64_PutRequest(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_PutRequest(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, TrUserData).

decode_msg_PutResponse(Bin, TrUserData) ->
    dfp_read_field_def_PutResponse(Bin, 0, 0,
				   id(undefined, TrUserData),
				   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_PutResponse(<<10, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_PutResponse_header(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
dfp_read_field_def_PutResponse(<<18, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_PutResponse_prev_kv(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData);
dfp_read_field_def_PutResponse(<<>>, 0, 0, F@_1, F@_2,
			       _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{header => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{prev_kv => F@_2}
    end;
dfp_read_field_def_PutResponse(Other, Z1, Z2, F@_1,
			       F@_2, TrUserData) ->
    dg_read_field_def_PutResponse(Other, Z1, Z2, F@_1, F@_2,
				  TrUserData).

dg_read_field_def_PutResponse(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_PutResponse(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_PutResponse(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_PutResponse_header(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
      18 ->
	  d_field_PutResponse_prev_kv(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_PutResponse(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
	    1 ->
		skip_64_PutResponse(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_PutResponse(Rest, 0, 0, F@_1,
						  F@_2, TrUserData);
	    3 ->
		skip_group_PutResponse(Rest, Key bsr 3, 0, F@_1, F@_2,
				       TrUserData);
	    5 ->
		skip_32_PutResponse(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_PutResponse(<<>>, 0, 0, F@_1, F@_2,
			      _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{header => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{prev_kv => F@_2}
    end.

d_field_PutResponse_header(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_PutResponse_header(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
d_field_PutResponse_header(<<0:1, X:7, Rest/binary>>, N,
			   Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ResponseHeader(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_PutResponse(RestF, 0, 0,
				   if Prev == '$undef' -> NewFValue;
				      true ->
					  merge_msg_ResponseHeader(Prev,
								   NewFValue,
								   TrUserData)
				   end,
				   F@_2, TrUserData).

d_field_PutResponse_prev_kv(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_PutResponse_prev_kv(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
d_field_PutResponse_prev_kv(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_KeyValue(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_PutResponse(RestF, 0, 0, F@_1,
				   if Prev == '$undef' -> NewFValue;
				      true ->
					  merge_msg_KeyValue(Prev, NewFValue,
							     TrUserData)
				   end,
				   TrUserData).

skip_varint_PutResponse(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_PutResponse(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
skip_varint_PutResponse(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_PutResponse(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_length_delimited_PutResponse(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_PutResponse(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_PutResponse(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_PutResponse(Rest2, 0, 0, F@_1, F@_2,
				   TrUserData).

skip_group_PutResponse(Bin, FNum, Z2, F@_1, F@_2,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_PutResponse(Rest, 0, Z2, F@_1, F@_2,
				   TrUserData).

skip_32_PutResponse(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_PutResponse(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_64_PutResponse(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_PutResponse(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

decode_msg_DeleteRangeRequest(Bin, TrUserData) ->
    dfp_read_field_def_DeleteRangeRequest(Bin, 0, 0,
					  id(<<>>, TrUserData),
					  id(<<>>, TrUserData),
					  id(false, TrUserData), TrUserData).

dfp_read_field_def_DeleteRangeRequest(<<10,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_DeleteRangeRequest_key(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData);
dfp_read_field_def_DeleteRangeRequest(<<18,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_DeleteRangeRequest_range_end(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, TrUserData);
dfp_read_field_def_DeleteRangeRequest(<<24,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_DeleteRangeRequest_prev_kv(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, TrUserData);
dfp_read_field_def_DeleteRangeRequest(<<>>, 0, 0, F@_1,
				      F@_2, F@_3, _) ->
    #{key => F@_1, range_end => F@_2, prev_kv => F@_3};
dfp_read_field_def_DeleteRangeRequest(Other, Z1, Z2,
				      F@_1, F@_2, F@_3, TrUserData) ->
    dg_read_field_def_DeleteRangeRequest(Other, Z1, Z2,
					 F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_DeleteRangeRequest(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_DeleteRangeRequest(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3,
					 TrUserData);
dg_read_field_def_DeleteRangeRequest(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_DeleteRangeRequest_key(Rest, 0, 0, F@_1, F@_2,
					 F@_3, TrUserData);
      18 ->
	  d_field_DeleteRangeRequest_range_end(Rest, 0, 0, F@_1,
					       F@_2, F@_3, TrUserData);
      24 ->
	  d_field_DeleteRangeRequest_prev_kv(Rest, 0, 0, F@_1,
					     F@_2, F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_DeleteRangeRequest(Rest, 0, 0, F@_1, F@_2,
					       F@_3, TrUserData);
	    1 ->
		skip_64_DeleteRangeRequest(Rest, 0, 0, F@_1, F@_2, F@_3,
					   TrUserData);
	    2 ->
		skip_length_delimited_DeleteRangeRequest(Rest, 0, 0,
							 F@_1, F@_2, F@_3,
							 TrUserData);
	    3 ->
		skip_group_DeleteRangeRequest(Rest, Key bsr 3, 0, F@_1,
					      F@_2, F@_3, TrUserData);
	    5 ->
		skip_32_DeleteRangeRequest(Rest, 0, 0, F@_1, F@_2, F@_3,
					   TrUserData)
	  end
    end;
dg_read_field_def_DeleteRangeRequest(<<>>, 0, 0, F@_1,
				     F@_2, F@_3, _) ->
    #{key => F@_1, range_end => F@_2, prev_kv => F@_3}.

d_field_DeleteRangeRequest_key(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_DeleteRangeRequest_key(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_DeleteRangeRequest_key(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_DeleteRangeRequest(RestF, 0, 0,
					  NewFValue, F@_2, F@_3, TrUserData).

d_field_DeleteRangeRequest_range_end(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_DeleteRangeRequest_range_end(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3,
					 TrUserData);
d_field_DeleteRangeRequest_range_end(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_DeleteRangeRequest(RestF, 0, 0, F@_1,
					  NewFValue, F@_3, TrUserData).

d_field_DeleteRangeRequest_prev_kv(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_DeleteRangeRequest_prev_kv(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3,
				       TrUserData);
d_field_DeleteRangeRequest_prev_kv(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_DeleteRangeRequest(RestF, 0, 0, F@_1,
					  F@_2, NewFValue, TrUserData).

skip_varint_DeleteRangeRequest(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_DeleteRangeRequest(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData);
skip_varint_DeleteRangeRequest(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_DeleteRangeRequest(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_DeleteRangeRequest(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_DeleteRangeRequest(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     TrUserData);
skip_length_delimited_DeleteRangeRequest(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3,
					 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DeleteRangeRequest(Rest2, 0, 0, F@_1,
					  F@_2, F@_3, TrUserData).

skip_group_DeleteRangeRequest(Bin, FNum, Z2, F@_1, F@_2,
			      F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_DeleteRangeRequest(Rest, 0, Z2, F@_1,
					  F@_2, F@_3, TrUserData).

skip_32_DeleteRangeRequest(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_DeleteRangeRequest(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, TrUserData).

skip_64_DeleteRangeRequest(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_DeleteRangeRequest(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, TrUserData).

decode_msg_DeleteRangeResponse(Bin, TrUserData) ->
    dfp_read_field_def_DeleteRangeResponse(Bin, 0, 0,
					   id(undefined, TrUserData),
					   id(0, TrUserData),
					   id([], TrUserData), TrUserData).

dfp_read_field_def_DeleteRangeResponse(<<10,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_DeleteRangeResponse_header(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, TrUserData);
dfp_read_field_def_DeleteRangeResponse(<<16,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_DeleteRangeResponse_deleted(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, TrUserData);
dfp_read_field_def_DeleteRangeResponse(<<26,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_DeleteRangeResponse_prev_kvs(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, TrUserData);
dfp_read_field_def_DeleteRangeResponse(<<>>, 0, 0, F@_1,
				       F@_2, R1, TrUserData) ->
    S1 = #{deleted => F@_2},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{header => F@_1}
	 end,
    if R1 == '$undef' -> S2;
       true -> S2#{prev_kvs => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_DeleteRangeResponse(Other, Z1, Z2,
				       F@_1, F@_2, F@_3, TrUserData) ->
    dg_read_field_def_DeleteRangeResponse(Other, Z1, Z2,
					  F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_DeleteRangeResponse(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_DeleteRangeResponse(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3,
					  TrUserData);
dg_read_field_def_DeleteRangeResponse(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_DeleteRangeResponse_header(Rest, 0, 0, F@_1,
					     F@_2, F@_3, TrUserData);
      16 ->
	  d_field_DeleteRangeResponse_deleted(Rest, 0, 0, F@_1,
					      F@_2, F@_3, TrUserData);
      26 ->
	  d_field_DeleteRangeResponse_prev_kvs(Rest, 0, 0, F@_1,
					       F@_2, F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_DeleteRangeResponse(Rest, 0, 0, F@_1, F@_2,
						F@_3, TrUserData);
	    1 ->
		skip_64_DeleteRangeResponse(Rest, 0, 0, F@_1, F@_2,
					    F@_3, TrUserData);
	    2 ->
		skip_length_delimited_DeleteRangeResponse(Rest, 0, 0,
							  F@_1, F@_2, F@_3,
							  TrUserData);
	    3 ->
		skip_group_DeleteRangeResponse(Rest, Key bsr 3, 0, F@_1,
					       F@_2, F@_3, TrUserData);
	    5 ->
		skip_32_DeleteRangeResponse(Rest, 0, 0, F@_1, F@_2,
					    F@_3, TrUserData)
	  end
    end;
dg_read_field_def_DeleteRangeResponse(<<>>, 0, 0, F@_1,
				      F@_2, R1, TrUserData) ->
    S1 = #{deleted => F@_2},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{header => F@_1}
	 end,
    if R1 == '$undef' -> S2;
       true -> S2#{prev_kvs => lists_reverse(R1, TrUserData)}
    end.

d_field_DeleteRangeResponse_header(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_DeleteRangeResponse_header(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3,
				       TrUserData);
d_field_DeleteRangeResponse_header(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, Prev, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ResponseHeader(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_DeleteRangeResponse(RestF, 0, 0,
					   if Prev == '$undef' -> NewFValue;
					      true ->
						  merge_msg_ResponseHeader(Prev,
									   NewFValue,
									   TrUserData)
					   end,
					   F@_2, F@_3, TrUserData).

d_field_DeleteRangeResponse_deleted(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_DeleteRangeResponse_deleted(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3,
					TrUserData);
d_field_DeleteRangeResponse_deleted(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_DeleteRangeResponse(RestF, 0, 0,
					   F@_1, NewFValue, F@_3, TrUserData).

d_field_DeleteRangeResponse_prev_kvs(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_DeleteRangeResponse_prev_kvs(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3,
					 TrUserData);
d_field_DeleteRangeResponse_prev_kvs(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_KeyValue(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_DeleteRangeResponse(RestF, 0, 0,
					   F@_1, F@_2,
					   cons(NewFValue, Prev, TrUserData),
					   TrUserData).

skip_varint_DeleteRangeResponse(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_DeleteRangeResponse(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData);
skip_varint_DeleteRangeResponse(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_DeleteRangeResponse(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_DeleteRangeResponse(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_DeleteRangeResponse(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      TrUserData);
skip_length_delimited_DeleteRangeResponse(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3,
					  TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DeleteRangeResponse(Rest2, 0, 0,
					   F@_1, F@_2, F@_3, TrUserData).

skip_group_DeleteRangeResponse(Bin, FNum, Z2, F@_1,
			       F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_DeleteRangeResponse(Rest, 0, Z2,
					   F@_1, F@_2, F@_3, TrUserData).

skip_32_DeleteRangeResponse(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_DeleteRangeResponse(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, TrUserData).

skip_64_DeleteRangeResponse(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_DeleteRangeResponse(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, TrUserData).

decode_msg_RequestOp(Bin, TrUserData) ->
    dfp_read_field_def_RequestOp(Bin, 0, 0,
				 id('$undef', TrUserData), TrUserData).

dfp_read_field_def_RequestOp(<<10, Rest/binary>>, Z1,
			     Z2, F@_1, TrUserData) ->
    d_field_RequestOp_request_range(Rest, Z1, Z2, F@_1,
				    TrUserData);
dfp_read_field_def_RequestOp(<<18, Rest/binary>>, Z1,
			     Z2, F@_1, TrUserData) ->
    d_field_RequestOp_request_put(Rest, Z1, Z2, F@_1,
				  TrUserData);
dfp_read_field_def_RequestOp(<<26, Rest/binary>>, Z1,
			     Z2, F@_1, TrUserData) ->
    d_field_RequestOp_request_delete_range(Rest, Z1, Z2,
					   F@_1, TrUserData);
dfp_read_field_def_RequestOp(<<34, Rest/binary>>, Z1,
			     Z2, F@_1, TrUserData) ->
    d_field_RequestOp_request_txn(Rest, Z1, Z2, F@_1,
				  TrUserData);
dfp_read_field_def_RequestOp(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{request => F@_1}
    end;
dfp_read_field_def_RequestOp(Other, Z1, Z2, F@_1,
			     TrUserData) ->
    dg_read_field_def_RequestOp(Other, Z1, Z2, F@_1,
				TrUserData).

dg_read_field_def_RequestOp(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_RequestOp(Rest, N + 7, X bsl N + Acc,
				F@_1, TrUserData);
dg_read_field_def_RequestOp(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_RequestOp_request_range(Rest, 0, 0, F@_1,
					  TrUserData);
      18 ->
	  d_field_RequestOp_request_put(Rest, 0, 0, F@_1,
					TrUserData);
      26 ->
	  d_field_RequestOp_request_delete_range(Rest, 0, 0, F@_1,
						 TrUserData);
      34 ->
	  d_field_RequestOp_request_txn(Rest, 0, 0, F@_1,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_RequestOp(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_RequestOp(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_RequestOp(Rest, 0, 0, F@_1,
						TrUserData);
	    3 ->
		skip_group_RequestOp(Rest, Key bsr 3, 0, F@_1,
				     TrUserData);
	    5 -> skip_32_RequestOp(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_RequestOp(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{request => F@_1}
    end.

d_field_RequestOp_request_range(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_RequestOp_request_range(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
d_field_RequestOp_request_range(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_RangeRequest(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_RequestOp(RestF, 0, 0,
				 case Prev of
				   '$undef' ->
				       id({request_range, NewFValue},
					  TrUserData);
				   {request_range, MVPrev} ->
				       id({request_range,
					   merge_msg_RangeRequest(MVPrev,
								  NewFValue,
								  TrUserData)},
					  TrUserData);
				   _ ->
				       id({request_range, NewFValue},
					  TrUserData)
				 end,
				 TrUserData).

d_field_RequestOp_request_put(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_RequestOp_request_put(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
d_field_RequestOp_request_put(<<0:1, X:7, Rest/binary>>,
			      N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_PutRequest(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_RequestOp(RestF, 0, 0,
				 case Prev of
				   '$undef' ->
				       id({request_put, NewFValue}, TrUserData);
				   {request_put, MVPrev} ->
				       id({request_put,
					   merge_msg_PutRequest(MVPrev,
								NewFValue,
								TrUserData)},
					  TrUserData);
				   _ -> id({request_put, NewFValue}, TrUserData)
				 end,
				 TrUserData).

d_field_RequestOp_request_delete_range(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_RequestOp_request_delete_range(Rest, N + 7,
					   X bsl N + Acc, F@_1, TrUserData);
d_field_RequestOp_request_delete_range(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_DeleteRangeRequest(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_RequestOp(RestF, 0, 0,
				 case Prev of
				   '$undef' ->
				       id({request_delete_range, NewFValue},
					  TrUserData);
				   {request_delete_range, MVPrev} ->
				       id({request_delete_range,
					   merge_msg_DeleteRangeRequest(MVPrev,
									NewFValue,
									TrUserData)},
					  TrUserData);
				   _ ->
				       id({request_delete_range, NewFValue},
					  TrUserData)
				 end,
				 TrUserData).

d_field_RequestOp_request_txn(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_RequestOp_request_txn(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
d_field_RequestOp_request_txn(<<0:1, X:7, Rest/binary>>,
			      N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_TxnRequest(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_RequestOp(RestF, 0, 0,
				 case Prev of
				   '$undef' ->
				       id({request_txn, NewFValue}, TrUserData);
				   {request_txn, MVPrev} ->
				       id({request_txn,
					   merge_msg_TxnRequest(MVPrev,
								NewFValue,
								TrUserData)},
					  TrUserData);
				   _ -> id({request_txn, NewFValue}, TrUserData)
				 end,
				 TrUserData).

skip_varint_RequestOp(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    skip_varint_RequestOp(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_RequestOp(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    dfp_read_field_def_RequestOp(Rest, Z1, Z2, F@_1,
				 TrUserData).

skip_length_delimited_RequestOp(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_RequestOp(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_RequestOp(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RequestOp(Rest2, 0, 0, F@_1,
				 TrUserData).

skip_group_RequestOp(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_RequestOp(Rest, 0, Z2, F@_1,
				 TrUserData).

skip_32_RequestOp(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  TrUserData) ->
    dfp_read_field_def_RequestOp(Rest, Z1, Z2, F@_1,
				 TrUserData).

skip_64_RequestOp(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  TrUserData) ->
    dfp_read_field_def_RequestOp(Rest, Z1, Z2, F@_1,
				 TrUserData).

decode_msg_ResponseOp(Bin, TrUserData) ->
    dfp_read_field_def_ResponseOp(Bin, 0, 0,
				  id('$undef', TrUserData), TrUserData).

dfp_read_field_def_ResponseOp(<<10, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    d_field_ResponseOp_response_range(Rest, Z1, Z2, F@_1,
				      TrUserData);
dfp_read_field_def_ResponseOp(<<18, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    d_field_ResponseOp_response_put(Rest, Z1, Z2, F@_1,
				    TrUserData);
dfp_read_field_def_ResponseOp(<<26, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    d_field_ResponseOp_response_delete_range(Rest, Z1, Z2,
					     F@_1, TrUserData);
dfp_read_field_def_ResponseOp(<<34, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    d_field_ResponseOp_response_txn(Rest, Z1, Z2, F@_1,
				    TrUserData);
dfp_read_field_def_ResponseOp(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{response => F@_1}
    end;
dfp_read_field_def_ResponseOp(Other, Z1, Z2, F@_1,
			      TrUserData) ->
    dg_read_field_def_ResponseOp(Other, Z1, Z2, F@_1,
				 TrUserData).

dg_read_field_def_ResponseOp(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ResponseOp(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
dg_read_field_def_ResponseOp(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ResponseOp_response_range(Rest, 0, 0, F@_1,
					    TrUserData);
      18 ->
	  d_field_ResponseOp_response_put(Rest, 0, 0, F@_1,
					  TrUserData);
      26 ->
	  d_field_ResponseOp_response_delete_range(Rest, 0, 0,
						   F@_1, TrUserData);
      34 ->
	  d_field_ResponseOp_response_txn(Rest, 0, 0, F@_1,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ResponseOp(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_ResponseOp(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_ResponseOp(Rest, 0, 0, F@_1,
						 TrUserData);
	    3 ->
		skip_group_ResponseOp(Rest, Key bsr 3, 0, F@_1,
				      TrUserData);
	    5 -> skip_32_ResponseOp(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_ResponseOp(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{response => F@_1}
    end.

d_field_ResponseOp_response_range(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ResponseOp_response_range(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
d_field_ResponseOp_response_range(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_RangeResponse(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ResponseOp(RestF, 0, 0,
				  case Prev of
				    '$undef' ->
					id({response_range, NewFValue},
					   TrUserData);
				    {response_range, MVPrev} ->
					id({response_range,
					    merge_msg_RangeResponse(MVPrev,
								    NewFValue,
								    TrUserData)},
					   TrUserData);
				    _ ->
					id({response_range, NewFValue},
					   TrUserData)
				  end,
				  TrUserData).

d_field_ResponseOp_response_put(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ResponseOp_response_put(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
d_field_ResponseOp_response_put(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_PutResponse(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ResponseOp(RestF, 0, 0,
				  case Prev of
				    '$undef' ->
					id({response_put, NewFValue},
					   TrUserData);
				    {response_put, MVPrev} ->
					id({response_put,
					    merge_msg_PutResponse(MVPrev,
								  NewFValue,
								  TrUserData)},
					   TrUserData);
				    _ ->
					id({response_put, NewFValue},
					   TrUserData)
				  end,
				  TrUserData).

d_field_ResponseOp_response_delete_range(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ResponseOp_response_delete_range(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
d_field_ResponseOp_response_delete_range(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_DeleteRangeResponse(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ResponseOp(RestF, 0, 0,
				  case Prev of
				    '$undef' ->
					id({response_delete_range, NewFValue},
					   TrUserData);
				    {response_delete_range, MVPrev} ->
					id({response_delete_range,
					    merge_msg_DeleteRangeResponse(MVPrev,
									  NewFValue,
									  TrUserData)},
					   TrUserData);
				    _ ->
					id({response_delete_range, NewFValue},
					   TrUserData)
				  end,
				  TrUserData).

d_field_ResponseOp_response_txn(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ResponseOp_response_txn(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
d_field_ResponseOp_response_txn(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_TxnResponse(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ResponseOp(RestF, 0, 0,
				  case Prev of
				    '$undef' ->
					id({response_txn, NewFValue},
					   TrUserData);
				    {response_txn, MVPrev} ->
					id({response_txn,
					    merge_msg_TxnResponse(MVPrev,
								  NewFValue,
								  TrUserData)},
					   TrUserData);
				    _ ->
					id({response_txn, NewFValue},
					   TrUserData)
				  end,
				  TrUserData).

skip_varint_ResponseOp(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    skip_varint_ResponseOp(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_ResponseOp(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    dfp_read_field_def_ResponseOp(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_length_delimited_ResponseOp(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_ResponseOp(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_ResponseOp(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ResponseOp(Rest2, 0, 0, F@_1,
				  TrUserData).

skip_group_ResponseOp(Bin, FNum, Z2, F@_1,
		      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ResponseOp(Rest, 0, Z2, F@_1,
				  TrUserData).

skip_32_ResponseOp(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_ResponseOp(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_64_ResponseOp(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_ResponseOp(Rest, Z1, Z2, F@_1,
				  TrUserData).

decode_msg_Compare(Bin, TrUserData) ->
    dfp_read_field_def_Compare(Bin, 0, 0,
			       id('EQUAL', TrUserData),
			       id('VERSION', TrUserData), id(<<>>, TrUserData),
			       id('$undef', TrUserData), id(<<>>, TrUserData),
			       TrUserData).

dfp_read_field_def_Compare(<<8, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Compare_result(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, TrUserData);
dfp_read_field_def_Compare(<<16, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Compare_target(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, TrUserData);
dfp_read_field_def_Compare(<<26, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Compare_key(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, TrUserData);
dfp_read_field_def_Compare(<<32, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Compare_version(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, TrUserData);
dfp_read_field_def_Compare(<<40, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Compare_create_revision(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_Compare(<<48, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Compare_mod_revision(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_Compare(<<58, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Compare_value(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, TrUserData);
dfp_read_field_def_Compare(<<64, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Compare_lease(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, TrUserData);
dfp_read_field_def_Compare(<<130, 4, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Compare_range_end(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_Compare(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   F@_4, F@_5, _) ->
    S1 = #{result => F@_1, target => F@_2, key => F@_3,
	   range_end => F@_5},
    if F@_4 == '$undef' -> S1;
       true -> S1#{target_union => F@_4}
    end;
dfp_read_field_def_Compare(Other, Z1, Z2, F@_1, F@_2,
			   F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_Compare(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_Compare(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Compare(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_Compare(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_Compare_result(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, TrUserData);
      16 ->
	  d_field_Compare_target(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, TrUserData);
      26 ->
	  d_field_Compare_key(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, TrUserData);
      32 ->
	  d_field_Compare_version(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, TrUserData);
      40 ->
	  d_field_Compare_create_revision(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, TrUserData);
      48 ->
	  d_field_Compare_mod_revision(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, TrUserData);
      58 ->
	  d_field_Compare_value(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, TrUserData);
      64 ->
	  d_field_Compare_lease(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, TrUserData);
      514 ->
	  d_field_Compare_range_end(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Compare(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    F@_5, TrUserData);
	    1 ->
		skip_64_Compare(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				F@_5, TrUserData);
	    2 ->
		skip_length_delimited_Compare(Rest, 0, 0, F@_1, F@_2,
					      F@_3, F@_4, F@_5, TrUserData);
	    3 ->
		skip_group_Compare(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_Compare(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				F@_5, TrUserData)
	  end
    end;
dg_read_field_def_Compare(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  F@_4, F@_5, _) ->
    S1 = #{result => F@_1, target => F@_2, key => F@_3,
	   range_end => F@_5},
    if F@_4 == '$undef' -> S1;
       true -> S1#{target_union => F@_4}
    end.

d_field_Compare_result(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Compare_result(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Compare_result(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_Compare.CompareResult'(begin
					     <<Res:32/signed-native>> = <<(X bsl
									     N
									     +
									     Acc):32/unsigned-native>>,
					     id(Res, TrUserData)
					   end),
	    TrUserData),
	 Rest},
    dfp_read_field_def_Compare(RestF, 0, 0, NewFValue, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

d_field_Compare_target(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Compare_target(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Compare_target(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_Compare.CompareTarget'(begin
					     <<Res:32/signed-native>> = <<(X bsl
									     N
									     +
									     Acc):32/unsigned-native>>,
					     id(Res, TrUserData)
					   end),
	    TrUserData),
	 Rest},
    dfp_read_field_def_Compare(RestF, 0, 0, F@_1, NewFValue,
			       F@_3, F@_4, F@_5, TrUserData).

d_field_Compare_key(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Compare_key(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Compare_key(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_Compare(RestF, 0, 0, F@_1, F@_2,
			       NewFValue, F@_4, F@_5, TrUserData).

d_field_Compare_version(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Compare_version(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Compare_version(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_Compare(RestF, 0, 0, F@_1, F@_2,
			       F@_3, id({version, NewFValue}, TrUserData), F@_5,
			       TrUserData).

d_field_Compare_create_revision(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData)
    when N < 57 ->
    d_field_Compare_create_revision(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData);
d_field_Compare_create_revision(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, _, F@_5,
				TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_Compare(RestF, 0, 0, F@_1, F@_2,
			       F@_3,
			       id({create_revision, NewFValue}, TrUserData),
			       F@_5, TrUserData).

d_field_Compare_mod_revision(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Compare_mod_revision(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Compare_mod_revision(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_Compare(RestF, 0, 0, F@_1, F@_2,
			       F@_3, id({mod_revision, NewFValue}, TrUserData),
			       F@_5, TrUserData).

d_field_Compare_value(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Compare_value(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Compare_value(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_Compare(RestF, 0, 0, F@_1, F@_2,
			       F@_3, id({value, NewFValue}, TrUserData), F@_5,
			       TrUserData).

d_field_Compare_lease(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Compare_lease(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Compare_lease(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_Compare(RestF, 0, 0, F@_1, F@_2,
			       F@_3, id({lease, NewFValue}, TrUserData), F@_5,
			       TrUserData).

d_field_Compare_range_end(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Compare_range_end(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Compare_range_end(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_Compare(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, NewFValue, TrUserData).

skip_varint_Compare(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_Compare(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, TrUserData);
skip_varint_Compare(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Compare(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_Compare(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    skip_length_delimited_Compare(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData);
skip_length_delimited_Compare(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
			      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Compare(Rest2, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

skip_group_Compare(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		   F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Compare(Rest, 0, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

skip_32_Compare(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Compare(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

skip_64_Compare(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Compare(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

decode_msg_TxnRequest(Bin, TrUserData) ->
    dfp_read_field_def_TxnRequest(Bin, 0, 0,
				  id([], TrUserData), id([], TrUserData),
				  id([], TrUserData), TrUserData).

dfp_read_field_def_TxnRequest(<<10, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_TxnRequest_compare(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData);
dfp_read_field_def_TxnRequest(<<18, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_TxnRequest_success(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData);
dfp_read_field_def_TxnRequest(<<26, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_TxnRequest_failure(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData);
dfp_read_field_def_TxnRequest(<<>>, 0, 0, R1, R2, R3,
			      TrUserData) ->
    S1 = #{},
    S2 = if R1 == '$undef' -> S1;
	    true -> S1#{compare => lists_reverse(R1, TrUserData)}
	 end,
    S3 = if R2 == '$undef' -> S2;
	    true -> S2#{success => lists_reverse(R2, TrUserData)}
	 end,
    if R3 == '$undef' -> S3;
       true -> S3#{failure => lists_reverse(R3, TrUserData)}
    end;
dfp_read_field_def_TxnRequest(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData) ->
    dg_read_field_def_TxnRequest(Other, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData).

dg_read_field_def_TxnRequest(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_TxnRequest(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_TxnRequest(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_TxnRequest_compare(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
      18 ->
	  d_field_TxnRequest_success(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
      26 ->
	  d_field_TxnRequest_failure(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_TxnRequest(Rest, 0, 0, F@_1, F@_2, F@_3,
				       TrUserData);
	    1 ->
		skip_64_TxnRequest(Rest, 0, 0, F@_1, F@_2, F@_3,
				   TrUserData);
	    2 ->
		skip_length_delimited_TxnRequest(Rest, 0, 0, F@_1, F@_2,
						 F@_3, TrUserData);
	    3 ->
		skip_group_TxnRequest(Rest, Key bsr 3, 0, F@_1, F@_2,
				      F@_3, TrUserData);
	    5 ->
		skip_32_TxnRequest(Rest, 0, 0, F@_1, F@_2, F@_3,
				   TrUserData)
	  end
    end;
dg_read_field_def_TxnRequest(<<>>, 0, 0, R1, R2, R3,
			     TrUserData) ->
    S1 = #{},
    S2 = if R1 == '$undef' -> S1;
	    true -> S1#{compare => lists_reverse(R1, TrUserData)}
	 end,
    S3 = if R2 == '$undef' -> S2;
	    true -> S2#{success => lists_reverse(R2, TrUserData)}
	 end,
    if R3 == '$undef' -> S3;
       true -> S3#{failure => lists_reverse(R3, TrUserData)}
    end.

d_field_TxnRequest_compare(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_TxnRequest_compare(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, TrUserData);
d_field_TxnRequest_compare(<<0:1, X:7, Rest/binary>>, N,
			   Acc, Prev, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_Compare(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_TxnRequest(RestF, 0, 0,
				  cons(NewFValue, Prev, TrUserData), F@_2, F@_3,
				  TrUserData).

d_field_TxnRequest_success(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_TxnRequest_success(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, TrUserData);
d_field_TxnRequest_success(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, Prev, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_RequestOp(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_TxnRequest(RestF, 0, 0, F@_1,
				  cons(NewFValue, Prev, TrUserData), F@_3,
				  TrUserData).

d_field_TxnRequest_failure(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_TxnRequest_failure(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, TrUserData);
d_field_TxnRequest_failure(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_RequestOp(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_TxnRequest(RestF, 0, 0, F@_1, F@_2,
				  cons(NewFValue, Prev, TrUserData),
				  TrUserData).

skip_varint_TxnRequest(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_TxnRequest(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   TrUserData);
skip_varint_TxnRequest(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_TxnRequest(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData).

skip_length_delimited_TxnRequest(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_TxnRequest(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3,
				     TrUserData);
skip_length_delimited_TxnRequest(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TxnRequest(Rest2, 0, 0, F@_1, F@_2,
				  F@_3, TrUserData).

skip_group_TxnRequest(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_TxnRequest(Rest, 0, Z2, F@_1, F@_2,
				  F@_3, TrUserData).

skip_32_TxnRequest(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_TxnRequest(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData).

skip_64_TxnRequest(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_TxnRequest(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData).

decode_msg_TxnResponse(Bin, TrUserData) ->
    dfp_read_field_def_TxnResponse(Bin, 0, 0,
				   id(undefined, TrUserData),
				   id(false, TrUserData), id([], TrUserData),
				   TrUserData).

dfp_read_field_def_TxnResponse(<<10, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_TxnResponse_header(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData);
dfp_read_field_def_TxnResponse(<<16, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_TxnResponse_succeeded(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData);
dfp_read_field_def_TxnResponse(<<26, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_TxnResponse_responses(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData);
dfp_read_field_def_TxnResponse(<<>>, 0, 0, F@_1, F@_2,
			       R1, TrUserData) ->
    S1 = #{succeeded => F@_2},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{header => F@_1}
	 end,
    if R1 == '$undef' -> S2;
       true -> S2#{responses => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_TxnResponse(Other, Z1, Z2, F@_1,
			       F@_2, F@_3, TrUserData) ->
    dg_read_field_def_TxnResponse(Other, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData).

dg_read_field_def_TxnResponse(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_TxnResponse(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_TxnResponse(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_TxnResponse_header(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
      16 ->
	  d_field_TxnResponse_succeeded(Rest, 0, 0, F@_1, F@_2,
					F@_3, TrUserData);
      26 ->
	  d_field_TxnResponse_responses(Rest, 0, 0, F@_1, F@_2,
					F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_TxnResponse(Rest, 0, 0, F@_1, F@_2, F@_3,
					TrUserData);
	    1 ->
		skip_64_TxnResponse(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
	    2 ->
		skip_length_delimited_TxnResponse(Rest, 0, 0, F@_1,
						  F@_2, F@_3, TrUserData);
	    3 ->
		skip_group_TxnResponse(Rest, Key bsr 3, 0, F@_1, F@_2,
				       F@_3, TrUserData);
	    5 ->
		skip_32_TxnResponse(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData)
	  end
    end;
dg_read_field_def_TxnResponse(<<>>, 0, 0, F@_1, F@_2,
			      R1, TrUserData) ->
    S1 = #{succeeded => F@_2},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{header => F@_1}
	 end,
    if R1 == '$undef' -> S2;
       true -> S2#{responses => lists_reverse(R1, TrUserData)}
    end.

d_field_TxnResponse_header(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_TxnResponse_header(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, TrUserData);
d_field_TxnResponse_header(<<0:1, X:7, Rest/binary>>, N,
			   Acc, Prev, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ResponseHeader(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_TxnResponse(RestF, 0, 0,
				   if Prev == '$undef' -> NewFValue;
				      true ->
					  merge_msg_ResponseHeader(Prev,
								   NewFValue,
								   TrUserData)
				   end,
				   F@_2, F@_3, TrUserData).

d_field_TxnResponse_succeeded(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_TxnResponse_succeeded(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_TxnResponse_succeeded(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_TxnResponse(RestF, 0, 0, F@_1,
				   NewFValue, F@_3, TrUserData).

d_field_TxnResponse_responses(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_TxnResponse_responses(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_TxnResponse_responses(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ResponseOp(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_TxnResponse(RestF, 0, 0, F@_1, F@_2,
				   cons(NewFValue, Prev, TrUserData),
				   TrUserData).

skip_varint_TxnResponse(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_TxnResponse(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData);
skip_varint_TxnResponse(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_TxnResponse(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData).

skip_length_delimited_TxnResponse(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_TxnResponse(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3,
				      TrUserData);
skip_length_delimited_TxnResponse(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TxnResponse(Rest2, 0, 0, F@_1, F@_2,
				   F@_3, TrUserData).

skip_group_TxnResponse(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_TxnResponse(Rest, 0, Z2, F@_1, F@_2,
				   F@_3, TrUserData).

skip_32_TxnResponse(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_TxnResponse(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData).

skip_64_TxnResponse(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_TxnResponse(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData).

decode_msg_CompactionRequest(Bin, TrUserData) ->
    dfp_read_field_def_CompactionRequest(Bin, 0, 0,
					 id(0, TrUserData),
					 id(false, TrUserData), TrUserData).

dfp_read_field_def_CompactionRequest(<<8, Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_CompactionRequest_revision(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData);
dfp_read_field_def_CompactionRequest(<<16,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_CompactionRequest_physical(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData);
dfp_read_field_def_CompactionRequest(<<>>, 0, 0, F@_1,
				     F@_2, _) ->
    #{revision => F@_1, physical => F@_2};
dfp_read_field_def_CompactionRequest(Other, Z1, Z2,
				     F@_1, F@_2, TrUserData) ->
    dg_read_field_def_CompactionRequest(Other, Z1, Z2, F@_1,
					F@_2, TrUserData).

dg_read_field_def_CompactionRequest(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_CompactionRequest(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_CompactionRequest(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_CompactionRequest_revision(Rest, 0, 0, F@_1,
					     F@_2, TrUserData);
      16 ->
	  d_field_CompactionRequest_physical(Rest, 0, 0, F@_1,
					     F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_CompactionRequest(Rest, 0, 0, F@_1, F@_2,
					      TrUserData);
	    1 ->
		skip_64_CompactionRequest(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
	    2 ->
		skip_length_delimited_CompactionRequest(Rest, 0, 0,
							F@_1, F@_2, TrUserData);
	    3 ->
		skip_group_CompactionRequest(Rest, Key bsr 3, 0, F@_1,
					     F@_2, TrUserData);
	    5 ->
		skip_32_CompactionRequest(Rest, 0, 0, F@_1, F@_2,
					  TrUserData)
	  end
    end;
dg_read_field_def_CompactionRequest(<<>>, 0, 0, F@_1,
				    F@_2, _) ->
    #{revision => F@_1, physical => F@_2}.

d_field_CompactionRequest_revision(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_CompactionRequest_revision(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_CompactionRequest_revision(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_CompactionRequest(RestF, 0, 0,
					 NewFValue, F@_2, TrUserData).

d_field_CompactionRequest_physical(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_CompactionRequest_physical(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_CompactionRequest_physical(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_CompactionRequest(RestF, 0, 0, F@_1,
					 NewFValue, TrUserData).

skip_varint_CompactionRequest(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_CompactionRequest(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData);
skip_varint_CompactionRequest(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_CompactionRequest(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

skip_length_delimited_CompactionRequest(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_CompactionRequest(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2,
					    TrUserData);
skip_length_delimited_CompactionRequest(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CompactionRequest(Rest2, 0, 0, F@_1,
					 F@_2, TrUserData).

skip_group_CompactionRequest(Bin, FNum, Z2, F@_1, F@_2,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_CompactionRequest(Rest, 0, Z2, F@_1,
					 F@_2, TrUserData).

skip_32_CompactionRequest(<<_:32, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_CompactionRequest(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

skip_64_CompactionRequest(<<_:64, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_CompactionRequest(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

decode_msg_CompactionResponse(Bin, TrUserData) ->
    dfp_read_field_def_CompactionResponse(Bin, 0, 0,
					  id(undefined, TrUserData),
					  TrUserData).

dfp_read_field_def_CompactionResponse(<<10,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    d_field_CompactionResponse_header(Rest, Z1, Z2, F@_1,
				      TrUserData);
dfp_read_field_def_CompactionResponse(<<>>, 0, 0, F@_1,
				      _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end;
dfp_read_field_def_CompactionResponse(Other, Z1, Z2,
				      F@_1, TrUserData) ->
    dg_read_field_def_CompactionResponse(Other, Z1, Z2,
					 F@_1, TrUserData).

dg_read_field_def_CompactionResponse(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_CompactionResponse(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_CompactionResponse(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_CompactionResponse_header(Rest, 0, 0, F@_1,
					    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_CompactionResponse(Rest, 0, 0, F@_1,
					       TrUserData);
	    1 ->
		skip_64_CompactionResponse(Rest, 0, 0, F@_1,
					   TrUserData);
	    2 ->
		skip_length_delimited_CompactionResponse(Rest, 0, 0,
							 F@_1, TrUserData);
	    3 ->
		skip_group_CompactionResponse(Rest, Key bsr 3, 0, F@_1,
					      TrUserData);
	    5 ->
		skip_32_CompactionResponse(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_CompactionResponse(<<>>, 0, 0, F@_1,
				     _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end.

d_field_CompactionResponse_header(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_CompactionResponse_header(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
d_field_CompactionResponse_header(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ResponseHeader(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_CompactionResponse(RestF, 0, 0,
					  if Prev == '$undef' -> NewFValue;
					     true ->
						 merge_msg_ResponseHeader(Prev,
									  NewFValue,
									  TrUserData)
					  end,
					  TrUserData).

skip_varint_CompactionResponse(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    skip_varint_CompactionResponse(Rest, Z1, Z2, F@_1,
				   TrUserData);
skip_varint_CompactionResponse(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_CompactionResponse(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_length_delimited_CompactionResponse(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_CompactionResponse(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_CompactionResponse(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CompactionResponse(Rest2, 0, 0, F@_1,
					  TrUserData).

skip_group_CompactionResponse(Bin, FNum, Z2, F@_1,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_CompactionResponse(Rest, 0, Z2, F@_1,
					  TrUserData).

skip_32_CompactionResponse(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_CompactionResponse(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_64_CompactionResponse(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_CompactionResponse(Rest, Z1, Z2,
					  F@_1, TrUserData).

decode_msg_HashRequest(Bin, TrUserData) ->
    dfp_read_field_def_HashRequest(Bin, 0, 0, TrUserData).

dfp_read_field_def_HashRequest(<<>>, 0, 0, _) -> #{};
dfp_read_field_def_HashRequest(Other, Z1, Z2,
			       TrUserData) ->
    dg_read_field_def_HashRequest(Other, Z1, Z2,
				  TrUserData).

dg_read_field_def_HashRequest(<<1:1, X:7, Rest/binary>>,
			      N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_HashRequest(Rest, N + 7,
				  X bsl N + Acc, TrUserData);
dg_read_field_def_HashRequest(<<0:1, X:7, Rest/binary>>,
			      N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_HashRequest(Rest, 0, 0, TrUserData);
      1 -> skip_64_HashRequest(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_HashRequest(Rest, 0, 0,
					    TrUserData);
      3 ->
	  skip_group_HashRequest(Rest, Key bsr 3, 0, TrUserData);
      5 -> skip_32_HashRequest(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_HashRequest(<<>>, 0, 0, _) -> #{}.

skip_varint_HashRequest(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, TrUserData) ->
    skip_varint_HashRequest(Rest, Z1, Z2, TrUserData);
skip_varint_HashRequest(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, TrUserData) ->
    dfp_read_field_def_HashRequest(Rest, Z1, Z2,
				   TrUserData).

skip_length_delimited_HashRequest(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_HashRequest(Rest, N + 7,
				      X bsl N + Acc, TrUserData);
skip_length_delimited_HashRequest(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_HashRequest(Rest2, 0, 0, TrUserData).

skip_group_HashRequest(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_HashRequest(Rest, 0, Z2, TrUserData).

skip_32_HashRequest(<<_:32, Rest/binary>>, Z1, Z2,
		    TrUserData) ->
    dfp_read_field_def_HashRequest(Rest, Z1, Z2,
				   TrUserData).

skip_64_HashRequest(<<_:64, Rest/binary>>, Z1, Z2,
		    TrUserData) ->
    dfp_read_field_def_HashRequest(Rest, Z1, Z2,
				   TrUserData).

decode_msg_HashKVRequest(Bin, TrUserData) ->
    dfp_read_field_def_HashKVRequest(Bin, 0, 0,
				     id(0, TrUserData), TrUserData).

dfp_read_field_def_HashKVRequest(<<8, Rest/binary>>, Z1,
				 Z2, F@_1, TrUserData) ->
    d_field_HashKVRequest_revision(Rest, Z1, Z2, F@_1,
				   TrUserData);
dfp_read_field_def_HashKVRequest(<<>>, 0, 0, F@_1, _) ->
    #{revision => F@_1};
dfp_read_field_def_HashKVRequest(Other, Z1, Z2, F@_1,
				 TrUserData) ->
    dg_read_field_def_HashKVRequest(Other, Z1, Z2, F@_1,
				    TrUserData).

dg_read_field_def_HashKVRequest(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_HashKVRequest(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_HashKVRequest(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_HashKVRequest_revision(Rest, 0, 0, F@_1,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_HashKVRequest(Rest, 0, 0, F@_1, TrUserData);
	    1 ->
		skip_64_HashKVRequest(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_HashKVRequest(Rest, 0, 0, F@_1,
						    TrUserData);
	    3 ->
		skip_group_HashKVRequest(Rest, Key bsr 3, 0, F@_1,
					 TrUserData);
	    5 -> skip_32_HashKVRequest(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_HashKVRequest(<<>>, 0, 0, F@_1, _) ->
    #{revision => F@_1}.

d_field_HashKVRequest_revision(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_HashKVRequest_revision(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
d_field_HashKVRequest_revision(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_HashKVRequest(RestF, 0, 0, NewFValue,
				     TrUserData).

skip_varint_HashKVRequest(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, TrUserData) ->
    skip_varint_HashKVRequest(Rest, Z1, Z2, F@_1,
			      TrUserData);
skip_varint_HashKVRequest(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, TrUserData) ->
    dfp_read_field_def_HashKVRequest(Rest, Z1, Z2, F@_1,
				     TrUserData).

skip_length_delimited_HashKVRequest(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_HashKVRequest(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_HashKVRequest(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_HashKVRequest(Rest2, 0, 0, F@_1,
				     TrUserData).

skip_group_HashKVRequest(Bin, FNum, Z2, F@_1,
			 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_HashKVRequest(Rest, 0, Z2, F@_1,
				     TrUserData).

skip_32_HashKVRequest(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    dfp_read_field_def_HashKVRequest(Rest, Z1, Z2, F@_1,
				     TrUserData).

skip_64_HashKVRequest(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    dfp_read_field_def_HashKVRequest(Rest, Z1, Z2, F@_1,
				     TrUserData).

decode_msg_HashKVResponse(Bin, TrUserData) ->
    dfp_read_field_def_HashKVResponse(Bin, 0, 0,
				      id(undefined, TrUserData),
				      id(0, TrUserData), id(0, TrUserData),
				      TrUserData).

dfp_read_field_def_HashKVResponse(<<10, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_HashKVResponse_header(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData);
dfp_read_field_def_HashKVResponse(<<16, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_HashKVResponse_hash(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData);
dfp_read_field_def_HashKVResponse(<<24, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_HashKVResponse_compact_revision(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_HashKVResponse(<<>>, 0, 0, F@_1,
				  F@_2, F@_3, _) ->
    S1 = #{hash => F@_2, compact_revision => F@_3},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end;
dfp_read_field_def_HashKVResponse(Other, Z1, Z2, F@_1,
				  F@_2, F@_3, TrUserData) ->
    dg_read_field_def_HashKVResponse(Other, Z1, Z2, F@_1,
				     F@_2, F@_3, TrUserData).

dg_read_field_def_HashKVResponse(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_HashKVResponse(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3,
				     TrUserData);
dg_read_field_def_HashKVResponse(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_HashKVResponse_header(Rest, 0, 0, F@_1, F@_2,
					F@_3, TrUserData);
      16 ->
	  d_field_HashKVResponse_hash(Rest, 0, 0, F@_1, F@_2,
				      F@_3, TrUserData);
      24 ->
	  d_field_HashKVResponse_compact_revision(Rest, 0, 0,
						  F@_1, F@_2, F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_HashKVResponse(Rest, 0, 0, F@_1, F@_2, F@_3,
					   TrUserData);
	    1 ->
		skip_64_HashKVResponse(Rest, 0, 0, F@_1, F@_2, F@_3,
				       TrUserData);
	    2 ->
		skip_length_delimited_HashKVResponse(Rest, 0, 0, F@_1,
						     F@_2, F@_3, TrUserData);
	    3 ->
		skip_group_HashKVResponse(Rest, Key bsr 3, 0, F@_1,
					  F@_2, F@_3, TrUserData);
	    5 ->
		skip_32_HashKVResponse(Rest, 0, 0, F@_1, F@_2, F@_3,
				       TrUserData)
	  end
    end;
dg_read_field_def_HashKVResponse(<<>>, 0, 0, F@_1, F@_2,
				 F@_3, _) ->
    S1 = #{hash => F@_2, compact_revision => F@_3},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end.

d_field_HashKVResponse_header(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_HashKVResponse_header(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_HashKVResponse_header(<<0:1, X:7, Rest/binary>>,
			      N, Acc, Prev, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ResponseHeader(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_HashKVResponse(RestF, 0, 0,
				      if Prev == '$undef' -> NewFValue;
					 true ->
					     merge_msg_ResponseHeader(Prev,
								      NewFValue,
								      TrUserData)
				      end,
				      F@_2, F@_3, TrUserData).

d_field_HashKVResponse_hash(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_HashKVResponse_hash(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, TrUserData);
d_field_HashKVResponse_hash(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_HashKVResponse(RestF, 0, 0, F@_1,
				      NewFValue, F@_3, TrUserData).

d_field_HashKVResponse_compact_revision(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_HashKVResponse_compact_revision(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    TrUserData);
d_field_HashKVResponse_compact_revision(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_HashKVResponse(RestF, 0, 0, F@_1,
				      F@_2, NewFValue, TrUserData).

skip_varint_HashKVResponse(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_HashKVResponse(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData);
skip_varint_HashKVResponse(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_HashKVResponse(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, TrUserData).

skip_length_delimited_HashKVResponse(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_HashKVResponse(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3,
					 TrUserData);
skip_length_delimited_HashKVResponse(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_HashKVResponse(Rest2, 0, 0, F@_1,
				      F@_2, F@_3, TrUserData).

skip_group_HashKVResponse(Bin, FNum, Z2, F@_1, F@_2,
			  F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_HashKVResponse(Rest, 0, Z2, F@_1,
				      F@_2, F@_3, TrUserData).

skip_32_HashKVResponse(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_HashKVResponse(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, TrUserData).

skip_64_HashKVResponse(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_HashKVResponse(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, TrUserData).

decode_msg_HashResponse(Bin, TrUserData) ->
    dfp_read_field_def_HashResponse(Bin, 0, 0,
				    id(undefined, TrUserData),
				    id(0, TrUserData), TrUserData).

dfp_read_field_def_HashResponse(<<10, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_HashResponse_header(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData);
dfp_read_field_def_HashResponse(<<16, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_HashResponse_hash(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_HashResponse(<<>>, 0, 0, F@_1, F@_2,
				_) ->
    S1 = #{hash => F@_2},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end;
dfp_read_field_def_HashResponse(Other, Z1, Z2, F@_1,
				F@_2, TrUserData) ->
    dg_read_field_def_HashResponse(Other, Z1, Z2, F@_1,
				   F@_2, TrUserData).

dg_read_field_def_HashResponse(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_HashResponse(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_HashResponse(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_HashResponse_header(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
      16 ->
	  d_field_HashResponse_hash(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_HashResponse(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
	    1 ->
		skip_64_HashResponse(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    2 ->
		skip_length_delimited_HashResponse(Rest, 0, 0, F@_1,
						   F@_2, TrUserData);
	    3 ->
		skip_group_HashResponse(Rest, Key bsr 3, 0, F@_1, F@_2,
					TrUserData);
	    5 ->
		skip_32_HashResponse(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_HashResponse(<<>>, 0, 0, F@_1, F@_2,
			       _) ->
    S1 = #{hash => F@_2},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end.

d_field_HashResponse_header(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_HashResponse_header(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
d_field_HashResponse_header(<<0:1, X:7, Rest/binary>>,
			    N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ResponseHeader(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_HashResponse(RestF, 0, 0,
				    if Prev == '$undef' -> NewFValue;
				       true ->
					   merge_msg_ResponseHeader(Prev,
								    NewFValue,
								    TrUserData)
				    end,
				    F@_2, TrUserData).

d_field_HashResponse_hash(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_HashResponse_hash(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
d_field_HashResponse_hash(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_HashResponse(RestF, 0, 0, F@_1,
				    NewFValue, TrUserData).

skip_varint_HashResponse(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_HashResponse(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
skip_varint_HashResponse(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_HashResponse(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_length_delimited_HashResponse(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_HashResponse(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_HashResponse(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_HashResponse(Rest2, 0, 0, F@_1, F@_2,
				    TrUserData).

skip_group_HashResponse(Bin, FNum, Z2, F@_1, F@_2,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_HashResponse(Rest, 0, Z2, F@_1, F@_2,
				    TrUserData).

skip_32_HashResponse(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_HashResponse(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_64_HashResponse(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_HashResponse(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

decode_msg_SnapshotRequest(Bin, TrUserData) ->
    dfp_read_field_def_SnapshotRequest(Bin, 0, 0,
				       TrUserData).

dfp_read_field_def_SnapshotRequest(<<>>, 0, 0, _) ->
    #{};
dfp_read_field_def_SnapshotRequest(Other, Z1, Z2,
				   TrUserData) ->
    dg_read_field_def_SnapshotRequest(Other, Z1, Z2,
				      TrUserData).

dg_read_field_def_SnapshotRequest(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_SnapshotRequest(Rest, N + 7,
				      X bsl N + Acc, TrUserData);
dg_read_field_def_SnapshotRequest(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_SnapshotRequest(Rest, 0, 0, TrUserData);
      1 -> skip_64_SnapshotRequest(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_SnapshotRequest(Rest, 0, 0,
						TrUserData);
      3 ->
	  skip_group_SnapshotRequest(Rest, Key bsr 3, 0,
				     TrUserData);
      5 -> skip_32_SnapshotRequest(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_SnapshotRequest(<<>>, 0, 0, _) -> #{}.

skip_varint_SnapshotRequest(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, TrUserData) ->
    skip_varint_SnapshotRequest(Rest, Z1, Z2, TrUserData);
skip_varint_SnapshotRequest(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, TrUserData) ->
    dfp_read_field_def_SnapshotRequest(Rest, Z1, Z2,
				       TrUserData).

skip_length_delimited_SnapshotRequest(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_SnapshotRequest(Rest, N + 7,
					  X bsl N + Acc, TrUserData);
skip_length_delimited_SnapshotRequest(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_SnapshotRequest(Rest2, 0, 0,
				       TrUserData).

skip_group_SnapshotRequest(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_SnapshotRequest(Rest, 0, Z2,
				       TrUserData).

skip_32_SnapshotRequest(<<_:32, Rest/binary>>, Z1, Z2,
			TrUserData) ->
    dfp_read_field_def_SnapshotRequest(Rest, Z1, Z2,
				       TrUserData).

skip_64_SnapshotRequest(<<_:64, Rest/binary>>, Z1, Z2,
			TrUserData) ->
    dfp_read_field_def_SnapshotRequest(Rest, Z1, Z2,
				       TrUserData).

decode_msg_SnapshotResponse(Bin, TrUserData) ->
    dfp_read_field_def_SnapshotResponse(Bin, 0, 0,
					id(undefined, TrUserData),
					id(0, TrUserData), id(<<>>, TrUserData),
					TrUserData).

dfp_read_field_def_SnapshotResponse(<<10, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_SnapshotResponse_header(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData);
dfp_read_field_def_SnapshotResponse(<<16, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_SnapshotResponse_remaining_bytes(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_SnapshotResponse(<<26, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_SnapshotResponse_blob(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData);
dfp_read_field_def_SnapshotResponse(<<>>, 0, 0, F@_1,
				    F@_2, F@_3, _) ->
    S1 = #{remaining_bytes => F@_2, blob => F@_3},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end;
dfp_read_field_def_SnapshotResponse(Other, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData) ->
    dg_read_field_def_SnapshotResponse(Other, Z1, Z2, F@_1,
				       F@_2, F@_3, TrUserData).

dg_read_field_def_SnapshotResponse(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_SnapshotResponse(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3,
				       TrUserData);
dg_read_field_def_SnapshotResponse(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_SnapshotResponse_header(Rest, 0, 0, F@_1, F@_2,
					  F@_3, TrUserData);
      16 ->
	  d_field_SnapshotResponse_remaining_bytes(Rest, 0, 0,
						   F@_1, F@_2, F@_3,
						   TrUserData);
      26 ->
	  d_field_SnapshotResponse_blob(Rest, 0, 0, F@_1, F@_2,
					F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_SnapshotResponse(Rest, 0, 0, F@_1, F@_2,
					     F@_3, TrUserData);
	    1 ->
		skip_64_SnapshotResponse(Rest, 0, 0, F@_1, F@_2, F@_3,
					 TrUserData);
	    2 ->
		skip_length_delimited_SnapshotResponse(Rest, 0, 0, F@_1,
						       F@_2, F@_3, TrUserData);
	    3 ->
		skip_group_SnapshotResponse(Rest, Key bsr 3, 0, F@_1,
					    F@_2, F@_3, TrUserData);
	    5 ->
		skip_32_SnapshotResponse(Rest, 0, 0, F@_1, F@_2, F@_3,
					 TrUserData)
	  end
    end;
dg_read_field_def_SnapshotResponse(<<>>, 0, 0, F@_1,
				   F@_2, F@_3, _) ->
    S1 = #{remaining_bytes => F@_2, blob => F@_3},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end.

d_field_SnapshotResponse_header(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_SnapshotResponse_header(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3,
				    TrUserData);
d_field_SnapshotResponse_header(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, Prev, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ResponseHeader(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_SnapshotResponse(RestF, 0, 0,
					if Prev == '$undef' -> NewFValue;
					   true ->
					       merge_msg_ResponseHeader(Prev,
									NewFValue,
									TrUserData)
					end,
					F@_2, F@_3, TrUserData).

d_field_SnapshotResponse_remaining_bytes(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_SnapshotResponse_remaining_bytes(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     TrUserData);
d_field_SnapshotResponse_remaining_bytes(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_SnapshotResponse(RestF, 0, 0, F@_1,
					NewFValue, F@_3, TrUserData).

d_field_SnapshotResponse_blob(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_SnapshotResponse_blob(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_SnapshotResponse_blob(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_SnapshotResponse(RestF, 0, 0, F@_1,
					F@_2, NewFValue, TrUserData).

skip_varint_SnapshotResponse(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_SnapshotResponse(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData);
skip_varint_SnapshotResponse(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_SnapshotResponse(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, TrUserData).

skip_length_delimited_SnapshotResponse(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_SnapshotResponse(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   TrUserData);
skip_length_delimited_SnapshotResponse(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_SnapshotResponse(Rest2, 0, 0, F@_1,
					F@_2, F@_3, TrUserData).

skip_group_SnapshotResponse(Bin, FNum, Z2, F@_1, F@_2,
			    F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_SnapshotResponse(Rest, 0, Z2, F@_1,
					F@_2, F@_3, TrUserData).

skip_32_SnapshotResponse(<<_:32, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_SnapshotResponse(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, TrUserData).

skip_64_SnapshotResponse(<<_:64, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_SnapshotResponse(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, TrUserData).

decode_msg_WatchRequest(Bin, TrUserData) ->
    dfp_read_field_def_WatchRequest(Bin, 0, 0,
				    id('$undef', TrUserData), TrUserData).

dfp_read_field_def_WatchRequest(<<10, Rest/binary>>, Z1,
				Z2, F@_1, TrUserData) ->
    d_field_WatchRequest_create_request(Rest, Z1, Z2, F@_1,
					TrUserData);
dfp_read_field_def_WatchRequest(<<18, Rest/binary>>, Z1,
				Z2, F@_1, TrUserData) ->
    d_field_WatchRequest_cancel_request(Rest, Z1, Z2, F@_1,
					TrUserData);
dfp_read_field_def_WatchRequest(<<26, Rest/binary>>, Z1,
				Z2, F@_1, TrUserData) ->
    d_field_WatchRequest_progress_request(Rest, Z1, Z2,
					  F@_1, TrUserData);
dfp_read_field_def_WatchRequest(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{request_union => F@_1}
    end;
dfp_read_field_def_WatchRequest(Other, Z1, Z2, F@_1,
				TrUserData) ->
    dg_read_field_def_WatchRequest(Other, Z1, Z2, F@_1,
				   TrUserData).

dg_read_field_def_WatchRequest(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_WatchRequest(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_WatchRequest(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_WatchRequest_create_request(Rest, 0, 0, F@_1,
					      TrUserData);
      18 ->
	  d_field_WatchRequest_cancel_request(Rest, 0, 0, F@_1,
					      TrUserData);
      26 ->
	  d_field_WatchRequest_progress_request(Rest, 0, 0, F@_1,
						TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_WatchRequest(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_WatchRequest(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_WatchRequest(Rest, 0, 0, F@_1,
						   TrUserData);
	    3 ->
		skip_group_WatchRequest(Rest, Key bsr 3, 0, F@_1,
					TrUserData);
	    5 -> skip_32_WatchRequest(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_WatchRequest(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{request_union => F@_1}
    end.

d_field_WatchRequest_create_request(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_WatchRequest_create_request(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
d_field_WatchRequest_create_request(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_WatchCreateRequest(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_WatchRequest(RestF, 0, 0,
				    case Prev of
				      '$undef' ->
					  id({create_request, NewFValue},
					     TrUserData);
				      {create_request, MVPrev} ->
					  id({create_request,
					      merge_msg_WatchCreateRequest(MVPrev,
									   NewFValue,
									   TrUserData)},
					     TrUserData);
				      _ ->
					  id({create_request, NewFValue},
					     TrUserData)
				    end,
				    TrUserData).

d_field_WatchRequest_cancel_request(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_WatchRequest_cancel_request(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
d_field_WatchRequest_cancel_request(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_WatchCancelRequest(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_WatchRequest(RestF, 0, 0,
				    case Prev of
				      '$undef' ->
					  id({cancel_request, NewFValue},
					     TrUserData);
				      {cancel_request, MVPrev} ->
					  id({cancel_request,
					      merge_msg_WatchCancelRequest(MVPrev,
									   NewFValue,
									   TrUserData)},
					     TrUserData);
				      _ ->
					  id({cancel_request, NewFValue},
					     TrUserData)
				    end,
				    TrUserData).

d_field_WatchRequest_progress_request(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_WatchRequest_progress_request(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
d_field_WatchRequest_progress_request(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_WatchProgressRequest(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_WatchRequest(RestF, 0, 0,
				    case Prev of
				      '$undef' ->
					  id({progress_request, NewFValue},
					     TrUserData);
				      {progress_request, MVPrev} ->
					  id({progress_request,
					      merge_msg_WatchProgressRequest(MVPrev,
									     NewFValue,
									     TrUserData)},
					     TrUserData);
				      _ ->
					  id({progress_request, NewFValue},
					     TrUserData)
				    end,
				    TrUserData).

skip_varint_WatchRequest(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, TrUserData) ->
    skip_varint_WatchRequest(Rest, Z1, Z2, F@_1,
			     TrUserData);
skip_varint_WatchRequest(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, TrUserData) ->
    dfp_read_field_def_WatchRequest(Rest, Z1, Z2, F@_1,
				    TrUserData).

skip_length_delimited_WatchRequest(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_WatchRequest(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_WatchRequest(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_WatchRequest(Rest2, 0, 0, F@_1,
				    TrUserData).

skip_group_WatchRequest(Bin, FNum, Z2, F@_1,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_WatchRequest(Rest, 0, Z2, F@_1,
				    TrUserData).

skip_32_WatchRequest(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_WatchRequest(Rest, Z1, Z2, F@_1,
				    TrUserData).

skip_64_WatchRequest(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_WatchRequest(Rest, Z1, Z2, F@_1,
				    TrUserData).

decode_msg_WatchCreateRequest(Bin, TrUserData) ->
    dfp_read_field_def_WatchCreateRequest(Bin, 0, 0,
					  id(<<>>, TrUserData),
					  id(<<>>, TrUserData),
					  id(0, TrUserData),
					  id(false, TrUserData),
					  id([], TrUserData),
					  id(false, TrUserData),
					  id(0, TrUserData),
					  id(false, TrUserData), TrUserData).

dfp_read_field_def_WatchCreateRequest(<<10,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, TrUserData) ->
    d_field_WatchCreateRequest_key(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				   TrUserData);
dfp_read_field_def_WatchCreateRequest(<<18,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, TrUserData) ->
    d_field_WatchCreateRequest_range_end(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					 F@_8, TrUserData);
dfp_read_field_def_WatchCreateRequest(<<24,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, TrUserData) ->
    d_field_WatchCreateRequest_start_revision(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, F@_8, TrUserData);
dfp_read_field_def_WatchCreateRequest(<<32,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, TrUserData) ->
    d_field_WatchCreateRequest_progress_notify(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, F@_8, TrUserData);
dfp_read_field_def_WatchCreateRequest(<<42,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, TrUserData) ->
    d_pfield_WatchCreateRequest_filters(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					F@_8, TrUserData);
dfp_read_field_def_WatchCreateRequest(<<40,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, TrUserData) ->
    d_field_WatchCreateRequest_filters(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       TrUserData);
dfp_read_field_def_WatchCreateRequest(<<48,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, TrUserData) ->
    d_field_WatchCreateRequest_prev_kv(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       TrUserData);
dfp_read_field_def_WatchCreateRequest(<<56,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, TrUserData) ->
    d_field_WatchCreateRequest_watch_id(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					F@_8, TrUserData);
dfp_read_field_def_WatchCreateRequest(<<64,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, TrUserData) ->
    d_field_WatchCreateRequest_fragment(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					F@_8, TrUserData);
dfp_read_field_def_WatchCreateRequest(<<>>, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, R1, F@_6, F@_7, F@_8,
				      TrUserData) ->
    #{key => F@_1, range_end => F@_2,
      start_revision => F@_3, progress_notify => F@_4,
      filters => lists_reverse(R1, TrUserData),
      prev_kv => F@_6, watch_id => F@_7, fragment => F@_8};
dfp_read_field_def_WatchCreateRequest(Other, Z1, Z2,
				      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				      F@_8, TrUserData) ->
    dg_read_field_def_WatchCreateRequest(Other, Z1, Z2,
					 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					 F@_7, F@_8, TrUserData).

dg_read_field_def_WatchCreateRequest(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_WatchCreateRequest(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, F@_6, F@_7, F@_8, TrUserData);
dg_read_field_def_WatchCreateRequest(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_WatchCreateRequest_key(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					 TrUserData);
      18 ->
	  d_field_WatchCreateRequest_range_end(Rest, 0, 0, F@_1,
					       F@_2, F@_3, F@_4, F@_5, F@_6,
					       F@_7, F@_8, TrUserData);
      24 ->
	  d_field_WatchCreateRequest_start_revision(Rest, 0, 0,
						    F@_1, F@_2, F@_3, F@_4,
						    F@_5, F@_6, F@_7, F@_8,
						    TrUserData);
      32 ->
	  d_field_WatchCreateRequest_progress_notify(Rest, 0, 0,
						     F@_1, F@_2, F@_3, F@_4,
						     F@_5, F@_6, F@_7, F@_8,
						     TrUserData);
      42 ->
	  d_pfield_WatchCreateRequest_filters(Rest, 0, 0, F@_1,
					      F@_2, F@_3, F@_4, F@_5, F@_6,
					      F@_7, F@_8, TrUserData);
      40 ->
	  d_field_WatchCreateRequest_filters(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					     F@_8, TrUserData);
      48 ->
	  d_field_WatchCreateRequest_prev_kv(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					     F@_8, TrUserData);
      56 ->
	  d_field_WatchCreateRequest_watch_id(Rest, 0, 0, F@_1,
					      F@_2, F@_3, F@_4, F@_5, F@_6,
					      F@_7, F@_8, TrUserData);
      64 ->
	  d_field_WatchCreateRequest_fragment(Rest, 0, 0, F@_1,
					      F@_2, F@_3, F@_4, F@_5, F@_6,
					      F@_7, F@_8, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_WatchCreateRequest(Rest, 0, 0, F@_1, F@_2,
					       F@_3, F@_4, F@_5, F@_6, F@_7,
					       F@_8, TrUserData);
	    1 ->
		skip_64_WatchCreateRequest(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, F@_5, F@_6, F@_7, F@_8,
					   TrUserData);
	    2 ->
		skip_length_delimited_WatchCreateRequest(Rest, 0, 0,
							 F@_1, F@_2, F@_3, F@_4,
							 F@_5, F@_6, F@_7, F@_8,
							 TrUserData);
	    3 ->
		skip_group_WatchCreateRequest(Rest, Key bsr 3, 0, F@_1,
					      F@_2, F@_3, F@_4, F@_5, F@_6,
					      F@_7, F@_8, TrUserData);
	    5 ->
		skip_32_WatchCreateRequest(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, F@_5, F@_6, F@_7, F@_8,
					   TrUserData)
	  end
    end;
dg_read_field_def_WatchCreateRequest(<<>>, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, R1, F@_6, F@_7, F@_8,
				     TrUserData) ->
    #{key => F@_1, range_end => F@_2,
      start_revision => F@_3, progress_notify => F@_4,
      filters => lists_reverse(R1, TrUserData),
      prev_kv => F@_6, watch_id => F@_7, fragment => F@_8}.

d_field_WatchCreateRequest_key(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, TrUserData)
    when N < 57 ->
    d_field_WatchCreateRequest_key(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   F@_6, F@_7, F@_8, TrUserData);
d_field_WatchCreateRequest_key(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_WatchCreateRequest(RestF, 0, 0,
					  NewFValue, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, TrUserData).

d_field_WatchCreateRequest_range_end(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, TrUserData)
    when N < 57 ->
    d_field_WatchCreateRequest_range_end(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, F@_6, F@_7, F@_8, TrUserData);
d_field_WatchCreateRequest_range_end(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_WatchCreateRequest(RestF, 0, 0, F@_1,
					  NewFValue, F@_3, F@_4, F@_5, F@_6,
					  F@_7, F@_8, TrUserData).

d_field_WatchCreateRequest_start_revision(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, TrUserData)
    when N < 57 ->
    d_field_WatchCreateRequest_start_revision(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, F@_6, F@_7, F@_8,
					      TrUserData);
d_field_WatchCreateRequest_start_revision(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, _, F@_4, F@_5,
					  F@_6, F@_7, F@_8, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_WatchCreateRequest(RestF, 0, 0, F@_1,
					  F@_2, NewFValue, F@_4, F@_5, F@_6,
					  F@_7, F@_8, TrUserData).

d_field_WatchCreateRequest_progress_notify(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, TrUserData)
    when N < 57 ->
    d_field_WatchCreateRequest_progress_notify(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       F@_4, F@_5, F@_6, F@_7, F@_8,
					       TrUserData);
d_field_WatchCreateRequest_progress_notify(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, _, F@_5,
					   F@_6, F@_7, F@_8, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_WatchCreateRequest(RestF, 0, 0, F@_1,
					  F@_2, F@_3, NewFValue, F@_5, F@_6,
					  F@_7, F@_8, TrUserData).

d_field_WatchCreateRequest_filters(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, TrUserData)
    when N < 57 ->
    d_field_WatchCreateRequest_filters(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, F@_6, F@_7, F@_8, TrUserData);
d_field_WatchCreateRequest_filters(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, Prev, F@_6,
				   F@_7, F@_8, TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_WatchCreateRequest.FilterType'(begin
						     <<Res:32/signed-native>> =
							 <<(X bsl N +
							      Acc):32/unsigned-native>>,
						     id(Res, TrUserData)
						   end),
	    TrUserData),
	 Rest},
    dfp_read_field_def_WatchCreateRequest(RestF, 0, 0, F@_1,
					  F@_2, F@_3, F@_4,
					  cons(NewFValue, Prev, TrUserData),
					  F@_6, F@_7, F@_8, TrUserData).

d_pfield_WatchCreateRequest_filters(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    F@_7, F@_8, TrUserData)
    when N < 57 ->
    d_pfield_WatchCreateRequest_filters(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, F@_6, F@_7, F@_8, TrUserData);
d_pfield_WatchCreateRequest_filters(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, E, F@_6,
				    F@_7, F@_8, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq =
	d_packed_field_WatchCreateRequest_filters(PackedBytes,
						  0, 0, E, TrUserData),
    dfp_read_field_def_WatchCreateRequest(Rest2, 0, 0, F@_1,
					  F@_2, F@_3, F@_4, NewSeq, F@_6, F@_7,
					  F@_8, TrUserData).

d_packed_field_WatchCreateRequest_filters(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, AccSeq, TrUserData)
    when N < 57 ->
    d_packed_field_WatchCreateRequest_filters(Rest, N + 7,
					      X bsl N + Acc, AccSeq,
					      TrUserData);
d_packed_field_WatchCreateRequest_filters(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, AccSeq, TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_WatchCreateRequest.FilterType'(begin
						     <<Res:32/signed-native>> =
							 <<(X bsl N +
							      Acc):32/unsigned-native>>,
						     id(Res, TrUserData)
						   end),
	    TrUserData),
	 Rest},
    d_packed_field_WatchCreateRequest_filters(RestF, 0, 0,
					      [NewFValue | AccSeq], TrUserData);
d_packed_field_WatchCreateRequest_filters(<<>>, 0, 0,
					  AccSeq, _) ->
    AccSeq.

d_field_WatchCreateRequest_prev_kv(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, TrUserData)
    when N < 57 ->
    d_field_WatchCreateRequest_prev_kv(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, F@_6, F@_7, F@_8, TrUserData);
d_field_WatchCreateRequest_prev_kv(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _,
				   F@_7, F@_8, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_WatchCreateRequest(RestF, 0, 0, F@_1,
					  F@_2, F@_3, F@_4, F@_5, NewFValue,
					  F@_7, F@_8, TrUserData).

d_field_WatchCreateRequest_watch_id(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    F@_7, F@_8, TrUserData)
    when N < 57 ->
    d_field_WatchCreateRequest_watch_id(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, F@_6, F@_7, F@_8, TrUserData);
d_field_WatchCreateRequest_watch_id(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    _, F@_8, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_WatchCreateRequest(RestF, 0, 0, F@_1,
					  F@_2, F@_3, F@_4, F@_5, F@_6,
					  NewFValue, F@_8, TrUserData).

d_field_WatchCreateRequest_fragment(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    F@_7, F@_8, TrUserData)
    when N < 57 ->
    d_field_WatchCreateRequest_fragment(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, F@_6, F@_7, F@_8, TrUserData);
d_field_WatchCreateRequest_fragment(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    F@_7, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_WatchCreateRequest(RestF, 0, 0, F@_1,
					  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					  NewFValue, TrUserData).

skip_varint_WatchCreateRequest(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, TrUserData) ->
    skip_varint_WatchCreateRequest(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				   TrUserData);
skip_varint_WatchCreateRequest(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, TrUserData) ->
    dfp_read_field_def_WatchCreateRequest(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  F@_7, F@_8, TrUserData).

skip_length_delimited_WatchCreateRequest(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, TrUserData)
    when N < 57 ->
    skip_length_delimited_WatchCreateRequest(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, F@_5, F@_6, F@_7, F@_8,
					     TrUserData);
skip_length_delimited_WatchCreateRequest(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_WatchCreateRequest(Rest2, 0, 0, F@_1,
					  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					  F@_8, TrUserData).

skip_group_WatchCreateRequest(Bin, FNum, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_WatchCreateRequest(Rest, 0, Z2, F@_1,
					  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					  F@_8, TrUserData).

skip_32_WatchCreateRequest(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   TrUserData) ->
    dfp_read_field_def_WatchCreateRequest(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  F@_7, F@_8, TrUserData).

skip_64_WatchCreateRequest(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   TrUserData) ->
    dfp_read_field_def_WatchCreateRequest(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  F@_7, F@_8, TrUserData).

decode_msg_WatchCancelRequest(Bin, TrUserData) ->
    dfp_read_field_def_WatchCancelRequest(Bin, 0, 0,
					  id(0, TrUserData), TrUserData).

dfp_read_field_def_WatchCancelRequest(<<8,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    d_field_WatchCancelRequest_watch_id(Rest, Z1, Z2, F@_1,
					TrUserData);
dfp_read_field_def_WatchCancelRequest(<<>>, 0, 0, F@_1,
				      _) ->
    #{watch_id => F@_1};
dfp_read_field_def_WatchCancelRequest(Other, Z1, Z2,
				      F@_1, TrUserData) ->
    dg_read_field_def_WatchCancelRequest(Other, Z1, Z2,
					 F@_1, TrUserData).

dg_read_field_def_WatchCancelRequest(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_WatchCancelRequest(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_WatchCancelRequest(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_WatchCancelRequest_watch_id(Rest, 0, 0, F@_1,
					      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_WatchCancelRequest(Rest, 0, 0, F@_1,
					       TrUserData);
	    1 ->
		skip_64_WatchCancelRequest(Rest, 0, 0, F@_1,
					   TrUserData);
	    2 ->
		skip_length_delimited_WatchCancelRequest(Rest, 0, 0,
							 F@_1, TrUserData);
	    3 ->
		skip_group_WatchCancelRequest(Rest, Key bsr 3, 0, F@_1,
					      TrUserData);
	    5 ->
		skip_32_WatchCancelRequest(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_WatchCancelRequest(<<>>, 0, 0, F@_1,
				     _) ->
    #{watch_id => F@_1}.

d_field_WatchCancelRequest_watch_id(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_WatchCancelRequest_watch_id(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
d_field_WatchCancelRequest_watch_id(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_WatchCancelRequest(RestF, 0, 0,
					  NewFValue, TrUserData).

skip_varint_WatchCancelRequest(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    skip_varint_WatchCancelRequest(Rest, Z1, Z2, F@_1,
				   TrUserData);
skip_varint_WatchCancelRequest(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_WatchCancelRequest(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_length_delimited_WatchCancelRequest(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_WatchCancelRequest(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_WatchCancelRequest(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_WatchCancelRequest(Rest2, 0, 0, F@_1,
					  TrUserData).

skip_group_WatchCancelRequest(Bin, FNum, Z2, F@_1,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_WatchCancelRequest(Rest, 0, Z2, F@_1,
					  TrUserData).

skip_32_WatchCancelRequest(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_WatchCancelRequest(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_64_WatchCancelRequest(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_WatchCancelRequest(Rest, Z1, Z2,
					  F@_1, TrUserData).

decode_msg_WatchProgressRequest(Bin, TrUserData) ->
    dfp_read_field_def_WatchProgressRequest(Bin, 0, 0,
					    TrUserData).

dfp_read_field_def_WatchProgressRequest(<<>>, 0, 0,
					_) ->
    #{};
dfp_read_field_def_WatchProgressRequest(Other, Z1, Z2,
					TrUserData) ->
    dg_read_field_def_WatchProgressRequest(Other, Z1, Z2,
					   TrUserData).

dg_read_field_def_WatchProgressRequest(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_WatchProgressRequest(Rest, N + 7,
					   X bsl N + Acc, TrUserData);
dg_read_field_def_WatchProgressRequest(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_WatchProgressRequest(Rest, 0, 0,
					   TrUserData);
      1 ->
	  skip_64_WatchProgressRequest(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_WatchProgressRequest(Rest, 0, 0,
						     TrUserData);
      3 ->
	  skip_group_WatchProgressRequest(Rest, Key bsr 3, 0,
					  TrUserData);
      5 ->
	  skip_32_WatchProgressRequest(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_WatchProgressRequest(<<>>, 0, 0, _) ->
    #{}.

skip_varint_WatchProgressRequest(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, TrUserData) ->
    skip_varint_WatchProgressRequest(Rest, Z1, Z2,
				     TrUserData);
skip_varint_WatchProgressRequest(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, TrUserData) ->
    dfp_read_field_def_WatchProgressRequest(Rest, Z1, Z2,
					    TrUserData).

skip_length_delimited_WatchProgressRequest(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_WatchProgressRequest(Rest, N + 7,
					       X bsl N + Acc, TrUserData);
skip_length_delimited_WatchProgressRequest(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_WatchProgressRequest(Rest2, 0, 0,
					    TrUserData).

skip_group_WatchProgressRequest(Bin, FNum, Z2,
				TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_WatchProgressRequest(Rest, 0, Z2,
					    TrUserData).

skip_32_WatchProgressRequest(<<_:32, Rest/binary>>, Z1,
			     Z2, TrUserData) ->
    dfp_read_field_def_WatchProgressRequest(Rest, Z1, Z2,
					    TrUserData).

skip_64_WatchProgressRequest(<<_:64, Rest/binary>>, Z1,
			     Z2, TrUserData) ->
    dfp_read_field_def_WatchProgressRequest(Rest, Z1, Z2,
					    TrUserData).

decode_msg_WatchResponse(Bin, TrUserData) ->
    dfp_read_field_def_WatchResponse(Bin, 0, 0,
				     id(undefined, TrUserData),
				     id(0, TrUserData), id(false, TrUserData),
				     id(false, TrUserData), id(0, TrUserData),
				     id([], TrUserData), id(false, TrUserData),
				     id([], TrUserData), TrUserData).

dfp_read_field_def_WatchResponse(<<10, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, F@_8, TrUserData) ->
    d_field_WatchResponse_header(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				 TrUserData);
dfp_read_field_def_WatchResponse(<<16, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, F@_8, TrUserData) ->
    d_field_WatchResponse_watch_id(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				   TrUserData);
dfp_read_field_def_WatchResponse(<<24, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, F@_8, TrUserData) ->
    d_field_WatchResponse_created(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				  TrUserData);
dfp_read_field_def_WatchResponse(<<32, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, F@_8, TrUserData) ->
    d_field_WatchResponse_canceled(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				   TrUserData);
dfp_read_field_def_WatchResponse(<<40, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, F@_8, TrUserData) ->
    d_field_WatchResponse_compact_revision(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					   F@_7, F@_8, TrUserData);
dfp_read_field_def_WatchResponse(<<50, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, F@_8, TrUserData) ->
    d_field_WatchResponse_cancel_reason(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					F@_8, TrUserData);
dfp_read_field_def_WatchResponse(<<56, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, F@_8, TrUserData) ->
    d_field_WatchResponse_fragment(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				   TrUserData);
dfp_read_field_def_WatchResponse(<<90, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, F@_8, TrUserData) ->
    d_field_WatchResponse_events(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				 TrUserData);
dfp_read_field_def_WatchResponse(<<>>, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, R1,
				 TrUserData) ->
    S1 = #{watch_id => F@_2, created => F@_3,
	   canceled => F@_4, compact_revision => F@_5,
	   cancel_reason => F@_6, fragment => F@_7},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{header => F@_1}
	 end,
    if R1 == '$undef' -> S2;
       true -> S2#{events => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_WatchResponse(Other, Z1, Z2, F@_1,
				 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				 TrUserData) ->
    dg_read_field_def_WatchResponse(Other, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				    TrUserData).

dg_read_field_def_WatchResponse(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, F@_8, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_WatchResponse(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    F@_6, F@_7, F@_8, TrUserData);
dg_read_field_def_WatchResponse(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, F@_8, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_WatchResponse_header(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       TrUserData);
      16 ->
	  d_field_WatchResponse_watch_id(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					 TrUserData);
      24 ->
	  d_field_WatchResponse_created(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					TrUserData);
      32 ->
	  d_field_WatchResponse_canceled(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					 TrUserData);
      40 ->
	  d_field_WatchResponse_compact_revision(Rest, 0, 0, F@_1,
						 F@_2, F@_3, F@_4, F@_5, F@_6,
						 F@_7, F@_8, TrUserData);
      50 ->
	  d_field_WatchResponse_cancel_reason(Rest, 0, 0, F@_1,
					      F@_2, F@_3, F@_4, F@_5, F@_6,
					      F@_7, F@_8, TrUserData);
      56 ->
	  d_field_WatchResponse_fragment(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					 TrUserData);
      90 ->
	  d_field_WatchResponse_events(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_WatchResponse(Rest, 0, 0, F@_1, F@_2, F@_3,
					  F@_4, F@_5, F@_6, F@_7, F@_8,
					  TrUserData);
	    1 ->
		skip_64_WatchResponse(Rest, 0, 0, F@_1, F@_2, F@_3,
				      F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
	    2 ->
		skip_length_delimited_WatchResponse(Rest, 0, 0, F@_1,
						    F@_2, F@_3, F@_4, F@_5,
						    F@_6, F@_7, F@_8,
						    TrUserData);
	    3 ->
		skip_group_WatchResponse(Rest, Key bsr 3, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					 TrUserData);
	    5 ->
		skip_32_WatchResponse(Rest, 0, 0, F@_1, F@_2, F@_3,
				      F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData)
	  end
    end;
dg_read_field_def_WatchResponse(<<>>, 0, 0, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, R1, TrUserData) ->
    S1 = #{watch_id => F@_2, created => F@_3,
	   canceled => F@_4, compact_revision => F@_5,
	   cancel_reason => F@_6, fragment => F@_7},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{header => F@_1}
	 end,
    if R1 == '$undef' -> S2;
       true -> S2#{events => lists_reverse(R1, TrUserData)}
    end.

d_field_WatchResponse_header(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, TrUserData)
    when N < 57 ->
    d_field_WatchResponse_header(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				 TrUserData);
d_field_WatchResponse_header(<<0:1, X:7, Rest/binary>>,
			     N, Acc, Prev, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ResponseHeader(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_WatchResponse(RestF, 0, 0,
				     if Prev == '$undef' -> NewFValue;
					true ->
					    merge_msg_ResponseHeader(Prev,
								     NewFValue,
								     TrUserData)
				     end,
				     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				     TrUserData).

d_field_WatchResponse_watch_id(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, TrUserData)
    when N < 57 ->
    d_field_WatchResponse_watch_id(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   F@_6, F@_7, F@_8, TrUserData);
d_field_WatchResponse_watch_id(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_WatchResponse(RestF, 0, 0, F@_1,
				     NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7,
				     F@_8, TrUserData).

d_field_WatchResponse_created(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, TrUserData)
    when N < 57 ->
    d_field_WatchResponse_created(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, F@_7, F@_8, TrUserData);
d_field_WatchResponse_created(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7,
			      F@_8, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_WatchResponse(RestF, 0, 0, F@_1,
				     F@_2, NewFValue, F@_4, F@_5, F@_6, F@_7,
				     F@_8, TrUserData).

d_field_WatchResponse_canceled(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, TrUserData)
    when N < 57 ->
    d_field_WatchResponse_canceled(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   F@_6, F@_7, F@_8, TrUserData);
d_field_WatchResponse_canceled(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7,
			       F@_8, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_WatchResponse(RestF, 0, 0, F@_1,
				     F@_2, F@_3, NewFValue, F@_5, F@_6, F@_7,
				     F@_8, TrUserData).

d_field_WatchResponse_compact_revision(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, F@_7, F@_8, TrUserData)
    when N < 57 ->
    d_field_WatchResponse_compact_revision(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   F@_4, F@_5, F@_6, F@_7, F@_8,
					   TrUserData);
d_field_WatchResponse_compact_revision(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6,
				       F@_7, F@_8, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_WatchResponse(RestF, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, NewFValue, F@_6, F@_7,
				     F@_8, TrUserData).

d_field_WatchResponse_cancel_reason(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    F@_7, F@_8, TrUserData)
    when N < 57 ->
    d_field_WatchResponse_cancel_reason(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, F@_6, F@_7, F@_8, TrUserData);
d_field_WatchResponse_cancel_reason(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _,
				    F@_7, F@_8, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_WatchResponse(RestF, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, F@_5, NewFValue, F@_7,
				     F@_8, TrUserData).

d_field_WatchResponse_fragment(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, TrUserData)
    when N < 57 ->
    d_field_WatchResponse_fragment(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   F@_6, F@_7, F@_8, TrUserData);
d_field_WatchResponse_fragment(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _,
			       F@_8, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_WatchResponse(RestF, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, NewFValue,
				     F@_8, TrUserData).

d_field_WatchResponse_events(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, TrUserData)
    when N < 57 ->
    d_field_WatchResponse_events(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				 TrUserData);
d_field_WatchResponse_events(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_Event(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_WatchResponse(RestF, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				     cons(NewFValue, Prev, TrUserData),
				     TrUserData).

skip_varint_WatchResponse(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  TrUserData) ->
    skip_varint_WatchResponse(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
skip_varint_WatchResponse(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  TrUserData) ->
    dfp_read_field_def_WatchResponse(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				     TrUserData).

skip_length_delimited_WatchResponse(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    F@_7, F@_8, TrUserData)
    when N < 57 ->
    skip_length_delimited_WatchResponse(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, F@_6, F@_7, F@_8, TrUserData);
skip_length_delimited_WatchResponse(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    F@_7, F@_8, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_WatchResponse(Rest2, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				     TrUserData).

skip_group_WatchResponse(Bin, FNum, Z2, F@_1, F@_2,
			 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_WatchResponse(Rest, 0, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				     TrUserData).

skip_32_WatchResponse(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		      TrUserData) ->
    dfp_read_field_def_WatchResponse(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				     TrUserData).

skip_64_WatchResponse(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		      TrUserData) ->
    dfp_read_field_def_WatchResponse(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				     TrUserData).

decode_msg_LeaseGrantRequest(Bin, TrUserData) ->
    dfp_read_field_def_LeaseGrantRequest(Bin, 0, 0,
					 id(0, TrUserData), id(0, TrUserData),
					 TrUserData).

dfp_read_field_def_LeaseGrantRequest(<<8, Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_LeaseGrantRequest_TTL(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData);
dfp_read_field_def_LeaseGrantRequest(<<16,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_LeaseGrantRequest_ID(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData);
dfp_read_field_def_LeaseGrantRequest(<<>>, 0, 0, F@_1,
				     F@_2, _) ->
    #{'TTL' => F@_1, 'ID' => F@_2};
dfp_read_field_def_LeaseGrantRequest(Other, Z1, Z2,
				     F@_1, F@_2, TrUserData) ->
    dg_read_field_def_LeaseGrantRequest(Other, Z1, Z2, F@_1,
					F@_2, TrUserData).

dg_read_field_def_LeaseGrantRequest(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_LeaseGrantRequest(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_LeaseGrantRequest(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_LeaseGrantRequest_TTL(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
      16 ->
	  d_field_LeaseGrantRequest_ID(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_LeaseGrantRequest(Rest, 0, 0, F@_1, F@_2,
					      TrUserData);
	    1 ->
		skip_64_LeaseGrantRequest(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
	    2 ->
		skip_length_delimited_LeaseGrantRequest(Rest, 0, 0,
							F@_1, F@_2, TrUserData);
	    3 ->
		skip_group_LeaseGrantRequest(Rest, Key bsr 3, 0, F@_1,
					     F@_2, TrUserData);
	    5 ->
		skip_32_LeaseGrantRequest(Rest, 0, 0, F@_1, F@_2,
					  TrUserData)
	  end
    end;
dg_read_field_def_LeaseGrantRequest(<<>>, 0, 0, F@_1,
				    F@_2, _) ->
    #{'TTL' => F@_1, 'ID' => F@_2}.

d_field_LeaseGrantRequest_TTL(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_LeaseGrantRequest_TTL(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_LeaseGrantRequest_TTL(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_LeaseGrantRequest(RestF, 0, 0,
					 NewFValue, F@_2, TrUserData).

d_field_LeaseGrantRequest_ID(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_LeaseGrantRequest_ID(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
d_field_LeaseGrantRequest_ID(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_LeaseGrantRequest(RestF, 0, 0, F@_1,
					 NewFValue, TrUserData).

skip_varint_LeaseGrantRequest(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_LeaseGrantRequest(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData);
skip_varint_LeaseGrantRequest(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_LeaseGrantRequest(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

skip_length_delimited_LeaseGrantRequest(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_LeaseGrantRequest(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2,
					    TrUserData);
skip_length_delimited_LeaseGrantRequest(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LeaseGrantRequest(Rest2, 0, 0, F@_1,
					 F@_2, TrUserData).

skip_group_LeaseGrantRequest(Bin, FNum, Z2, F@_1, F@_2,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_LeaseGrantRequest(Rest, 0, Z2, F@_1,
					 F@_2, TrUserData).

skip_32_LeaseGrantRequest(<<_:32, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_LeaseGrantRequest(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

skip_64_LeaseGrantRequest(<<_:64, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_LeaseGrantRequest(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

decode_msg_LeaseGrantResponse(Bin, TrUserData) ->
    dfp_read_field_def_LeaseGrantResponse(Bin, 0, 0,
					  id(undefined, TrUserData),
					  id(0, TrUserData), id(0, TrUserData),
					  id([], TrUserData), TrUserData).

dfp_read_field_def_LeaseGrantResponse(<<10,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				      TrUserData) ->
    d_field_LeaseGrantResponse_header(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_LeaseGrantResponse(<<16,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				      TrUserData) ->
    d_field_LeaseGrantResponse_ID(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData);
dfp_read_field_def_LeaseGrantResponse(<<24,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				      TrUserData) ->
    d_field_LeaseGrantResponse_TTL(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, TrUserData);
dfp_read_field_def_LeaseGrantResponse(<<34,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				      TrUserData) ->
    d_field_LeaseGrantResponse_error(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_LeaseGrantResponse(<<>>, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, _) ->
    S1 = #{'ID' => F@_2, 'TTL' => F@_3, error => F@_4},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end;
dfp_read_field_def_LeaseGrantResponse(Other, Z1, Z2,
				      F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_LeaseGrantResponse(Other, Z1, Z2,
					 F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_LeaseGrantResponse(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_LeaseGrantResponse(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 TrUserData);
dg_read_field_def_LeaseGrantResponse(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4,
				     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_LeaseGrantResponse_header(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, TrUserData);
      16 ->
	  d_field_LeaseGrantResponse_ID(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, TrUserData);
      24 ->
	  d_field_LeaseGrantResponse_TTL(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, TrUserData);
      34 ->
	  d_field_LeaseGrantResponse_error(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_LeaseGrantResponse(Rest, 0, 0, F@_1, F@_2,
					       F@_3, F@_4, TrUserData);
	    1 ->
		skip_64_LeaseGrantResponse(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, TrUserData);
	    2 ->
		skip_length_delimited_LeaseGrantResponse(Rest, 0, 0,
							 F@_1, F@_2, F@_3, F@_4,
							 TrUserData);
	    3 ->
		skip_group_LeaseGrantResponse(Rest, Key bsr 3, 0, F@_1,
					      F@_2, F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_LeaseGrantResponse(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, TrUserData)
	  end
    end;
dg_read_field_def_LeaseGrantResponse(<<>>, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, _) ->
    S1 = #{'ID' => F@_2, 'TTL' => F@_3, error => F@_4},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end.

d_field_LeaseGrantResponse_header(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_LeaseGrantResponse_header(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      TrUserData);
d_field_LeaseGrantResponse_header(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, Prev, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ResponseHeader(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_LeaseGrantResponse(RestF, 0, 0,
					  if Prev == '$undef' -> NewFValue;
					     true ->
						 merge_msg_ResponseHeader(Prev,
									  NewFValue,
									  TrUserData)
					  end,
					  F@_2, F@_3, F@_4, TrUserData).

d_field_LeaseGrantResponse_ID(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_LeaseGrantResponse_ID(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				  TrUserData);
d_field_LeaseGrantResponse_ID(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_LeaseGrantResponse(RestF, 0, 0, F@_1,
					  NewFValue, F@_3, F@_4, TrUserData).

d_field_LeaseGrantResponse_TTL(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_LeaseGrantResponse_TTL(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				   TrUserData);
d_field_LeaseGrantResponse_TTL(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_LeaseGrantResponse(RestF, 0, 0, F@_1,
					  F@_2, NewFValue, F@_4, TrUserData).

d_field_LeaseGrantResponse_error(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_LeaseGrantResponse_error(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     TrUserData);
d_field_LeaseGrantResponse_error(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_LeaseGrantResponse(RestF, 0, 0, F@_1,
					  F@_2, F@_3, NewFValue, TrUserData).

skip_varint_LeaseGrantResponse(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_LeaseGrantResponse(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, TrUserData);
skip_varint_LeaseGrantResponse(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_LeaseGrantResponse(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_LeaseGrantResponse(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4,
					 TrUserData)
    when N < 57 ->
    skip_length_delimited_LeaseGrantResponse(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, TrUserData);
skip_length_delimited_LeaseGrantResponse(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4,
					 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LeaseGrantResponse(Rest2, 0, 0, F@_1,
					  F@_2, F@_3, F@_4, TrUserData).

skip_group_LeaseGrantResponse(Bin, FNum, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_LeaseGrantResponse(Rest, 0, Z2, F@_1,
					  F@_2, F@_3, F@_4, TrUserData).

skip_32_LeaseGrantResponse(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_LeaseGrantResponse(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_LeaseGrantResponse(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_LeaseGrantResponse(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, TrUserData).

decode_msg_LeaseRevokeRequest(Bin, TrUserData) ->
    dfp_read_field_def_LeaseRevokeRequest(Bin, 0, 0,
					  id(0, TrUserData), TrUserData).

dfp_read_field_def_LeaseRevokeRequest(<<8,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    d_field_LeaseRevokeRequest_ID(Rest, Z1, Z2, F@_1,
				  TrUserData);
dfp_read_field_def_LeaseRevokeRequest(<<>>, 0, 0, F@_1,
				      _) ->
    #{'ID' => F@_1};
dfp_read_field_def_LeaseRevokeRequest(Other, Z1, Z2,
				      F@_1, TrUserData) ->
    dg_read_field_def_LeaseRevokeRequest(Other, Z1, Z2,
					 F@_1, TrUserData).

dg_read_field_def_LeaseRevokeRequest(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_LeaseRevokeRequest(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_LeaseRevokeRequest(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_LeaseRevokeRequest_ID(Rest, 0, 0, F@_1,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_LeaseRevokeRequest(Rest, 0, 0, F@_1,
					       TrUserData);
	    1 ->
		skip_64_LeaseRevokeRequest(Rest, 0, 0, F@_1,
					   TrUserData);
	    2 ->
		skip_length_delimited_LeaseRevokeRequest(Rest, 0, 0,
							 F@_1, TrUserData);
	    3 ->
		skip_group_LeaseRevokeRequest(Rest, Key bsr 3, 0, F@_1,
					      TrUserData);
	    5 ->
		skip_32_LeaseRevokeRequest(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_LeaseRevokeRequest(<<>>, 0, 0, F@_1,
				     _) ->
    #{'ID' => F@_1}.

d_field_LeaseRevokeRequest_ID(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_LeaseRevokeRequest_ID(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
d_field_LeaseRevokeRequest_ID(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_LeaseRevokeRequest(RestF, 0, 0,
					  NewFValue, TrUserData).

skip_varint_LeaseRevokeRequest(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    skip_varint_LeaseRevokeRequest(Rest, Z1, Z2, F@_1,
				   TrUserData);
skip_varint_LeaseRevokeRequest(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_LeaseRevokeRequest(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_length_delimited_LeaseRevokeRequest(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_LeaseRevokeRequest(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_LeaseRevokeRequest(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LeaseRevokeRequest(Rest2, 0, 0, F@_1,
					  TrUserData).

skip_group_LeaseRevokeRequest(Bin, FNum, Z2, F@_1,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_LeaseRevokeRequest(Rest, 0, Z2, F@_1,
					  TrUserData).

skip_32_LeaseRevokeRequest(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_LeaseRevokeRequest(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_64_LeaseRevokeRequest(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_LeaseRevokeRequest(Rest, Z1, Z2,
					  F@_1, TrUserData).

decode_msg_LeaseRevokeResponse(Bin, TrUserData) ->
    dfp_read_field_def_LeaseRevokeResponse(Bin, 0, 0,
					   id(undefined, TrUserData),
					   TrUserData).

dfp_read_field_def_LeaseRevokeResponse(<<10,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    d_field_LeaseRevokeResponse_header(Rest, Z1, Z2, F@_1,
				       TrUserData);
dfp_read_field_def_LeaseRevokeResponse(<<>>, 0, 0, F@_1,
				       _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end;
dfp_read_field_def_LeaseRevokeResponse(Other, Z1, Z2,
				       F@_1, TrUserData) ->
    dg_read_field_def_LeaseRevokeResponse(Other, Z1, Z2,
					  F@_1, TrUserData).

dg_read_field_def_LeaseRevokeResponse(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_LeaseRevokeResponse(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_LeaseRevokeResponse(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_LeaseRevokeResponse_header(Rest, 0, 0, F@_1,
					     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_LeaseRevokeResponse(Rest, 0, 0, F@_1,
						TrUserData);
	    1 ->
		skip_64_LeaseRevokeResponse(Rest, 0, 0, F@_1,
					    TrUserData);
	    2 ->
		skip_length_delimited_LeaseRevokeResponse(Rest, 0, 0,
							  F@_1, TrUserData);
	    3 ->
		skip_group_LeaseRevokeResponse(Rest, Key bsr 3, 0, F@_1,
					       TrUserData);
	    5 ->
		skip_32_LeaseRevokeResponse(Rest, 0, 0, F@_1,
					    TrUserData)
	  end
    end;
dg_read_field_def_LeaseRevokeResponse(<<>>, 0, 0, F@_1,
				      _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end.

d_field_LeaseRevokeResponse_header(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_LeaseRevokeResponse_header(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
d_field_LeaseRevokeResponse_header(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ResponseHeader(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_LeaseRevokeResponse(RestF, 0, 0,
					   if Prev == '$undef' -> NewFValue;
					      true ->
						  merge_msg_ResponseHeader(Prev,
									   NewFValue,
									   TrUserData)
					   end,
					   TrUserData).

skip_varint_LeaseRevokeResponse(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    skip_varint_LeaseRevokeResponse(Rest, Z1, Z2, F@_1,
				    TrUserData);
skip_varint_LeaseRevokeResponse(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_LeaseRevokeResponse(Rest, Z1, Z2,
					   F@_1, TrUserData).

skip_length_delimited_LeaseRevokeResponse(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_LeaseRevokeResponse(Rest, N + 7,
					      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_LeaseRevokeResponse(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LeaseRevokeResponse(Rest2, 0, 0,
					   F@_1, TrUserData).

skip_group_LeaseRevokeResponse(Bin, FNum, Z2, F@_1,
			       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_LeaseRevokeResponse(Rest, 0, Z2,
					   F@_1, TrUserData).

skip_32_LeaseRevokeResponse(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, TrUserData) ->
    dfp_read_field_def_LeaseRevokeResponse(Rest, Z1, Z2,
					   F@_1, TrUserData).

skip_64_LeaseRevokeResponse(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, TrUserData) ->
    dfp_read_field_def_LeaseRevokeResponse(Rest, Z1, Z2,
					   F@_1, TrUserData).

decode_msg_LeaseCheckpoint(Bin, TrUserData) ->
    dfp_read_field_def_LeaseCheckpoint(Bin, 0, 0,
				       id(0, TrUserData), id(0, TrUserData),
				       TrUserData).

dfp_read_field_def_LeaseCheckpoint(<<8, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_LeaseCheckpoint_ID(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
dfp_read_field_def_LeaseCheckpoint(<<16, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_LeaseCheckpoint_remaining_TTL(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData);
dfp_read_field_def_LeaseCheckpoint(<<>>, 0, 0, F@_1,
				   F@_2, _) ->
    #{'ID' => F@_1, remaining_TTL => F@_2};
dfp_read_field_def_LeaseCheckpoint(Other, Z1, Z2, F@_1,
				   F@_2, TrUserData) ->
    dg_read_field_def_LeaseCheckpoint(Other, Z1, Z2, F@_1,
				      F@_2, TrUserData).

dg_read_field_def_LeaseCheckpoint(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_LeaseCheckpoint(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_LeaseCheckpoint(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_LeaseCheckpoint_ID(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
      16 ->
	  d_field_LeaseCheckpoint_remaining_TTL(Rest, 0, 0, F@_1,
						F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_LeaseCheckpoint(Rest, 0, 0, F@_1, F@_2,
					    TrUserData);
	    1 ->
		skip_64_LeaseCheckpoint(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
	    2 ->
		skip_length_delimited_LeaseCheckpoint(Rest, 0, 0, F@_1,
						      F@_2, TrUserData);
	    3 ->
		skip_group_LeaseCheckpoint(Rest, Key bsr 3, 0, F@_1,
					   F@_2, TrUserData);
	    5 ->
		skip_32_LeaseCheckpoint(Rest, 0, 0, F@_1, F@_2,
					TrUserData)
	  end
    end;
dg_read_field_def_LeaseCheckpoint(<<>>, 0, 0, F@_1,
				  F@_2, _) ->
    #{'ID' => F@_1, remaining_TTL => F@_2}.

d_field_LeaseCheckpoint_ID(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_LeaseCheckpoint_ID(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
d_field_LeaseCheckpoint_ID(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_LeaseCheckpoint(RestF, 0, 0,
				       NewFValue, F@_2, TrUserData).

d_field_LeaseCheckpoint_remaining_TTL(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_LeaseCheckpoint_remaining_TTL(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
d_field_LeaseCheckpoint_remaining_TTL(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_LeaseCheckpoint(RestF, 0, 0, F@_1,
				       NewFValue, TrUserData).

skip_varint_LeaseCheckpoint(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_LeaseCheckpoint(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData);
skip_varint_LeaseCheckpoint(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_LeaseCheckpoint(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData).

skip_length_delimited_LeaseCheckpoint(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_LeaseCheckpoint(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
skip_length_delimited_LeaseCheckpoint(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LeaseCheckpoint(Rest2, 0, 0, F@_1,
				       F@_2, TrUserData).

skip_group_LeaseCheckpoint(Bin, FNum, Z2, F@_1, F@_2,
			   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_LeaseCheckpoint(Rest, 0, Z2, F@_1,
				       F@_2, TrUserData).

skip_32_LeaseCheckpoint(<<_:32, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_LeaseCheckpoint(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData).

skip_64_LeaseCheckpoint(<<_:64, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_LeaseCheckpoint(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData).

decode_msg_LeaseCheckpointRequest(Bin, TrUserData) ->
    dfp_read_field_def_LeaseCheckpointRequest(Bin, 0, 0,
					      id([], TrUserData), TrUserData).

dfp_read_field_def_LeaseCheckpointRequest(<<10,
					    Rest/binary>>,
					  Z1, Z2, F@_1, TrUserData) ->
    d_field_LeaseCheckpointRequest_checkpoints(Rest, Z1, Z2,
					       F@_1, TrUserData);
dfp_read_field_def_LeaseCheckpointRequest(<<>>, 0, 0,
					  R1, TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true ->
	   S1#{checkpoints => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_LeaseCheckpointRequest(Other, Z1, Z2,
					  F@_1, TrUserData) ->
    dg_read_field_def_LeaseCheckpointRequest(Other, Z1, Z2,
					     F@_1, TrUserData).

dg_read_field_def_LeaseCheckpointRequest(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_LeaseCheckpointRequest(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_LeaseCheckpointRequest(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_LeaseCheckpointRequest_checkpoints(Rest, 0, 0,
						     F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_LeaseCheckpointRequest(Rest, 0, 0, F@_1,
						   TrUserData);
	    1 ->
		skip_64_LeaseCheckpointRequest(Rest, 0, 0, F@_1,
					       TrUserData);
	    2 ->
		skip_length_delimited_LeaseCheckpointRequest(Rest, 0, 0,
							     F@_1, TrUserData);
	    3 ->
		skip_group_LeaseCheckpointRequest(Rest, Key bsr 3, 0,
						  F@_1, TrUserData);
	    5 ->
		skip_32_LeaseCheckpointRequest(Rest, 0, 0, F@_1,
					       TrUserData)
	  end
    end;
dg_read_field_def_LeaseCheckpointRequest(<<>>, 0, 0, R1,
					 TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true ->
	   S1#{checkpoints => lists_reverse(R1, TrUserData)}
    end.

d_field_LeaseCheckpointRequest_checkpoints(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_LeaseCheckpointRequest_checkpoints(Rest, N + 7,
					       X bsl N + Acc, F@_1, TrUserData);
d_field_LeaseCheckpointRequest_checkpoints(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_LeaseCheckpoint(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_LeaseCheckpointRequest(RestF, 0, 0,
					      cons(NewFValue, Prev, TrUserData),
					      TrUserData).

skip_varint_LeaseCheckpointRequest(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_LeaseCheckpointRequest(Rest, Z1, Z2, F@_1,
				       TrUserData);
skip_varint_LeaseCheckpointRequest(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_LeaseCheckpointRequest(Rest, Z1, Z2,
					      F@_1, TrUserData).

skip_length_delimited_LeaseCheckpointRequest(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_LeaseCheckpointRequest(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 TrUserData);
skip_length_delimited_LeaseCheckpointRequest(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LeaseCheckpointRequest(Rest2, 0, 0,
					      F@_1, TrUserData).

skip_group_LeaseCheckpointRequest(Bin, FNum, Z2, F@_1,
				  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_LeaseCheckpointRequest(Rest, 0, Z2,
					      F@_1, TrUserData).

skip_32_LeaseCheckpointRequest(<<_:32, Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_LeaseCheckpointRequest(Rest, Z1, Z2,
					      F@_1, TrUserData).

skip_64_LeaseCheckpointRequest(<<_:64, Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_LeaseCheckpointRequest(Rest, Z1, Z2,
					      F@_1, TrUserData).

decode_msg_LeaseCheckpointResponse(Bin, TrUserData) ->
    dfp_read_field_def_LeaseCheckpointResponse(Bin, 0, 0,
					       id(undefined, TrUserData),
					       TrUserData).

dfp_read_field_def_LeaseCheckpointResponse(<<10,
					     Rest/binary>>,
					   Z1, Z2, F@_1, TrUserData) ->
    d_field_LeaseCheckpointResponse_header(Rest, Z1, Z2,
					   F@_1, TrUserData);
dfp_read_field_def_LeaseCheckpointResponse(<<>>, 0, 0,
					   F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end;
dfp_read_field_def_LeaseCheckpointResponse(Other, Z1,
					   Z2, F@_1, TrUserData) ->
    dg_read_field_def_LeaseCheckpointResponse(Other, Z1, Z2,
					      F@_1, TrUserData).

dg_read_field_def_LeaseCheckpointResponse(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_LeaseCheckpointResponse(Rest, N + 7,
					      X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_LeaseCheckpointResponse(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_LeaseCheckpointResponse_header(Rest, 0, 0, F@_1,
						 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_LeaseCheckpointResponse(Rest, 0, 0, F@_1,
						    TrUserData);
	    1 ->
		skip_64_LeaseCheckpointResponse(Rest, 0, 0, F@_1,
						TrUserData);
	    2 ->
		skip_length_delimited_LeaseCheckpointResponse(Rest, 0,
							      0, F@_1,
							      TrUserData);
	    3 ->
		skip_group_LeaseCheckpointResponse(Rest, Key bsr 3, 0,
						   F@_1, TrUserData);
	    5 ->
		skip_32_LeaseCheckpointResponse(Rest, 0, 0, F@_1,
						TrUserData)
	  end
    end;
dg_read_field_def_LeaseCheckpointResponse(<<>>, 0, 0,
					  F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end.

d_field_LeaseCheckpointResponse_header(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_LeaseCheckpointResponse_header(Rest, N + 7,
					   X bsl N + Acc, F@_1, TrUserData);
d_field_LeaseCheckpointResponse_header(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ResponseHeader(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_LeaseCheckpointResponse(RestF, 0, 0,
					       if Prev == '$undef' -> NewFValue;
						  true ->
						      merge_msg_ResponseHeader(Prev,
									       NewFValue,
									       TrUserData)
					       end,
					       TrUserData).

skip_varint_LeaseCheckpointResponse(<<1:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    skip_varint_LeaseCheckpointResponse(Rest, Z1, Z2, F@_1,
					TrUserData);
skip_varint_LeaseCheckpointResponse(<<0:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_LeaseCheckpointResponse(Rest, Z1, Z2,
					       F@_1, TrUserData).

skip_length_delimited_LeaseCheckpointResponse(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_LeaseCheckpointResponse(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  TrUserData);
skip_length_delimited_LeaseCheckpointResponse(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LeaseCheckpointResponse(Rest2, 0, 0,
					       F@_1, TrUserData).

skip_group_LeaseCheckpointResponse(Bin, FNum, Z2, F@_1,
				   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_LeaseCheckpointResponse(Rest, 0, Z2,
					       F@_1, TrUserData).

skip_32_LeaseCheckpointResponse(<<_:32, Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_LeaseCheckpointResponse(Rest, Z1, Z2,
					       F@_1, TrUserData).

skip_64_LeaseCheckpointResponse(<<_:64, Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_LeaseCheckpointResponse(Rest, Z1, Z2,
					       F@_1, TrUserData).

decode_msg_LeaseKeepAliveRequest(Bin, TrUserData) ->
    dfp_read_field_def_LeaseKeepAliveRequest(Bin, 0, 0,
					     id(0, TrUserData), TrUserData).

dfp_read_field_def_LeaseKeepAliveRequest(<<8,
					   Rest/binary>>,
					 Z1, Z2, F@_1, TrUserData) ->
    d_field_LeaseKeepAliveRequest_ID(Rest, Z1, Z2, F@_1,
				     TrUserData);
dfp_read_field_def_LeaseKeepAliveRequest(<<>>, 0, 0,
					 F@_1, _) ->
    #{'ID' => F@_1};
dfp_read_field_def_LeaseKeepAliveRequest(Other, Z1, Z2,
					 F@_1, TrUserData) ->
    dg_read_field_def_LeaseKeepAliveRequest(Other, Z1, Z2,
					    F@_1, TrUserData).

dg_read_field_def_LeaseKeepAliveRequest(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_LeaseKeepAliveRequest(Rest, N + 7,
					    X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_LeaseKeepAliveRequest(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_LeaseKeepAliveRequest_ID(Rest, 0, 0, F@_1,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_LeaseKeepAliveRequest(Rest, 0, 0, F@_1,
						  TrUserData);
	    1 ->
		skip_64_LeaseKeepAliveRequest(Rest, 0, 0, F@_1,
					      TrUserData);
	    2 ->
		skip_length_delimited_LeaseKeepAliveRequest(Rest, 0, 0,
							    F@_1, TrUserData);
	    3 ->
		skip_group_LeaseKeepAliveRequest(Rest, Key bsr 3, 0,
						 F@_1, TrUserData);
	    5 ->
		skip_32_LeaseKeepAliveRequest(Rest, 0, 0, F@_1,
					      TrUserData)
	  end
    end;
dg_read_field_def_LeaseKeepAliveRequest(<<>>, 0, 0,
					F@_1, _) ->
    #{'ID' => F@_1}.

d_field_LeaseKeepAliveRequest_ID(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_LeaseKeepAliveRequest_ID(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
d_field_LeaseKeepAliveRequest_ID(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_LeaseKeepAliveRequest(RestF, 0, 0,
					     NewFValue, TrUserData).

skip_varint_LeaseKeepAliveRequest(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    skip_varint_LeaseKeepAliveRequest(Rest, Z1, Z2, F@_1,
				      TrUserData);
skip_varint_LeaseKeepAliveRequest(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_LeaseKeepAliveRequest(Rest, Z1, Z2,
					     F@_1, TrUserData).

skip_length_delimited_LeaseKeepAliveRequest(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_LeaseKeepAliveRequest(Rest, N + 7,
						X bsl N + Acc, F@_1,
						TrUserData);
skip_length_delimited_LeaseKeepAliveRequest(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LeaseKeepAliveRequest(Rest2, 0, 0,
					     F@_1, TrUserData).

skip_group_LeaseKeepAliveRequest(Bin, FNum, Z2, F@_1,
				 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_LeaseKeepAliveRequest(Rest, 0, Z2,
					     F@_1, TrUserData).

skip_32_LeaseKeepAliveRequest(<<_:32, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    dfp_read_field_def_LeaseKeepAliveRequest(Rest, Z1, Z2,
					     F@_1, TrUserData).

skip_64_LeaseKeepAliveRequest(<<_:64, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    dfp_read_field_def_LeaseKeepAliveRequest(Rest, Z1, Z2,
					     F@_1, TrUserData).

decode_msg_LeaseKeepAliveResponse(Bin, TrUserData) ->
    dfp_read_field_def_LeaseKeepAliveResponse(Bin, 0, 0,
					      id(undefined, TrUserData),
					      id(0, TrUserData),
					      id(0, TrUserData), TrUserData).

dfp_read_field_def_LeaseKeepAliveResponse(<<10,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3,
					  TrUserData) ->
    d_field_LeaseKeepAliveResponse_header(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_LeaseKeepAliveResponse(<<16,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3,
					  TrUserData) ->
    d_field_LeaseKeepAliveResponse_ID(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, TrUserData);
dfp_read_field_def_LeaseKeepAliveResponse(<<24,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3,
					  TrUserData) ->
    d_field_LeaseKeepAliveResponse_TTL(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, TrUserData);
dfp_read_field_def_LeaseKeepAliveResponse(<<>>, 0, 0,
					  F@_1, F@_2, F@_3, _) ->
    S1 = #{'ID' => F@_2, 'TTL' => F@_3},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end;
dfp_read_field_def_LeaseKeepAliveResponse(Other, Z1, Z2,
					  F@_1, F@_2, F@_3, TrUserData) ->
    dg_read_field_def_LeaseKeepAliveResponse(Other, Z1, Z2,
					     F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_LeaseKeepAliveResponse(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_LeaseKeepAliveResponse(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     TrUserData);
dg_read_field_def_LeaseKeepAliveResponse(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3,
					 TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_LeaseKeepAliveResponse_header(Rest, 0, 0, F@_1,
						F@_2, F@_3, TrUserData);
      16 ->
	  d_field_LeaseKeepAliveResponse_ID(Rest, 0, 0, F@_1,
					    F@_2, F@_3, TrUserData);
      24 ->
	  d_field_LeaseKeepAliveResponse_TTL(Rest, 0, 0, F@_1,
					     F@_2, F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_LeaseKeepAliveResponse(Rest, 0, 0, F@_1,
						   F@_2, F@_3, TrUserData);
	    1 ->
		skip_64_LeaseKeepAliveResponse(Rest, 0, 0, F@_1, F@_2,
					       F@_3, TrUserData);
	    2 ->
		skip_length_delimited_LeaseKeepAliveResponse(Rest, 0, 0,
							     F@_1, F@_2, F@_3,
							     TrUserData);
	    3 ->
		skip_group_LeaseKeepAliveResponse(Rest, Key bsr 3, 0,
						  F@_1, F@_2, F@_3, TrUserData);
	    5 ->
		skip_32_LeaseKeepAliveResponse(Rest, 0, 0, F@_1, F@_2,
					       F@_3, TrUserData)
	  end
    end;
dg_read_field_def_LeaseKeepAliveResponse(<<>>, 0, 0,
					 F@_1, F@_2, F@_3, _) ->
    S1 = #{'ID' => F@_2, 'TTL' => F@_3},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end.

d_field_LeaseKeepAliveResponse_header(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_LeaseKeepAliveResponse_header(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3,
					  TrUserData);
d_field_LeaseKeepAliveResponse_header(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, Prev, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ResponseHeader(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_LeaseKeepAliveResponse(RestF, 0, 0,
					      if Prev == '$undef' -> NewFValue;
						 true ->
						     merge_msg_ResponseHeader(Prev,
									      NewFValue,
									      TrUserData)
					      end,
					      F@_2, F@_3, TrUserData).

d_field_LeaseKeepAliveResponse_ID(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_LeaseKeepAliveResponse_ID(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3,
				      TrUserData);
d_field_LeaseKeepAliveResponse_ID(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_LeaseKeepAliveResponse(RestF, 0, 0,
					      F@_1, NewFValue, F@_3,
					      TrUserData).

d_field_LeaseKeepAliveResponse_TTL(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_LeaseKeepAliveResponse_TTL(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3,
				       TrUserData);
d_field_LeaseKeepAliveResponse_TTL(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_LeaseKeepAliveResponse(RestF, 0, 0,
					      F@_1, F@_2, NewFValue,
					      TrUserData).

skip_varint_LeaseKeepAliveResponse(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_LeaseKeepAliveResponse(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, TrUserData);
skip_varint_LeaseKeepAliveResponse(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_LeaseKeepAliveResponse(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_LeaseKeepAliveResponse(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3,
					     TrUserData)
    when N < 57 ->
    skip_length_delimited_LeaseKeepAliveResponse(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, F@_3, TrUserData);
skip_length_delimited_LeaseKeepAliveResponse(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3,
					     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LeaseKeepAliveResponse(Rest2, 0, 0,
					      F@_1, F@_2, F@_3, TrUserData).

skip_group_LeaseKeepAliveResponse(Bin, FNum, Z2, F@_1,
				  F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_LeaseKeepAliveResponse(Rest, 0, Z2,
					      F@_1, F@_2, F@_3, TrUserData).

skip_32_LeaseKeepAliveResponse(<<_:32, Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_LeaseKeepAliveResponse(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, TrUserData).

skip_64_LeaseKeepAliveResponse(<<_:64, Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_LeaseKeepAliveResponse(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, TrUserData).

decode_msg_LeaseTimeToLiveRequest(Bin, TrUserData) ->
    dfp_read_field_def_LeaseTimeToLiveRequest(Bin, 0, 0,
					      id(0, TrUserData),
					      id(false, TrUserData),
					      TrUserData).

dfp_read_field_def_LeaseTimeToLiveRequest(<<8,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_LeaseTimeToLiveRequest_ID(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData);
dfp_read_field_def_LeaseTimeToLiveRequest(<<16,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_LeaseTimeToLiveRequest_keys(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData);
dfp_read_field_def_LeaseTimeToLiveRequest(<<>>, 0, 0,
					  F@_1, F@_2, _) ->
    #{'ID' => F@_1, keys => F@_2};
dfp_read_field_def_LeaseTimeToLiveRequest(Other, Z1, Z2,
					  F@_1, F@_2, TrUserData) ->
    dg_read_field_def_LeaseTimeToLiveRequest(Other, Z1, Z2,
					     F@_1, F@_2, TrUserData).

dg_read_field_def_LeaseTimeToLiveRequest(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_LeaseTimeToLiveRequest(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2,
					     TrUserData);
dg_read_field_def_LeaseTimeToLiveRequest(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_LeaseTimeToLiveRequest_ID(Rest, 0, 0, F@_1,
					    F@_2, TrUserData);
      16 ->
	  d_field_LeaseTimeToLiveRequest_keys(Rest, 0, 0, F@_1,
					      F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_LeaseTimeToLiveRequest(Rest, 0, 0, F@_1,
						   F@_2, TrUserData);
	    1 ->
		skip_64_LeaseTimeToLiveRequest(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    2 ->
		skip_length_delimited_LeaseTimeToLiveRequest(Rest, 0, 0,
							     F@_1, F@_2,
							     TrUserData);
	    3 ->
		skip_group_LeaseTimeToLiveRequest(Rest, Key bsr 3, 0,
						  F@_1, F@_2, TrUserData);
	    5 ->
		skip_32_LeaseTimeToLiveRequest(Rest, 0, 0, F@_1, F@_2,
					       TrUserData)
	  end
    end;
dg_read_field_def_LeaseTimeToLiveRequest(<<>>, 0, 0,
					 F@_1, F@_2, _) ->
    #{'ID' => F@_1, keys => F@_2}.

d_field_LeaseTimeToLiveRequest_ID(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_LeaseTimeToLiveRequest_ID(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_LeaseTimeToLiveRequest_ID(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_LeaseTimeToLiveRequest(RestF, 0, 0,
					      NewFValue, F@_2, TrUserData).

d_field_LeaseTimeToLiveRequest_keys(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_LeaseTimeToLiveRequest_keys(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_LeaseTimeToLiveRequest_keys(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_LeaseTimeToLiveRequest(RestF, 0, 0,
					      F@_1, NewFValue, TrUserData).

skip_varint_LeaseTimeToLiveRequest(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_LeaseTimeToLiveRequest(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData);
skip_varint_LeaseTimeToLiveRequest(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_LeaseTimeToLiveRequest(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData).

skip_length_delimited_LeaseTimeToLiveRequest(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_LeaseTimeToLiveRequest(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, TrUserData);
skip_length_delimited_LeaseTimeToLiveRequest(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LeaseTimeToLiveRequest(Rest2, 0, 0,
					      F@_1, F@_2, TrUserData).

skip_group_LeaseTimeToLiveRequest(Bin, FNum, Z2, F@_1,
				  F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_LeaseTimeToLiveRequest(Rest, 0, Z2,
					      F@_1, F@_2, TrUserData).

skip_32_LeaseTimeToLiveRequest(<<_:32, Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_LeaseTimeToLiveRequest(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData).

skip_64_LeaseTimeToLiveRequest(<<_:64, Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_LeaseTimeToLiveRequest(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData).

decode_msg_LeaseTimeToLiveResponse(Bin, TrUserData) ->
    dfp_read_field_def_LeaseTimeToLiveResponse(Bin, 0, 0,
					       id(undefined, TrUserData),
					       id(0, TrUserData),
					       id(0, TrUserData),
					       id(0, TrUserData),
					       id([], TrUserData), TrUserData).

dfp_read_field_def_LeaseTimeToLiveResponse(<<10,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData) ->
    d_field_LeaseTimeToLiveResponse_header(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData);
dfp_read_field_def_LeaseTimeToLiveResponse(<<16,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData) ->
    d_field_LeaseTimeToLiveResponse_ID(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_LeaseTimeToLiveResponse(<<24,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData) ->
    d_field_LeaseTimeToLiveResponse_TTL(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_LeaseTimeToLiveResponse(<<32,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData) ->
    d_field_LeaseTimeToLiveResponse_grantedTTL(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       TrUserData);
dfp_read_field_def_LeaseTimeToLiveResponse(<<42,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData) ->
    d_field_LeaseTimeToLiveResponse_keys(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_LeaseTimeToLiveResponse(<<>>, 0, 0,
					   F@_1, F@_2, F@_3, F@_4, R1,
					   TrUserData) ->
    S1 = #{'ID' => F@_2, 'TTL' => F@_3, grantedTTL => F@_4,
	   keys => lists_reverse(R1, TrUserData)},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end;
dfp_read_field_def_LeaseTimeToLiveResponse(Other, Z1,
					   Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData) ->
    dg_read_field_def_LeaseTimeToLiveResponse(Other, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      TrUserData).

dg_read_field_def_LeaseTimeToLiveResponse(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_LeaseTimeToLiveResponse(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, TrUserData);
dg_read_field_def_LeaseTimeToLiveResponse(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_LeaseTimeToLiveResponse_header(Rest, 0, 0, F@_1,
						 F@_2, F@_3, F@_4, F@_5,
						 TrUserData);
      16 ->
	  d_field_LeaseTimeToLiveResponse_ID(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5,
					     TrUserData);
      24 ->
	  d_field_LeaseTimeToLiveResponse_TTL(Rest, 0, 0, F@_1,
					      F@_2, F@_3, F@_4, F@_5,
					      TrUserData);
      32 ->
	  d_field_LeaseTimeToLiveResponse_grantedTTL(Rest, 0, 0,
						     F@_1, F@_2, F@_3, F@_4,
						     F@_5, TrUserData);
      42 ->
	  d_field_LeaseTimeToLiveResponse_keys(Rest, 0, 0, F@_1,
					       F@_2, F@_3, F@_4, F@_5,
					       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_LeaseTimeToLiveResponse(Rest, 0, 0, F@_1,
						    F@_2, F@_3, F@_4, F@_5,
						    TrUserData);
	    1 ->
		skip_64_LeaseTimeToLiveResponse(Rest, 0, 0, F@_1, F@_2,
						F@_3, F@_4, F@_5, TrUserData);
	    2 ->
		skip_length_delimited_LeaseTimeToLiveResponse(Rest, 0,
							      0, F@_1, F@_2,
							      F@_3, F@_4, F@_5,
							      TrUserData);
	    3 ->
		skip_group_LeaseTimeToLiveResponse(Rest, Key bsr 3, 0,
						   F@_1, F@_2, F@_3, F@_4, F@_5,
						   TrUserData);
	    5 ->
		skip_32_LeaseTimeToLiveResponse(Rest, 0, 0, F@_1, F@_2,
						F@_3, F@_4, F@_5, TrUserData)
	  end
    end;
dg_read_field_def_LeaseTimeToLiveResponse(<<>>, 0, 0,
					  F@_1, F@_2, F@_3, F@_4, R1,
					  TrUserData) ->
    S1 = #{'ID' => F@_2, 'TTL' => F@_3, grantedTTL => F@_4,
	   keys => lists_reverse(R1, TrUserData)},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end.

d_field_LeaseTimeToLiveResponse_header(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				       TrUserData)
    when N < 57 ->
    d_field_LeaseTimeToLiveResponse_header(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   F@_4, F@_5, TrUserData);
d_field_LeaseTimeToLiveResponse_header(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, Prev, F@_2, F@_3, F@_4, F@_5,
				       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ResponseHeader(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_LeaseTimeToLiveResponse(RestF, 0, 0,
					       if Prev == '$undef' -> NewFValue;
						  true ->
						      merge_msg_ResponseHeader(Prev,
									       NewFValue,
									       TrUserData)
					       end,
					       F@_2, F@_3, F@_4, F@_5,
					       TrUserData).

d_field_LeaseTimeToLiveResponse_ID(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData)
    when N < 57 ->
    d_field_LeaseTimeToLiveResponse_ID(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, TrUserData);
d_field_LeaseTimeToLiveResponse_ID(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, _, F@_3, F@_4, F@_5,
				   TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_LeaseTimeToLiveResponse(RestF, 0, 0,
					       F@_1, NewFValue, F@_3, F@_4,
					       F@_5, TrUserData).

d_field_LeaseTimeToLiveResponse_TTL(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData)
    when N < 57 ->
    d_field_LeaseTimeToLiveResponse_TTL(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, TrUserData);
d_field_LeaseTimeToLiveResponse_TTL(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, _, F@_4, F@_5,
				    TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_LeaseTimeToLiveResponse(RestF, 0, 0,
					       F@_1, F@_2, NewFValue, F@_4,
					       F@_5, TrUserData).

d_field_LeaseTimeToLiveResponse_grantedTTL(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData)
    when N < 57 ->
    d_field_LeaseTimeToLiveResponse_grantedTTL(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       F@_4, F@_5, TrUserData);
d_field_LeaseTimeToLiveResponse_grantedTTL(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, _, F@_5,
					   TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_LeaseTimeToLiveResponse(RestF, 0, 0,
					       F@_1, F@_2, F@_3, NewFValue,
					       F@_5, TrUserData).

d_field_LeaseTimeToLiveResponse_keys(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				     TrUserData)
    when N < 57 ->
    d_field_LeaseTimeToLiveResponse_keys(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, TrUserData);
d_field_LeaseTimeToLiveResponse_keys(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, Prev,
				     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_LeaseTimeToLiveResponse(RestF, 0, 0,
					       F@_1, F@_2, F@_3, F@_4,
					       cons(NewFValue, Prev,
						    TrUserData),
					       TrUserData).

skip_varint_LeaseTimeToLiveResponse(<<1:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData) ->
    skip_varint_LeaseTimeToLiveResponse(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_varint_LeaseTimeToLiveResponse(<<0:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData) ->
    dfp_read_field_def_LeaseTimeToLiveResponse(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       TrUserData).

skip_length_delimited_LeaseTimeToLiveResponse(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      F@_5, TrUserData)
    when N < 57 ->
    skip_length_delimited_LeaseTimeToLiveResponse(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, F@_4, F@_5,
						  TrUserData);
skip_length_delimited_LeaseTimeToLiveResponse(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      F@_5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LeaseTimeToLiveResponse(Rest2, 0, 0,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       TrUserData).

skip_group_LeaseTimeToLiveResponse(Bin, FNum, Z2, F@_1,
				   F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_LeaseTimeToLiveResponse(Rest, 0, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       TrUserData).

skip_32_LeaseTimeToLiveResponse(<<_:32, Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData) ->
    dfp_read_field_def_LeaseTimeToLiveResponse(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       TrUserData).

skip_64_LeaseTimeToLiveResponse(<<_:64, Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData) ->
    dfp_read_field_def_LeaseTimeToLiveResponse(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       TrUserData).

decode_msg_LeaseLeasesRequest(Bin, TrUserData) ->
    dfp_read_field_def_LeaseLeasesRequest(Bin, 0, 0,
					  TrUserData).

dfp_read_field_def_LeaseLeasesRequest(<<>>, 0, 0, _) ->
    #{};
dfp_read_field_def_LeaseLeasesRequest(Other, Z1, Z2,
				      TrUserData) ->
    dg_read_field_def_LeaseLeasesRequest(Other, Z1, Z2,
					 TrUserData).

dg_read_field_def_LeaseLeasesRequest(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_LeaseLeasesRequest(Rest, N + 7,
					 X bsl N + Acc, TrUserData);
dg_read_field_def_LeaseLeasesRequest(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_LeaseLeasesRequest(Rest, 0, 0, TrUserData);
      1 -> skip_64_LeaseLeasesRequest(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_LeaseLeasesRequest(Rest, 0, 0,
						   TrUserData);
      3 ->
	  skip_group_LeaseLeasesRequest(Rest, Key bsr 3, 0,
					TrUserData);
      5 -> skip_32_LeaseLeasesRequest(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_LeaseLeasesRequest(<<>>, 0, 0, _) ->
    #{}.

skip_varint_LeaseLeasesRequest(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    skip_varint_LeaseLeasesRequest(Rest, Z1, Z2,
				   TrUserData);
skip_varint_LeaseLeasesRequest(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    dfp_read_field_def_LeaseLeasesRequest(Rest, Z1, Z2,
					  TrUserData).

skip_length_delimited_LeaseLeasesRequest(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_LeaseLeasesRequest(Rest, N + 7,
					     X bsl N + Acc, TrUserData);
skip_length_delimited_LeaseLeasesRequest(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LeaseLeasesRequest(Rest2, 0, 0,
					  TrUserData).

skip_group_LeaseLeasesRequest(Bin, FNum, Z2,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_LeaseLeasesRequest(Rest, 0, Z2,
					  TrUserData).

skip_32_LeaseLeasesRequest(<<_:32, Rest/binary>>, Z1,
			   Z2, TrUserData) ->
    dfp_read_field_def_LeaseLeasesRequest(Rest, Z1, Z2,
					  TrUserData).

skip_64_LeaseLeasesRequest(<<_:64, Rest/binary>>, Z1,
			   Z2, TrUserData) ->
    dfp_read_field_def_LeaseLeasesRequest(Rest, Z1, Z2,
					  TrUserData).

decode_msg_LeaseStatus(Bin, TrUserData) ->
    dfp_read_field_def_LeaseStatus(Bin, 0, 0,
				   id(0, TrUserData), TrUserData).

dfp_read_field_def_LeaseStatus(<<8, Rest/binary>>, Z1,
			       Z2, F@_1, TrUserData) ->
    d_field_LeaseStatus_ID(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_LeaseStatus(<<>>, 0, 0, F@_1, _) ->
    #{'ID' => F@_1};
dfp_read_field_def_LeaseStatus(Other, Z1, Z2, F@_1,
			       TrUserData) ->
    dg_read_field_def_LeaseStatus(Other, Z1, Z2, F@_1,
				  TrUserData).

dg_read_field_def_LeaseStatus(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_LeaseStatus(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_LeaseStatus(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_LeaseStatus_ID(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_LeaseStatus(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_LeaseStatus(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_LeaseStatus(Rest, 0, 0, F@_1,
						  TrUserData);
	    3 ->
		skip_group_LeaseStatus(Rest, Key bsr 3, 0, F@_1,
				       TrUserData);
	    5 -> skip_32_LeaseStatus(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_LeaseStatus(<<>>, 0, 0, F@_1, _) ->
    #{'ID' => F@_1}.

d_field_LeaseStatus_ID(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_LeaseStatus_ID(Rest, N + 7, X bsl N + Acc, F@_1,
			   TrUserData);
d_field_LeaseStatus_ID(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_LeaseStatus(RestF, 0, 0, NewFValue,
				   TrUserData).

skip_varint_LeaseStatus(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    skip_varint_LeaseStatus(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_LeaseStatus(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    dfp_read_field_def_LeaseStatus(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_length_delimited_LeaseStatus(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_LeaseStatus(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_LeaseStatus(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LeaseStatus(Rest2, 0, 0, F@_1,
				   TrUserData).

skip_group_LeaseStatus(Bin, FNum, Z2, F@_1,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_LeaseStatus(Rest, 0, Z2, F@_1,
				   TrUserData).

skip_32_LeaseStatus(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_LeaseStatus(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_64_LeaseStatus(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_LeaseStatus(Rest, Z1, Z2, F@_1,
				   TrUserData).

decode_msg_LeaseLeasesResponse(Bin, TrUserData) ->
    dfp_read_field_def_LeaseLeasesResponse(Bin, 0, 0,
					   id(undefined, TrUserData),
					   id([], TrUserData), TrUserData).

dfp_read_field_def_LeaseLeasesResponse(<<10,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_LeaseLeasesResponse_header(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData);
dfp_read_field_def_LeaseLeasesResponse(<<18,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_LeaseLeasesResponse_leases(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData);
dfp_read_field_def_LeaseLeasesResponse(<<>>, 0, 0, F@_1,
				       R1, TrUserData) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{header => F@_1}
	 end,
    if R1 == '$undef' -> S2;
       true -> S2#{leases => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_LeaseLeasesResponse(Other, Z1, Z2,
				       F@_1, F@_2, TrUserData) ->
    dg_read_field_def_LeaseLeasesResponse(Other, Z1, Z2,
					  F@_1, F@_2, TrUserData).

dg_read_field_def_LeaseLeasesResponse(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_LeaseLeasesResponse(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
dg_read_field_def_LeaseLeasesResponse(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_LeaseLeasesResponse_header(Rest, 0, 0, F@_1,
					     F@_2, TrUserData);
      18 ->
	  d_field_LeaseLeasesResponse_leases(Rest, 0, 0, F@_1,
					     F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_LeaseLeasesResponse(Rest, 0, 0, F@_1, F@_2,
						TrUserData);
	    1 ->
		skip_64_LeaseLeasesResponse(Rest, 0, 0, F@_1, F@_2,
					    TrUserData);
	    2 ->
		skip_length_delimited_LeaseLeasesResponse(Rest, 0, 0,
							  F@_1, F@_2,
							  TrUserData);
	    3 ->
		skip_group_LeaseLeasesResponse(Rest, Key bsr 3, 0, F@_1,
					       F@_2, TrUserData);
	    5 ->
		skip_32_LeaseLeasesResponse(Rest, 0, 0, F@_1, F@_2,
					    TrUserData)
	  end
    end;
dg_read_field_def_LeaseLeasesResponse(<<>>, 0, 0, F@_1,
				      R1, TrUserData) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{header => F@_1}
	 end,
    if R1 == '$undef' -> S2;
       true -> S2#{leases => lists_reverse(R1, TrUserData)}
    end.

d_field_LeaseLeasesResponse_header(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_LeaseLeasesResponse_header(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_LeaseLeasesResponse_header(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ResponseHeader(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_LeaseLeasesResponse(RestF, 0, 0,
					   if Prev == '$undef' -> NewFValue;
					      true ->
						  merge_msg_ResponseHeader(Prev,
									   NewFValue,
									   TrUserData)
					   end,
					   F@_2, TrUserData).

d_field_LeaseLeasesResponse_leases(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_LeaseLeasesResponse_leases(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_LeaseLeasesResponse_leases(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_LeaseStatus(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_LeaseLeasesResponse(RestF, 0, 0,
					   F@_1,
					   cons(NewFValue, Prev, TrUserData),
					   TrUserData).

skip_varint_LeaseLeasesResponse(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_LeaseLeasesResponse(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData);
skip_varint_LeaseLeasesResponse(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_LeaseLeasesResponse(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

skip_length_delimited_LeaseLeasesResponse(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_LeaseLeasesResponse(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2,
					      TrUserData);
skip_length_delimited_LeaseLeasesResponse(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LeaseLeasesResponse(Rest2, 0, 0,
					   F@_1, F@_2, TrUserData).

skip_group_LeaseLeasesResponse(Bin, FNum, Z2, F@_1,
			       F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_LeaseLeasesResponse(Rest, 0, Z2,
					   F@_1, F@_2, TrUserData).

skip_32_LeaseLeasesResponse(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_LeaseLeasesResponse(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

skip_64_LeaseLeasesResponse(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_LeaseLeasesResponse(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

decode_msg_Member(Bin, TrUserData) ->
    dfp_read_field_def_Member(Bin, 0, 0, id(0, TrUserData),
			      id([], TrUserData), id([], TrUserData),
			      id([], TrUserData), TrUserData).

dfp_read_field_def_Member(<<8, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_Member_ID(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		      TrUserData);
dfp_read_field_def_Member(<<18, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_Member_name(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, TrUserData);
dfp_read_field_def_Member(<<26, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_Member_peerURLs(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, TrUserData);
dfp_read_field_def_Member(<<34, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_Member_clientURLs(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData);
dfp_read_field_def_Member(<<>>, 0, 0, F@_1, F@_2, R1,
			  R2, TrUserData) ->
    #{'ID' => F@_1, name => F@_2,
      peerURLs => lists_reverse(R1, TrUserData),
      clientURLs => lists_reverse(R2, TrUserData)};
dfp_read_field_def_Member(Other, Z1, Z2, F@_1, F@_2,
			  F@_3, F@_4, TrUserData) ->
    dg_read_field_def_Member(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, F@_4, TrUserData).

dg_read_field_def_Member(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Member(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_Member(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_Member_ID(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			    TrUserData);
      18 ->
	  d_field_Member_name(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      TrUserData);
      26 ->
	  d_field_Member_peerURLs(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, TrUserData);
      34 ->
	  d_field_Member_clientURLs(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Member(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   TrUserData);
	    1 ->
		skip_64_Member(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       TrUserData);
	    2 ->
		skip_length_delimited_Member(Rest, 0, 0, F@_1, F@_2,
					     F@_3, F@_4, TrUserData);
	    3 ->
		skip_group_Member(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				  F@_4, TrUserData);
	    5 ->
		skip_32_Member(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       TrUserData)
	  end
    end;
dg_read_field_def_Member(<<>>, 0, 0, F@_1, F@_2, R1, R2,
			 TrUserData) ->
    #{'ID' => F@_1, name => F@_2,
      peerURLs => lists_reverse(R1, TrUserData),
      clientURLs => lists_reverse(R2, TrUserData)}.

d_field_Member_ID(<<1:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_Member_ID(Rest, N + 7, X bsl N + Acc, F@_1,
		      F@_2, F@_3, F@_4, TrUserData);
d_field_Member_ID(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		  F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_Member(RestF, 0, 0, NewFValue, F@_2,
			      F@_3, F@_4, TrUserData).

d_field_Member_name(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_Member_name(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, TrUserData);
d_field_Member_name(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Member(RestF, 0, 0, F@_1, NewFValue,
			      F@_3, F@_4, TrUserData).

d_field_Member_peerURLs(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_Member_peerURLs(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_Member_peerURLs(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, Prev, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Member(RestF, 0, 0, F@_1, F@_2,
			      cons(NewFValue, Prev, TrUserData), F@_4,
			      TrUserData).

d_field_Member_clientURLs(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_Member_clientURLs(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_Member_clientURLs(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Member(RestF, 0, 0, F@_1, F@_2, F@_3,
			      cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_Member(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_Member(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       TrUserData);
skip_varint_Member(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_Member(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData).

skip_length_delimited_Member(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_Member(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_Member(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Member(Rest2, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, TrUserData).

skip_group_Member(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4,
		  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Member(Rest, 0, Z2, F@_1, F@_2, F@_3,
			      F@_4, TrUserData).

skip_32_Member(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_Member(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData).

skip_64_Member(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_Member(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData).

decode_msg_MemberAddRequest(Bin, TrUserData) ->
    dfp_read_field_def_MemberAddRequest(Bin, 0, 0,
					id([], TrUserData), TrUserData).

dfp_read_field_def_MemberAddRequest(<<10, Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    d_field_MemberAddRequest_peerURLs(Rest, Z1, Z2, F@_1,
				      TrUserData);
dfp_read_field_def_MemberAddRequest(<<>>, 0, 0, R1,
				    TrUserData) ->
    #{peerURLs => lists_reverse(R1, TrUserData)};
dfp_read_field_def_MemberAddRequest(Other, Z1, Z2, F@_1,
				    TrUserData) ->
    dg_read_field_def_MemberAddRequest(Other, Z1, Z2, F@_1,
				       TrUserData).

dg_read_field_def_MemberAddRequest(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_MemberAddRequest(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_MemberAddRequest(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_MemberAddRequest_peerURLs(Rest, 0, 0, F@_1,
					    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_MemberAddRequest(Rest, 0, 0, F@_1,
					     TrUserData);
	    1 ->
		skip_64_MemberAddRequest(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_MemberAddRequest(Rest, 0, 0, F@_1,
						       TrUserData);
	    3 ->
		skip_group_MemberAddRequest(Rest, Key bsr 3, 0, F@_1,
					    TrUserData);
	    5 ->
		skip_32_MemberAddRequest(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_MemberAddRequest(<<>>, 0, 0, R1,
				   TrUserData) ->
    #{peerURLs => lists_reverse(R1, TrUserData)}.

d_field_MemberAddRequest_peerURLs(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_MemberAddRequest_peerURLs(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
d_field_MemberAddRequest_peerURLs(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_MemberAddRequest(RestF, 0, 0,
					cons(NewFValue, Prev, TrUserData),
					TrUserData).

skip_varint_MemberAddRequest(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, TrUserData) ->
    skip_varint_MemberAddRequest(Rest, Z1, Z2, F@_1,
				 TrUserData);
skip_varint_MemberAddRequest(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_MemberAddRequest(Rest, Z1, Z2, F@_1,
					TrUserData).

skip_length_delimited_MemberAddRequest(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_MemberAddRequest(Rest, N + 7,
					   X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_MemberAddRequest(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MemberAddRequest(Rest2, 0, 0, F@_1,
					TrUserData).

skip_group_MemberAddRequest(Bin, FNum, Z2, F@_1,
			    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MemberAddRequest(Rest, 0, Z2, F@_1,
					TrUserData).

skip_32_MemberAddRequest(<<_:32, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    dfp_read_field_def_MemberAddRequest(Rest, Z1, Z2, F@_1,
					TrUserData).

skip_64_MemberAddRequest(<<_:64, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    dfp_read_field_def_MemberAddRequest(Rest, Z1, Z2, F@_1,
					TrUserData).

decode_msg_MemberAddResponse(Bin, TrUserData) ->
    dfp_read_field_def_MemberAddResponse(Bin, 0, 0,
					 id(undefined, TrUserData),
					 id(undefined, TrUserData),
					 id([], TrUserData), TrUserData).

dfp_read_field_def_MemberAddResponse(<<10,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_MemberAddResponse_header(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, TrUserData);
dfp_read_field_def_MemberAddResponse(<<18,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_MemberAddResponse_member(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, TrUserData);
dfp_read_field_def_MemberAddResponse(<<26,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_MemberAddResponse_members(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, TrUserData);
dfp_read_field_def_MemberAddResponse(<<>>, 0, 0, F@_1,
				     F@_2, R1, TrUserData) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{header => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{member => F@_2}
	 end,
    if R1 == '$undef' -> S3;
       true -> S3#{members => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_MemberAddResponse(Other, Z1, Z2,
				     F@_1, F@_2, F@_3, TrUserData) ->
    dg_read_field_def_MemberAddResponse(Other, Z1, Z2, F@_1,
					F@_2, F@_3, TrUserData).

dg_read_field_def_MemberAddResponse(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_MemberAddResponse(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3,
					TrUserData);
dg_read_field_def_MemberAddResponse(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_MemberAddResponse_header(Rest, 0, 0, F@_1, F@_2,
					   F@_3, TrUserData);
      18 ->
	  d_field_MemberAddResponse_member(Rest, 0, 0, F@_1, F@_2,
					   F@_3, TrUserData);
      26 ->
	  d_field_MemberAddResponse_members(Rest, 0, 0, F@_1,
					    F@_2, F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_MemberAddResponse(Rest, 0, 0, F@_1, F@_2,
					      F@_3, TrUserData);
	    1 ->
		skip_64_MemberAddResponse(Rest, 0, 0, F@_1, F@_2, F@_3,
					  TrUserData);
	    2 ->
		skip_length_delimited_MemberAddResponse(Rest, 0, 0,
							F@_1, F@_2, F@_3,
							TrUserData);
	    3 ->
		skip_group_MemberAddResponse(Rest, Key bsr 3, 0, F@_1,
					     F@_2, F@_3, TrUserData);
	    5 ->
		skip_32_MemberAddResponse(Rest, 0, 0, F@_1, F@_2, F@_3,
					  TrUserData)
	  end
    end;
dg_read_field_def_MemberAddResponse(<<>>, 0, 0, F@_1,
				    F@_2, R1, TrUserData) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{header => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{member => F@_2}
	 end,
    if R1 == '$undef' -> S3;
       true -> S3#{members => lists_reverse(R1, TrUserData)}
    end.

d_field_MemberAddResponse_header(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_MemberAddResponse_header(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3,
				     TrUserData);
d_field_MemberAddResponse_header(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, Prev, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ResponseHeader(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_MemberAddResponse(RestF, 0, 0,
					 if Prev == '$undef' -> NewFValue;
					    true ->
						merge_msg_ResponseHeader(Prev,
									 NewFValue,
									 TrUserData)
					 end,
					 F@_2, F@_3, TrUserData).

d_field_MemberAddResponse_member(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_MemberAddResponse_member(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3,
				     TrUserData);
d_field_MemberAddResponse_member(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, Prev, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_Member(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_MemberAddResponse(RestF, 0, 0, F@_1,
					 if Prev == '$undef' -> NewFValue;
					    true ->
						merge_msg_Member(Prev,
								 NewFValue,
								 TrUserData)
					 end,
					 F@_3, TrUserData).

d_field_MemberAddResponse_members(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_MemberAddResponse_members(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3,
				      TrUserData);
d_field_MemberAddResponse_members(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_Member(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_MemberAddResponse(RestF, 0, 0, F@_1,
					 F@_2,
					 cons(NewFValue, Prev, TrUserData),
					 TrUserData).

skip_varint_MemberAddResponse(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_MemberAddResponse(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData);
skip_varint_MemberAddResponse(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_MemberAddResponse(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, TrUserData).

skip_length_delimited_MemberAddResponse(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_MemberAddResponse(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    TrUserData);
skip_length_delimited_MemberAddResponse(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MemberAddResponse(Rest2, 0, 0, F@_1,
					 F@_2, F@_3, TrUserData).

skip_group_MemberAddResponse(Bin, FNum, Z2, F@_1, F@_2,
			     F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MemberAddResponse(Rest, 0, Z2, F@_1,
					 F@_2, F@_3, TrUserData).

skip_32_MemberAddResponse(<<_:32, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_MemberAddResponse(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, TrUserData).

skip_64_MemberAddResponse(<<_:64, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_MemberAddResponse(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, TrUserData).

decode_msg_MemberRemoveRequest(Bin, TrUserData) ->
    dfp_read_field_def_MemberRemoveRequest(Bin, 0, 0,
					   id(0, TrUserData), TrUserData).

dfp_read_field_def_MemberRemoveRequest(<<8,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    d_field_MemberRemoveRequest_ID(Rest, Z1, Z2, F@_1,
				   TrUserData);
dfp_read_field_def_MemberRemoveRequest(<<>>, 0, 0, F@_1,
				       _) ->
    #{'ID' => F@_1};
dfp_read_field_def_MemberRemoveRequest(Other, Z1, Z2,
				       F@_1, TrUserData) ->
    dg_read_field_def_MemberRemoveRequest(Other, Z1, Z2,
					  F@_1, TrUserData).

dg_read_field_def_MemberRemoveRequest(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_MemberRemoveRequest(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_MemberRemoveRequest(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_MemberRemoveRequest_ID(Rest, 0, 0, F@_1,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_MemberRemoveRequest(Rest, 0, 0, F@_1,
						TrUserData);
	    1 ->
		skip_64_MemberRemoveRequest(Rest, 0, 0, F@_1,
					    TrUserData);
	    2 ->
		skip_length_delimited_MemberRemoveRequest(Rest, 0, 0,
							  F@_1, TrUserData);
	    3 ->
		skip_group_MemberRemoveRequest(Rest, Key bsr 3, 0, F@_1,
					       TrUserData);
	    5 ->
		skip_32_MemberRemoveRequest(Rest, 0, 0, F@_1,
					    TrUserData)
	  end
    end;
dg_read_field_def_MemberRemoveRequest(<<>>, 0, 0, F@_1,
				      _) ->
    #{'ID' => F@_1}.

d_field_MemberRemoveRequest_ID(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_MemberRemoveRequest_ID(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
d_field_MemberRemoveRequest_ID(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_MemberRemoveRequest(RestF, 0, 0,
					   NewFValue, TrUserData).

skip_varint_MemberRemoveRequest(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    skip_varint_MemberRemoveRequest(Rest, Z1, Z2, F@_1,
				    TrUserData);
skip_varint_MemberRemoveRequest(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_MemberRemoveRequest(Rest, Z1, Z2,
					   F@_1, TrUserData).

skip_length_delimited_MemberRemoveRequest(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_MemberRemoveRequest(Rest, N + 7,
					      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_MemberRemoveRequest(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MemberRemoveRequest(Rest2, 0, 0,
					   F@_1, TrUserData).

skip_group_MemberRemoveRequest(Bin, FNum, Z2, F@_1,
			       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MemberRemoveRequest(Rest, 0, Z2,
					   F@_1, TrUserData).

skip_32_MemberRemoveRequest(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, TrUserData) ->
    dfp_read_field_def_MemberRemoveRequest(Rest, Z1, Z2,
					   F@_1, TrUserData).

skip_64_MemberRemoveRequest(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, TrUserData) ->
    dfp_read_field_def_MemberRemoveRequest(Rest, Z1, Z2,
					   F@_1, TrUserData).

decode_msg_MemberRemoveResponse(Bin, TrUserData) ->
    dfp_read_field_def_MemberRemoveResponse(Bin, 0, 0,
					    id(undefined, TrUserData),
					    id([], TrUserData), TrUserData).

dfp_read_field_def_MemberRemoveResponse(<<10,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_MemberRemoveResponse_header(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData);
dfp_read_field_def_MemberRemoveResponse(<<18,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_MemberRemoveResponse_members(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData);
dfp_read_field_def_MemberRemoveResponse(<<>>, 0, 0,
					F@_1, R1, TrUserData) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{header => F@_1}
	 end,
    if R1 == '$undef' -> S2;
       true -> S2#{members => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_MemberRemoveResponse(Other, Z1, Z2,
					F@_1, F@_2, TrUserData) ->
    dg_read_field_def_MemberRemoveResponse(Other, Z1, Z2,
					   F@_1, F@_2, TrUserData).

dg_read_field_def_MemberRemoveResponse(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_MemberRemoveResponse(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2,
					   TrUserData);
dg_read_field_def_MemberRemoveResponse(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_MemberRemoveResponse_header(Rest, 0, 0, F@_1,
					      F@_2, TrUserData);
      18 ->
	  d_field_MemberRemoveResponse_members(Rest, 0, 0, F@_1,
					       F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_MemberRemoveResponse(Rest, 0, 0, F@_1, F@_2,
						 TrUserData);
	    1 ->
		skip_64_MemberRemoveResponse(Rest, 0, 0, F@_1, F@_2,
					     TrUserData);
	    2 ->
		skip_length_delimited_MemberRemoveResponse(Rest, 0, 0,
							   F@_1, F@_2,
							   TrUserData);
	    3 ->
		skip_group_MemberRemoveResponse(Rest, Key bsr 3, 0,
						F@_1, F@_2, TrUserData);
	    5 ->
		skip_32_MemberRemoveResponse(Rest, 0, 0, F@_1, F@_2,
					     TrUserData)
	  end
    end;
dg_read_field_def_MemberRemoveResponse(<<>>, 0, 0, F@_1,
				       R1, TrUserData) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{header => F@_1}
	 end,
    if R1 == '$undef' -> S2;
       true -> S2#{members => lists_reverse(R1, TrUserData)}
    end.

d_field_MemberRemoveResponse_header(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_MemberRemoveResponse_header(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_MemberRemoveResponse_header(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ResponseHeader(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_MemberRemoveResponse(RestF, 0, 0,
					    if Prev == '$undef' -> NewFValue;
					       true ->
						   merge_msg_ResponseHeader(Prev,
									    NewFValue,
									    TrUserData)
					    end,
					    F@_2, TrUserData).

d_field_MemberRemoveResponse_members(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_MemberRemoveResponse_members(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_MemberRemoveResponse_members(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_Member(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_MemberRemoveResponse(RestF, 0, 0,
					    F@_1,
					    cons(NewFValue, Prev, TrUserData),
					    TrUserData).

skip_varint_MemberRemoveResponse(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_MemberRemoveResponse(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
skip_varint_MemberRemoveResponse(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_MemberRemoveResponse(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

skip_length_delimited_MemberRemoveResponse(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_MemberRemoveResponse(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2,
					       TrUserData);
skip_length_delimited_MemberRemoveResponse(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MemberRemoveResponse(Rest2, 0, 0,
					    F@_1, F@_2, TrUserData).

skip_group_MemberRemoveResponse(Bin, FNum, Z2, F@_1,
				F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MemberRemoveResponse(Rest, 0, Z2,
					    F@_1, F@_2, TrUserData).

skip_32_MemberRemoveResponse(<<_:32, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_MemberRemoveResponse(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

skip_64_MemberRemoveResponse(<<_:64, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_MemberRemoveResponse(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

decode_msg_MemberUpdateRequest(Bin, TrUserData) ->
    dfp_read_field_def_MemberUpdateRequest(Bin, 0, 0,
					   id(0, TrUserData),
					   id([], TrUserData), TrUserData).

dfp_read_field_def_MemberUpdateRequest(<<8,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_MemberUpdateRequest_ID(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
dfp_read_field_def_MemberUpdateRequest(<<18,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_MemberUpdateRequest_peerURLs(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData);
dfp_read_field_def_MemberUpdateRequest(<<>>, 0, 0, F@_1,
				       R1, TrUserData) ->
    #{'ID' => F@_1,
      peerURLs => lists_reverse(R1, TrUserData)};
dfp_read_field_def_MemberUpdateRequest(Other, Z1, Z2,
				       F@_1, F@_2, TrUserData) ->
    dg_read_field_def_MemberUpdateRequest(Other, Z1, Z2,
					  F@_1, F@_2, TrUserData).

dg_read_field_def_MemberUpdateRequest(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_MemberUpdateRequest(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
dg_read_field_def_MemberUpdateRequest(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_MemberUpdateRequest_ID(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
      18 ->
	  d_field_MemberUpdateRequest_peerURLs(Rest, 0, 0, F@_1,
					       F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_MemberUpdateRequest(Rest, 0, 0, F@_1, F@_2,
						TrUserData);
	    1 ->
		skip_64_MemberUpdateRequest(Rest, 0, 0, F@_1, F@_2,
					    TrUserData);
	    2 ->
		skip_length_delimited_MemberUpdateRequest(Rest, 0, 0,
							  F@_1, F@_2,
							  TrUserData);
	    3 ->
		skip_group_MemberUpdateRequest(Rest, Key bsr 3, 0, F@_1,
					       F@_2, TrUserData);
	    5 ->
		skip_32_MemberUpdateRequest(Rest, 0, 0, F@_1, F@_2,
					    TrUserData)
	  end
    end;
dg_read_field_def_MemberUpdateRequest(<<>>, 0, 0, F@_1,
				      R1, TrUserData) ->
    #{'ID' => F@_1,
      peerURLs => lists_reverse(R1, TrUserData)}.

d_field_MemberUpdateRequest_ID(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_MemberUpdateRequest_ID(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_MemberUpdateRequest_ID(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_MemberUpdateRequest(RestF, 0, 0,
					   NewFValue, F@_2, TrUserData).

d_field_MemberUpdateRequest_peerURLs(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_MemberUpdateRequest_peerURLs(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_MemberUpdateRequest_peerURLs(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_MemberUpdateRequest(RestF, 0, 0,
					   F@_1,
					   cons(NewFValue, Prev, TrUserData),
					   TrUserData).

skip_varint_MemberUpdateRequest(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_MemberUpdateRequest(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData);
skip_varint_MemberUpdateRequest(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_MemberUpdateRequest(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

skip_length_delimited_MemberUpdateRequest(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_MemberUpdateRequest(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2,
					      TrUserData);
skip_length_delimited_MemberUpdateRequest(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MemberUpdateRequest(Rest2, 0, 0,
					   F@_1, F@_2, TrUserData).

skip_group_MemberUpdateRequest(Bin, FNum, Z2, F@_1,
			       F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MemberUpdateRequest(Rest, 0, Z2,
					   F@_1, F@_2, TrUserData).

skip_32_MemberUpdateRequest(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_MemberUpdateRequest(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

skip_64_MemberUpdateRequest(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_MemberUpdateRequest(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

decode_msg_MemberUpdateResponse(Bin, TrUserData) ->
    dfp_read_field_def_MemberUpdateResponse(Bin, 0, 0,
					    id(undefined, TrUserData),
					    id([], TrUserData), TrUserData).

dfp_read_field_def_MemberUpdateResponse(<<10,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_MemberUpdateResponse_header(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData);
dfp_read_field_def_MemberUpdateResponse(<<18,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_MemberUpdateResponse_members(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData);
dfp_read_field_def_MemberUpdateResponse(<<>>, 0, 0,
					F@_1, R1, TrUserData) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{header => F@_1}
	 end,
    if R1 == '$undef' -> S2;
       true -> S2#{members => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_MemberUpdateResponse(Other, Z1, Z2,
					F@_1, F@_2, TrUserData) ->
    dg_read_field_def_MemberUpdateResponse(Other, Z1, Z2,
					   F@_1, F@_2, TrUserData).

dg_read_field_def_MemberUpdateResponse(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_MemberUpdateResponse(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2,
					   TrUserData);
dg_read_field_def_MemberUpdateResponse(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_MemberUpdateResponse_header(Rest, 0, 0, F@_1,
					      F@_2, TrUserData);
      18 ->
	  d_field_MemberUpdateResponse_members(Rest, 0, 0, F@_1,
					       F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_MemberUpdateResponse(Rest, 0, 0, F@_1, F@_2,
						 TrUserData);
	    1 ->
		skip_64_MemberUpdateResponse(Rest, 0, 0, F@_1, F@_2,
					     TrUserData);
	    2 ->
		skip_length_delimited_MemberUpdateResponse(Rest, 0, 0,
							   F@_1, F@_2,
							   TrUserData);
	    3 ->
		skip_group_MemberUpdateResponse(Rest, Key bsr 3, 0,
						F@_1, F@_2, TrUserData);
	    5 ->
		skip_32_MemberUpdateResponse(Rest, 0, 0, F@_1, F@_2,
					     TrUserData)
	  end
    end;
dg_read_field_def_MemberUpdateResponse(<<>>, 0, 0, F@_1,
				       R1, TrUserData) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{header => F@_1}
	 end,
    if R1 == '$undef' -> S2;
       true -> S2#{members => lists_reverse(R1, TrUserData)}
    end.

d_field_MemberUpdateResponse_header(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_MemberUpdateResponse_header(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_MemberUpdateResponse_header(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ResponseHeader(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_MemberUpdateResponse(RestF, 0, 0,
					    if Prev == '$undef' -> NewFValue;
					       true ->
						   merge_msg_ResponseHeader(Prev,
									    NewFValue,
									    TrUserData)
					    end,
					    F@_2, TrUserData).

d_field_MemberUpdateResponse_members(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_MemberUpdateResponse_members(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_MemberUpdateResponse_members(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_Member(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_MemberUpdateResponse(RestF, 0, 0,
					    F@_1,
					    cons(NewFValue, Prev, TrUserData),
					    TrUserData).

skip_varint_MemberUpdateResponse(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_MemberUpdateResponse(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
skip_varint_MemberUpdateResponse(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_MemberUpdateResponse(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

skip_length_delimited_MemberUpdateResponse(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_MemberUpdateResponse(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2,
					       TrUserData);
skip_length_delimited_MemberUpdateResponse(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MemberUpdateResponse(Rest2, 0, 0,
					    F@_1, F@_2, TrUserData).

skip_group_MemberUpdateResponse(Bin, FNum, Z2, F@_1,
				F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MemberUpdateResponse(Rest, 0, Z2,
					    F@_1, F@_2, TrUserData).

skip_32_MemberUpdateResponse(<<_:32, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_MemberUpdateResponse(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

skip_64_MemberUpdateResponse(<<_:64, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_MemberUpdateResponse(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

decode_msg_MemberListRequest(Bin, TrUserData) ->
    dfp_read_field_def_MemberListRequest(Bin, 0, 0,
					 TrUserData).

dfp_read_field_def_MemberListRequest(<<>>, 0, 0, _) ->
    #{};
dfp_read_field_def_MemberListRequest(Other, Z1, Z2,
				     TrUserData) ->
    dg_read_field_def_MemberListRequest(Other, Z1, Z2,
					TrUserData).

dg_read_field_def_MemberListRequest(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_MemberListRequest(Rest, N + 7,
					X bsl N + Acc, TrUserData);
dg_read_field_def_MemberListRequest(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_MemberListRequest(Rest, 0, 0, TrUserData);
      1 -> skip_64_MemberListRequest(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_MemberListRequest(Rest, 0, 0,
						  TrUserData);
      3 ->
	  skip_group_MemberListRequest(Rest, Key bsr 3, 0,
				       TrUserData);
      5 -> skip_32_MemberListRequest(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_MemberListRequest(<<>>, 0, 0, _) ->
    #{}.

skip_varint_MemberListRequest(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, TrUserData) ->
    skip_varint_MemberListRequest(Rest, Z1, Z2, TrUserData);
skip_varint_MemberListRequest(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, TrUserData) ->
    dfp_read_field_def_MemberListRequest(Rest, Z1, Z2,
					 TrUserData).

skip_length_delimited_MemberListRequest(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_MemberListRequest(Rest, N + 7,
					    X bsl N + Acc, TrUserData);
skip_length_delimited_MemberListRequest(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MemberListRequest(Rest2, 0, 0,
					 TrUserData).

skip_group_MemberListRequest(Bin, FNum, Z2,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MemberListRequest(Rest, 0, Z2,
					 TrUserData).

skip_32_MemberListRequest(<<_:32, Rest/binary>>, Z1, Z2,
			  TrUserData) ->
    dfp_read_field_def_MemberListRequest(Rest, Z1, Z2,
					 TrUserData).

skip_64_MemberListRequest(<<_:64, Rest/binary>>, Z1, Z2,
			  TrUserData) ->
    dfp_read_field_def_MemberListRequest(Rest, Z1, Z2,
					 TrUserData).

decode_msg_MemberListResponse(Bin, TrUserData) ->
    dfp_read_field_def_MemberListResponse(Bin, 0, 0,
					  id(undefined, TrUserData),
					  id([], TrUserData), TrUserData).

dfp_read_field_def_MemberListResponse(<<10,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_MemberListResponse_header(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData);
dfp_read_field_def_MemberListResponse(<<18,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_MemberListResponse_members(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData);
dfp_read_field_def_MemberListResponse(<<>>, 0, 0, F@_1,
				      R1, TrUserData) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{header => F@_1}
	 end,
    if R1 == '$undef' -> S2;
       true -> S2#{members => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_MemberListResponse(Other, Z1, Z2,
				      F@_1, F@_2, TrUserData) ->
    dg_read_field_def_MemberListResponse(Other, Z1, Z2,
					 F@_1, F@_2, TrUserData).

dg_read_field_def_MemberListResponse(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_MemberListResponse(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_MemberListResponse(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_MemberListResponse_header(Rest, 0, 0, F@_1,
					    F@_2, TrUserData);
      18 ->
	  d_field_MemberListResponse_members(Rest, 0, 0, F@_1,
					     F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_MemberListResponse(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    1 ->
		skip_64_MemberListResponse(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
	    2 ->
		skip_length_delimited_MemberListResponse(Rest, 0, 0,
							 F@_1, F@_2,
							 TrUserData);
	    3 ->
		skip_group_MemberListResponse(Rest, Key bsr 3, 0, F@_1,
					      F@_2, TrUserData);
	    5 ->
		skip_32_MemberListResponse(Rest, 0, 0, F@_1, F@_2,
					   TrUserData)
	  end
    end;
dg_read_field_def_MemberListResponse(<<>>, 0, 0, F@_1,
				     R1, TrUserData) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{header => F@_1}
	 end,
    if R1 == '$undef' -> S2;
       true -> S2#{members => lists_reverse(R1, TrUserData)}
    end.

d_field_MemberListResponse_header(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_MemberListResponse_header(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_MemberListResponse_header(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ResponseHeader(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_MemberListResponse(RestF, 0, 0,
					  if Prev == '$undef' -> NewFValue;
					     true ->
						 merge_msg_ResponseHeader(Prev,
									  NewFValue,
									  TrUserData)
					  end,
					  F@_2, TrUserData).

d_field_MemberListResponse_members(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_MemberListResponse_members(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_MemberListResponse_members(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_Member(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_MemberListResponse(RestF, 0, 0, F@_1,
					  cons(NewFValue, Prev, TrUserData),
					  TrUserData).

skip_varint_MemberListResponse(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_MemberListResponse(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
skip_varint_MemberListResponse(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_MemberListResponse(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

skip_length_delimited_MemberListResponse(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_MemberListResponse(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2,
					     TrUserData);
skip_length_delimited_MemberListResponse(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MemberListResponse(Rest2, 0, 0, F@_1,
					  F@_2, TrUserData).

skip_group_MemberListResponse(Bin, FNum, Z2, F@_1, F@_2,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MemberListResponse(Rest, 0, Z2, F@_1,
					  F@_2, TrUserData).

skip_32_MemberListResponse(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_MemberListResponse(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

skip_64_MemberListResponse(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_MemberListResponse(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

decode_msg_DefragmentRequest(Bin, TrUserData) ->
    dfp_read_field_def_DefragmentRequest(Bin, 0, 0,
					 TrUserData).

dfp_read_field_def_DefragmentRequest(<<>>, 0, 0, _) ->
    #{};
dfp_read_field_def_DefragmentRequest(Other, Z1, Z2,
				     TrUserData) ->
    dg_read_field_def_DefragmentRequest(Other, Z1, Z2,
					TrUserData).

dg_read_field_def_DefragmentRequest(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_DefragmentRequest(Rest, N + 7,
					X bsl N + Acc, TrUserData);
dg_read_field_def_DefragmentRequest(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_DefragmentRequest(Rest, 0, 0, TrUserData);
      1 -> skip_64_DefragmentRequest(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_DefragmentRequest(Rest, 0, 0,
						  TrUserData);
      3 ->
	  skip_group_DefragmentRequest(Rest, Key bsr 3, 0,
				       TrUserData);
      5 -> skip_32_DefragmentRequest(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_DefragmentRequest(<<>>, 0, 0, _) ->
    #{}.

skip_varint_DefragmentRequest(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, TrUserData) ->
    skip_varint_DefragmentRequest(Rest, Z1, Z2, TrUserData);
skip_varint_DefragmentRequest(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, TrUserData) ->
    dfp_read_field_def_DefragmentRequest(Rest, Z1, Z2,
					 TrUserData).

skip_length_delimited_DefragmentRequest(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_DefragmentRequest(Rest, N + 7,
					    X bsl N + Acc, TrUserData);
skip_length_delimited_DefragmentRequest(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DefragmentRequest(Rest2, 0, 0,
					 TrUserData).

skip_group_DefragmentRequest(Bin, FNum, Z2,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_DefragmentRequest(Rest, 0, Z2,
					 TrUserData).

skip_32_DefragmentRequest(<<_:32, Rest/binary>>, Z1, Z2,
			  TrUserData) ->
    dfp_read_field_def_DefragmentRequest(Rest, Z1, Z2,
					 TrUserData).

skip_64_DefragmentRequest(<<_:64, Rest/binary>>, Z1, Z2,
			  TrUserData) ->
    dfp_read_field_def_DefragmentRequest(Rest, Z1, Z2,
					 TrUserData).

decode_msg_DefragmentResponse(Bin, TrUserData) ->
    dfp_read_field_def_DefragmentResponse(Bin, 0, 0,
					  id(undefined, TrUserData),
					  TrUserData).

dfp_read_field_def_DefragmentResponse(<<10,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    d_field_DefragmentResponse_header(Rest, Z1, Z2, F@_1,
				      TrUserData);
dfp_read_field_def_DefragmentResponse(<<>>, 0, 0, F@_1,
				      _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end;
dfp_read_field_def_DefragmentResponse(Other, Z1, Z2,
				      F@_1, TrUserData) ->
    dg_read_field_def_DefragmentResponse(Other, Z1, Z2,
					 F@_1, TrUserData).

dg_read_field_def_DefragmentResponse(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_DefragmentResponse(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_DefragmentResponse(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_DefragmentResponse_header(Rest, 0, 0, F@_1,
					    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_DefragmentResponse(Rest, 0, 0, F@_1,
					       TrUserData);
	    1 ->
		skip_64_DefragmentResponse(Rest, 0, 0, F@_1,
					   TrUserData);
	    2 ->
		skip_length_delimited_DefragmentResponse(Rest, 0, 0,
							 F@_1, TrUserData);
	    3 ->
		skip_group_DefragmentResponse(Rest, Key bsr 3, 0, F@_1,
					      TrUserData);
	    5 ->
		skip_32_DefragmentResponse(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_DefragmentResponse(<<>>, 0, 0, F@_1,
				     _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end.

d_field_DefragmentResponse_header(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_DefragmentResponse_header(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
d_field_DefragmentResponse_header(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ResponseHeader(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_DefragmentResponse(RestF, 0, 0,
					  if Prev == '$undef' -> NewFValue;
					     true ->
						 merge_msg_ResponseHeader(Prev,
									  NewFValue,
									  TrUserData)
					  end,
					  TrUserData).

skip_varint_DefragmentResponse(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    skip_varint_DefragmentResponse(Rest, Z1, Z2, F@_1,
				   TrUserData);
skip_varint_DefragmentResponse(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_DefragmentResponse(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_length_delimited_DefragmentResponse(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_DefragmentResponse(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_DefragmentResponse(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DefragmentResponse(Rest2, 0, 0, F@_1,
					  TrUserData).

skip_group_DefragmentResponse(Bin, FNum, Z2, F@_1,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_DefragmentResponse(Rest, 0, Z2, F@_1,
					  TrUserData).

skip_32_DefragmentResponse(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_DefragmentResponse(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_64_DefragmentResponse(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_DefragmentResponse(Rest, Z1, Z2,
					  F@_1, TrUserData).

decode_msg_MoveLeaderRequest(Bin, TrUserData) ->
    dfp_read_field_def_MoveLeaderRequest(Bin, 0, 0,
					 id(0, TrUserData), TrUserData).

dfp_read_field_def_MoveLeaderRequest(<<8, Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    d_field_MoveLeaderRequest_targetID(Rest, Z1, Z2, F@_1,
				       TrUserData);
dfp_read_field_def_MoveLeaderRequest(<<>>, 0, 0, F@_1,
				     _) ->
    #{targetID => F@_1};
dfp_read_field_def_MoveLeaderRequest(Other, Z1, Z2,
				     F@_1, TrUserData) ->
    dg_read_field_def_MoveLeaderRequest(Other, Z1, Z2, F@_1,
					TrUserData).

dg_read_field_def_MoveLeaderRequest(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_MoveLeaderRequest(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_MoveLeaderRequest(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_MoveLeaderRequest_targetID(Rest, 0, 0, F@_1,
					     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_MoveLeaderRequest(Rest, 0, 0, F@_1,
					      TrUserData);
	    1 ->
		skip_64_MoveLeaderRequest(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_MoveLeaderRequest(Rest, 0, 0,
							F@_1, TrUserData);
	    3 ->
		skip_group_MoveLeaderRequest(Rest, Key bsr 3, 0, F@_1,
					     TrUserData);
	    5 ->
		skip_32_MoveLeaderRequest(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_MoveLeaderRequest(<<>>, 0, 0, F@_1,
				    _) ->
    #{targetID => F@_1}.

d_field_MoveLeaderRequest_targetID(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_MoveLeaderRequest_targetID(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
d_field_MoveLeaderRequest_targetID(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_MoveLeaderRequest(RestF, 0, 0,
					 NewFValue, TrUserData).

skip_varint_MoveLeaderRequest(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, TrUserData) ->
    skip_varint_MoveLeaderRequest(Rest, Z1, Z2, F@_1,
				  TrUserData);
skip_varint_MoveLeaderRequest(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_MoveLeaderRequest(Rest, Z1, Z2, F@_1,
					 TrUserData).

skip_length_delimited_MoveLeaderRequest(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_MoveLeaderRequest(Rest, N + 7,
					    X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_MoveLeaderRequest(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MoveLeaderRequest(Rest2, 0, 0, F@_1,
					 TrUserData).

skip_group_MoveLeaderRequest(Bin, FNum, Z2, F@_1,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MoveLeaderRequest(Rest, 0, Z2, F@_1,
					 TrUserData).

skip_32_MoveLeaderRequest(<<_:32, Rest/binary>>, Z1, Z2,
			  F@_1, TrUserData) ->
    dfp_read_field_def_MoveLeaderRequest(Rest, Z1, Z2, F@_1,
					 TrUserData).

skip_64_MoveLeaderRequest(<<_:64, Rest/binary>>, Z1, Z2,
			  F@_1, TrUserData) ->
    dfp_read_field_def_MoveLeaderRequest(Rest, Z1, Z2, F@_1,
					 TrUserData).

decode_msg_MoveLeaderResponse(Bin, TrUserData) ->
    dfp_read_field_def_MoveLeaderResponse(Bin, 0, 0,
					  id(undefined, TrUserData),
					  TrUserData).

dfp_read_field_def_MoveLeaderResponse(<<10,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    d_field_MoveLeaderResponse_header(Rest, Z1, Z2, F@_1,
				      TrUserData);
dfp_read_field_def_MoveLeaderResponse(<<>>, 0, 0, F@_1,
				      _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end;
dfp_read_field_def_MoveLeaderResponse(Other, Z1, Z2,
				      F@_1, TrUserData) ->
    dg_read_field_def_MoveLeaderResponse(Other, Z1, Z2,
					 F@_1, TrUserData).

dg_read_field_def_MoveLeaderResponse(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_MoveLeaderResponse(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_MoveLeaderResponse(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_MoveLeaderResponse_header(Rest, 0, 0, F@_1,
					    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_MoveLeaderResponse(Rest, 0, 0, F@_1,
					       TrUserData);
	    1 ->
		skip_64_MoveLeaderResponse(Rest, 0, 0, F@_1,
					   TrUserData);
	    2 ->
		skip_length_delimited_MoveLeaderResponse(Rest, 0, 0,
							 F@_1, TrUserData);
	    3 ->
		skip_group_MoveLeaderResponse(Rest, Key bsr 3, 0, F@_1,
					      TrUserData);
	    5 ->
		skip_32_MoveLeaderResponse(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_MoveLeaderResponse(<<>>, 0, 0, F@_1,
				     _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end.

d_field_MoveLeaderResponse_header(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_MoveLeaderResponse_header(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
d_field_MoveLeaderResponse_header(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ResponseHeader(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_MoveLeaderResponse(RestF, 0, 0,
					  if Prev == '$undef' -> NewFValue;
					     true ->
						 merge_msg_ResponseHeader(Prev,
									  NewFValue,
									  TrUserData)
					  end,
					  TrUserData).

skip_varint_MoveLeaderResponse(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    skip_varint_MoveLeaderResponse(Rest, Z1, Z2, F@_1,
				   TrUserData);
skip_varint_MoveLeaderResponse(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_MoveLeaderResponse(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_length_delimited_MoveLeaderResponse(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_MoveLeaderResponse(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_MoveLeaderResponse(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MoveLeaderResponse(Rest2, 0, 0, F@_1,
					  TrUserData).

skip_group_MoveLeaderResponse(Bin, FNum, Z2, F@_1,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MoveLeaderResponse(Rest, 0, Z2, F@_1,
					  TrUserData).

skip_32_MoveLeaderResponse(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_MoveLeaderResponse(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_64_MoveLeaderResponse(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_MoveLeaderResponse(Rest, Z1, Z2,
					  F@_1, TrUserData).

decode_msg_AlarmRequest(Bin, TrUserData) ->
    dfp_read_field_def_AlarmRequest(Bin, 0, 0,
				    id('GET', TrUserData), id(0, TrUserData),
				    id('NONE', TrUserData), TrUserData).

dfp_read_field_def_AlarmRequest(<<8, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_AlarmRequest_action(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData);
dfp_read_field_def_AlarmRequest(<<16, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_AlarmRequest_memberID(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData);
dfp_read_field_def_AlarmRequest(<<24, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_AlarmRequest_alarm(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData);
dfp_read_field_def_AlarmRequest(<<>>, 0, 0, F@_1, F@_2,
				F@_3, _) ->
    #{action => F@_1, memberID => F@_2, alarm => F@_3};
dfp_read_field_def_AlarmRequest(Other, Z1, Z2, F@_1,
				F@_2, F@_3, TrUserData) ->
    dg_read_field_def_AlarmRequest(Other, Z1, Z2, F@_1,
				   F@_2, F@_3, TrUserData).

dg_read_field_def_AlarmRequest(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AlarmRequest(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_AlarmRequest(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_AlarmRequest_action(Rest, 0, 0, F@_1, F@_2,
				      F@_3, TrUserData);
      16 ->
	  d_field_AlarmRequest_memberID(Rest, 0, 0, F@_1, F@_2,
					F@_3, TrUserData);
      24 ->
	  d_field_AlarmRequest_alarm(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AlarmRequest(Rest, 0, 0, F@_1, F@_2, F@_3,
					 TrUserData);
	    1 ->
		skip_64_AlarmRequest(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
	    2 ->
		skip_length_delimited_AlarmRequest(Rest, 0, 0, F@_1,
						   F@_2, F@_3, TrUserData);
	    3 ->
		skip_group_AlarmRequest(Rest, Key bsr 3, 0, F@_1, F@_2,
					F@_3, TrUserData);
	    5 ->
		skip_32_AlarmRequest(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData)
	  end
    end;
dg_read_field_def_AlarmRequest(<<>>, 0, 0, F@_1, F@_2,
			       F@_3, _) ->
    #{action => F@_1, memberID => F@_2, alarm => F@_3}.

d_field_AlarmRequest_action(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_AlarmRequest_action(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, TrUserData);
d_field_AlarmRequest_action(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_AlarmRequest.AlarmAction'(begin
						<<Res:32/signed-native>> = <<(X
										bsl
										N
										+
										Acc):32/unsigned-native>>,
						id(Res, TrUserData)
					      end),
	    TrUserData),
	 Rest},
    dfp_read_field_def_AlarmRequest(RestF, 0, 0, NewFValue,
				    F@_2, F@_3, TrUserData).

d_field_AlarmRequest_memberID(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_AlarmRequest_memberID(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_AlarmRequest_memberID(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_AlarmRequest(RestF, 0, 0, F@_1,
				    NewFValue, F@_3, TrUserData).

d_field_AlarmRequest_alarm(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_AlarmRequest_alarm(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, TrUserData);
d_field_AlarmRequest_alarm(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_AlarmType(begin
						<<Res:32/signed-native>> = <<(X
										bsl
										N
										+
										Acc):32/unsigned-native>>,
						id(Res, TrUserData)
					      end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_AlarmRequest(RestF, 0, 0, F@_1, F@_2,
				    NewFValue, TrUserData).

skip_varint_AlarmRequest(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_AlarmRequest(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     TrUserData);
skip_varint_AlarmRequest(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_AlarmRequest(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData).

skip_length_delimited_AlarmRequest(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_AlarmRequest(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3,
				       TrUserData);
skip_length_delimited_AlarmRequest(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AlarmRequest(Rest2, 0, 0, F@_1, F@_2,
				    F@_3, TrUserData).

skip_group_AlarmRequest(Bin, FNum, Z2, F@_1, F@_2, F@_3,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AlarmRequest(Rest, 0, Z2, F@_1, F@_2,
				    F@_3, TrUserData).

skip_32_AlarmRequest(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_AlarmRequest(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData).

skip_64_AlarmRequest(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_AlarmRequest(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData).

decode_msg_AlarmMember(Bin, TrUserData) ->
    dfp_read_field_def_AlarmMember(Bin, 0, 0,
				   id(0, TrUserData), id('NONE', TrUserData),
				   TrUserData).

dfp_read_field_def_AlarmMember(<<8, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_AlarmMember_memberID(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData);
dfp_read_field_def_AlarmMember(<<16, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_AlarmMember_alarm(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_AlarmMember(<<>>, 0, 0, F@_1, F@_2,
			       _) ->
    #{memberID => F@_1, alarm => F@_2};
dfp_read_field_def_AlarmMember(Other, Z1, Z2, F@_1,
			       F@_2, TrUserData) ->
    dg_read_field_def_AlarmMember(Other, Z1, Z2, F@_1, F@_2,
				  TrUserData).

dg_read_field_def_AlarmMember(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AlarmMember(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_AlarmMember(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_AlarmMember_memberID(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
      16 ->
	  d_field_AlarmMember_alarm(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AlarmMember(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
	    1 ->
		skip_64_AlarmMember(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_AlarmMember(Rest, 0, 0, F@_1,
						  F@_2, TrUserData);
	    3 ->
		skip_group_AlarmMember(Rest, Key bsr 3, 0, F@_1, F@_2,
				       TrUserData);
	    5 ->
		skip_32_AlarmMember(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_AlarmMember(<<>>, 0, 0, F@_1, F@_2,
			      _) ->
    #{memberID => F@_1, alarm => F@_2}.

d_field_AlarmMember_memberID(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_AlarmMember_memberID(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
d_field_AlarmMember_memberID(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_AlarmMember(RestF, 0, 0, NewFValue,
				   F@_2, TrUserData).

d_field_AlarmMember_alarm(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_AlarmMember_alarm(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
d_field_AlarmMember_alarm(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_AlarmType(begin
						<<Res:32/signed-native>> = <<(X
										bsl
										N
										+
										Acc):32/unsigned-native>>,
						id(Res, TrUserData)
					      end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_AlarmMember(RestF, 0, 0, F@_1,
				   NewFValue, TrUserData).

skip_varint_AlarmMember(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_AlarmMember(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
skip_varint_AlarmMember(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AlarmMember(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_length_delimited_AlarmMember(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_AlarmMember(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_AlarmMember(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AlarmMember(Rest2, 0, 0, F@_1, F@_2,
				   TrUserData).

skip_group_AlarmMember(Bin, FNum, Z2, F@_1, F@_2,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AlarmMember(Rest, 0, Z2, F@_1, F@_2,
				   TrUserData).

skip_32_AlarmMember(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_AlarmMember(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_64_AlarmMember(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_AlarmMember(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

decode_msg_AlarmResponse(Bin, TrUserData) ->
    dfp_read_field_def_AlarmResponse(Bin, 0, 0,
				     id(undefined, TrUserData),
				     id([], TrUserData), TrUserData).

dfp_read_field_def_AlarmResponse(<<10, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_AlarmResponse_header(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData);
dfp_read_field_def_AlarmResponse(<<18, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_AlarmResponse_alarms(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData);
dfp_read_field_def_AlarmResponse(<<>>, 0, 0, F@_1, R1,
				 TrUserData) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{header => F@_1}
	 end,
    if R1 == '$undef' -> S2;
       true -> S2#{alarms => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_AlarmResponse(Other, Z1, Z2, F@_1,
				 F@_2, TrUserData) ->
    dg_read_field_def_AlarmResponse(Other, Z1, Z2, F@_1,
				    F@_2, TrUserData).

dg_read_field_def_AlarmResponse(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AlarmResponse(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_AlarmResponse(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AlarmResponse_header(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
      18 ->
	  d_field_AlarmResponse_alarms(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AlarmResponse(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
	    1 ->
		skip_64_AlarmResponse(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
	    2 ->
		skip_length_delimited_AlarmResponse(Rest, 0, 0, F@_1,
						    F@_2, TrUserData);
	    3 ->
		skip_group_AlarmResponse(Rest, Key bsr 3, 0, F@_1, F@_2,
					 TrUserData);
	    5 ->
		skip_32_AlarmResponse(Rest, 0, 0, F@_1, F@_2,
				      TrUserData)
	  end
    end;
dg_read_field_def_AlarmResponse(<<>>, 0, 0, F@_1, R1,
				TrUserData) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{header => F@_1}
	 end,
    if R1 == '$undef' -> S2;
       true -> S2#{alarms => lists_reverse(R1, TrUserData)}
    end.

d_field_AlarmResponse_header(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_AlarmResponse_header(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
d_field_AlarmResponse_header(<<0:1, X:7, Rest/binary>>,
			     N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ResponseHeader(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AlarmResponse(RestF, 0, 0,
				     if Prev == '$undef' -> NewFValue;
					true ->
					    merge_msg_ResponseHeader(Prev,
								     NewFValue,
								     TrUserData)
				     end,
				     F@_2, TrUserData).

d_field_AlarmResponse_alarms(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_AlarmResponse_alarms(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
d_field_AlarmResponse_alarms(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_AlarmMember(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AlarmResponse(RestF, 0, 0, F@_1,
				     cons(NewFValue, Prev, TrUserData),
				     TrUserData).

skip_varint_AlarmResponse(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_AlarmResponse(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
skip_varint_AlarmResponse(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AlarmResponse(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData).

skip_length_delimited_AlarmResponse(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_AlarmResponse(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_AlarmResponse(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AlarmResponse(Rest2, 0, 0, F@_1,
				     F@_2, TrUserData).

skip_group_AlarmResponse(Bin, FNum, Z2, F@_1, F@_2,
			 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AlarmResponse(Rest, 0, Z2, F@_1,
				     F@_2, TrUserData).

skip_32_AlarmResponse(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AlarmResponse(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData).

skip_64_AlarmResponse(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AlarmResponse(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData).

decode_msg_StatusRequest(Bin, TrUserData) ->
    dfp_read_field_def_StatusRequest(Bin, 0, 0, TrUserData).

dfp_read_field_def_StatusRequest(<<>>, 0, 0, _) -> #{};
dfp_read_field_def_StatusRequest(Other, Z1, Z2,
				 TrUserData) ->
    dg_read_field_def_StatusRequest(Other, Z1, Z2,
				    TrUserData).

dg_read_field_def_StatusRequest(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_StatusRequest(Rest, N + 7,
				    X bsl N + Acc, TrUserData);
dg_read_field_def_StatusRequest(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_StatusRequest(Rest, 0, 0, TrUserData);
      1 -> skip_64_StatusRequest(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_StatusRequest(Rest, 0, 0,
					      TrUserData);
      3 ->
	  skip_group_StatusRequest(Rest, Key bsr 3, 0,
				   TrUserData);
      5 -> skip_32_StatusRequest(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_StatusRequest(<<>>, 0, 0, _) -> #{}.

skip_varint_StatusRequest(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, TrUserData) ->
    skip_varint_StatusRequest(Rest, Z1, Z2, TrUserData);
skip_varint_StatusRequest(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, TrUserData) ->
    dfp_read_field_def_StatusRequest(Rest, Z1, Z2,
				     TrUserData).

skip_length_delimited_StatusRequest(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_StatusRequest(Rest, N + 7,
					X bsl N + Acc, TrUserData);
skip_length_delimited_StatusRequest(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_StatusRequest(Rest2, 0, 0,
				     TrUserData).

skip_group_StatusRequest(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_StatusRequest(Rest, 0, Z2,
				     TrUserData).

skip_32_StatusRequest(<<_:32, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    dfp_read_field_def_StatusRequest(Rest, Z1, Z2,
				     TrUserData).

skip_64_StatusRequest(<<_:64, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    dfp_read_field_def_StatusRequest(Rest, Z1, Z2,
				     TrUserData).

decode_msg_StatusResponse(Bin, TrUserData) ->
    dfp_read_field_def_StatusResponse(Bin, 0, 0,
				      id(undefined, TrUserData),
				      id([], TrUserData), id(0, TrUserData),
				      id(0, TrUserData), id(0, TrUserData),
				      id(0, TrUserData), id(0, TrUserData),
				      id([], TrUserData), id(0, TrUserData),
				      TrUserData).

dfp_read_field_def_StatusResponse(<<10, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, F@_9, TrUserData) ->
    d_field_StatusResponse_header(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  TrUserData);
dfp_read_field_def_StatusResponse(<<18, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, F@_9, TrUserData) ->
    d_field_StatusResponse_version(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   TrUserData);
dfp_read_field_def_StatusResponse(<<24, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, F@_9, TrUserData) ->
    d_field_StatusResponse_dbSize(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  TrUserData);
dfp_read_field_def_StatusResponse(<<32, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, F@_9, TrUserData) ->
    d_field_StatusResponse_leader(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  TrUserData);
dfp_read_field_def_StatusResponse(<<40, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, F@_9, TrUserData) ->
    d_field_StatusResponse_raftIndex(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				     F@_9, TrUserData);
dfp_read_field_def_StatusResponse(<<48, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, F@_9, TrUserData) ->
    d_field_StatusResponse_raftTerm(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				    F@_9, TrUserData);
dfp_read_field_def_StatusResponse(<<56, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, F@_9, TrUserData) ->
    d_field_StatusResponse_raftAppliedIndex(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_StatusResponse(<<66, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, F@_9, TrUserData) ->
    d_field_StatusResponse_errors(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  TrUserData);
dfp_read_field_def_StatusResponse(<<72, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, F@_9, TrUserData) ->
    d_field_StatusResponse_dbSizeInUse(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       F@_9, TrUserData);
dfp_read_field_def_StatusResponse(<<>>, 0, 0, F@_1,
				  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, R1, F@_9,
				  TrUserData) ->
    S1 = #{version => F@_2, dbSize => F@_3, leader => F@_4,
	   raftIndex => F@_5, raftTerm => F@_6,
	   raftAppliedIndex => F@_7,
	   errors => lists_reverse(R1, TrUserData),
	   dbSizeInUse => F@_9},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end;
dfp_read_field_def_StatusResponse(Other, Z1, Z2, F@_1,
				  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				  F@_9, TrUserData) ->
    dg_read_field_def_StatusResponse(Other, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				     F@_9, TrUserData).

dg_read_field_def_StatusResponse(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, F@_8, F@_9, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_StatusResponse(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
dg_read_field_def_StatusResponse(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, F@_8, F@_9, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_StatusResponse_header(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					F@_9, TrUserData);
      18 ->
	  d_field_StatusResponse_version(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					 F@_9, TrUserData);
      24 ->
	  d_field_StatusResponse_dbSize(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					F@_9, TrUserData);
      32 ->
	  d_field_StatusResponse_leader(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					F@_9, TrUserData);
      40 ->
	  d_field_StatusResponse_raftIndex(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					   F@_9, TrUserData);
      48 ->
	  d_field_StatusResponse_raftTerm(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					  F@_9, TrUserData);
      56 ->
	  d_field_StatusResponse_raftAppliedIndex(Rest, 0, 0,
						  F@_1, F@_2, F@_3, F@_4, F@_5,
						  F@_6, F@_7, F@_8, F@_9,
						  TrUserData);
      66 ->
	  d_field_StatusResponse_errors(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					F@_9, TrUserData);
      72 ->
	  d_field_StatusResponse_dbSizeInUse(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					     F@_8, F@_9, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_StatusResponse(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					   TrUserData);
	    1 ->
		skip_64_StatusResponse(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				       TrUserData);
	    2 ->
		skip_length_delimited_StatusResponse(Rest, 0, 0, F@_1,
						     F@_2, F@_3, F@_4, F@_5,
						     F@_6, F@_7, F@_8, F@_9,
						     TrUserData);
	    3 ->
		skip_group_StatusResponse(Rest, Key bsr 3, 0, F@_1,
					  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					  F@_8, F@_9, TrUserData);
	    5 ->
		skip_32_StatusResponse(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				       TrUserData)
	  end
    end;
dg_read_field_def_StatusResponse(<<>>, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, R1, F@_9,
				 TrUserData) ->
    S1 = #{version => F@_2, dbSize => F@_3, leader => F@_4,
	   raftIndex => F@_5, raftTerm => F@_6,
	   raftAppliedIndex => F@_7,
	   errors => lists_reverse(R1, TrUserData),
	   dbSizeInUse => F@_9},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end.

d_field_StatusResponse_header(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, TrUserData)
    when N < 57 ->
    d_field_StatusResponse_header(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, F@_7, F@_8, F@_9, TrUserData);
d_field_StatusResponse_header(<<0:1, X:7, Rest/binary>>,
			      N, Acc, Prev, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ResponseHeader(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_StatusResponse(RestF, 0, 0,
				      if Prev == '$undef' -> NewFValue;
					 true ->
					     merge_msg_ResponseHeader(Prev,
								      NewFValue,
								      TrUserData)
				      end,
				      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				      F@_9, TrUserData).

d_field_StatusResponse_version(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, TrUserData)
    when N < 57 ->
    d_field_StatusResponse_version(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   F@_6, F@_7, F@_8, F@_9, TrUserData);
d_field_StatusResponse_version(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_StatusResponse(RestF, 0, 0, F@_1,
				      NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7,
				      F@_8, F@_9, TrUserData).

d_field_StatusResponse_dbSize(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, TrUserData)
    when N < 57 ->
    d_field_StatusResponse_dbSize(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, F@_7, F@_8, F@_9, TrUserData);
d_field_StatusResponse_dbSize(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_StatusResponse(RestF, 0, 0, F@_1,
				      F@_2, NewFValue, F@_4, F@_5, F@_6, F@_7,
				      F@_8, F@_9, TrUserData).

d_field_StatusResponse_leader(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, TrUserData)
    when N < 57 ->
    d_field_StatusResponse_leader(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, F@_7, F@_8, F@_9, TrUserData);
d_field_StatusResponse_leader(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7,
			      F@_8, F@_9, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_StatusResponse(RestF, 0, 0, F@_1,
				      F@_2, F@_3, NewFValue, F@_5, F@_6, F@_7,
				      F@_8, F@_9, TrUserData).

d_field_StatusResponse_raftIndex(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, F@_8, F@_9, TrUserData)
    when N < 57 ->
    d_field_StatusResponse_raftIndex(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
d_field_StatusResponse_raftIndex(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7,
				 F@_8, F@_9, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_StatusResponse(RestF, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, NewFValue, F@_6, F@_7,
				      F@_8, F@_9, TrUserData).

d_field_StatusResponse_raftTerm(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, F@_8, F@_9, TrUserData)
    when N < 57 ->
    d_field_StatusResponse_raftTerm(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    F@_6, F@_7, F@_8, F@_9, TrUserData);
d_field_StatusResponse_raftTerm(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7,
				F@_8, F@_9, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_StatusResponse(RestF, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, F@_5, NewFValue, F@_7,
				      F@_8, F@_9, TrUserData).

d_field_StatusResponse_raftAppliedIndex(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, F@_9, TrUserData)
    when N < 57 ->
    d_field_StatusResponse_raftAppliedIndex(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					    TrUserData);
d_field_StatusResponse_raftAppliedIndex(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, _, F@_8, F@_9, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_StatusResponse(RestF, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, NewFValue,
				      F@_8, F@_9, TrUserData).

d_field_StatusResponse_errors(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, TrUserData)
    when N < 57 ->
    d_field_StatusResponse_errors(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, F@_7, F@_8, F@_9, TrUserData);
d_field_StatusResponse_errors(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      Prev, F@_9, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_StatusResponse(RestF, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				      cons(NewFValue, Prev, TrUserData), F@_9,
				      TrUserData).

d_field_StatusResponse_dbSizeInUse(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, F@_9, TrUserData)
    when N < 57 ->
    d_field_StatusResponse_dbSizeInUse(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, F@_6, F@_7, F@_8, F@_9,
				       TrUserData);
d_field_StatusResponse_dbSizeInUse(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_StatusResponse(RestF, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				      NewFValue, TrUserData).

skip_varint_StatusResponse(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			   F@_8, F@_9, TrUserData) ->
    skip_varint_StatusResponse(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			       TrUserData);
skip_varint_StatusResponse(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			   F@_8, F@_9, TrUserData) ->
    dfp_read_field_def_StatusResponse(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				      F@_9, TrUserData).

skip_length_delimited_StatusResponse(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, F@_9, TrUserData)
    when N < 57 ->
    skip_length_delimited_StatusResponse(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, F@_6, F@_7, F@_8, F@_9,
					 TrUserData);
skip_length_delimited_StatusResponse(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, F@_9, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_StatusResponse(Rest2, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				      F@_9, TrUserData).

skip_group_StatusResponse(Bin, FNum, Z2, F@_1, F@_2,
			  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_StatusResponse(Rest, 0, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				      F@_9, TrUserData).

skip_32_StatusResponse(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		       TrUserData) ->
    dfp_read_field_def_StatusResponse(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				      F@_9, TrUserData).

skip_64_StatusResponse(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		       TrUserData) ->
    dfp_read_field_def_StatusResponse(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				      F@_9, TrUserData).

decode_msg_AuthEnableRequest(Bin, TrUserData) ->
    dfp_read_field_def_AuthEnableRequest(Bin, 0, 0,
					 TrUserData).

dfp_read_field_def_AuthEnableRequest(<<>>, 0, 0, _) ->
    #{};
dfp_read_field_def_AuthEnableRequest(Other, Z1, Z2,
				     TrUserData) ->
    dg_read_field_def_AuthEnableRequest(Other, Z1, Z2,
					TrUserData).

dg_read_field_def_AuthEnableRequest(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AuthEnableRequest(Rest, N + 7,
					X bsl N + Acc, TrUserData);
dg_read_field_def_AuthEnableRequest(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_AuthEnableRequest(Rest, 0, 0, TrUserData);
      1 -> skip_64_AuthEnableRequest(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_AuthEnableRequest(Rest, 0, 0,
						  TrUserData);
      3 ->
	  skip_group_AuthEnableRequest(Rest, Key bsr 3, 0,
				       TrUserData);
      5 -> skip_32_AuthEnableRequest(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_AuthEnableRequest(<<>>, 0, 0, _) ->
    #{}.

skip_varint_AuthEnableRequest(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, TrUserData) ->
    skip_varint_AuthEnableRequest(Rest, Z1, Z2, TrUserData);
skip_varint_AuthEnableRequest(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, TrUserData) ->
    dfp_read_field_def_AuthEnableRequest(Rest, Z1, Z2,
					 TrUserData).

skip_length_delimited_AuthEnableRequest(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_AuthEnableRequest(Rest, N + 7,
					    X bsl N + Acc, TrUserData);
skip_length_delimited_AuthEnableRequest(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AuthEnableRequest(Rest2, 0, 0,
					 TrUserData).

skip_group_AuthEnableRequest(Bin, FNum, Z2,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AuthEnableRequest(Rest, 0, Z2,
					 TrUserData).

skip_32_AuthEnableRequest(<<_:32, Rest/binary>>, Z1, Z2,
			  TrUserData) ->
    dfp_read_field_def_AuthEnableRequest(Rest, Z1, Z2,
					 TrUserData).

skip_64_AuthEnableRequest(<<_:64, Rest/binary>>, Z1, Z2,
			  TrUserData) ->
    dfp_read_field_def_AuthEnableRequest(Rest, Z1, Z2,
					 TrUserData).

decode_msg_AuthDisableRequest(Bin, TrUserData) ->
    dfp_read_field_def_AuthDisableRequest(Bin, 0, 0,
					  TrUserData).

dfp_read_field_def_AuthDisableRequest(<<>>, 0, 0, _) ->
    #{};
dfp_read_field_def_AuthDisableRequest(Other, Z1, Z2,
				      TrUserData) ->
    dg_read_field_def_AuthDisableRequest(Other, Z1, Z2,
					 TrUserData).

dg_read_field_def_AuthDisableRequest(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AuthDisableRequest(Rest, N + 7,
					 X bsl N + Acc, TrUserData);
dg_read_field_def_AuthDisableRequest(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_AuthDisableRequest(Rest, 0, 0, TrUserData);
      1 -> skip_64_AuthDisableRequest(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_AuthDisableRequest(Rest, 0, 0,
						   TrUserData);
      3 ->
	  skip_group_AuthDisableRequest(Rest, Key bsr 3, 0,
					TrUserData);
      5 -> skip_32_AuthDisableRequest(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_AuthDisableRequest(<<>>, 0, 0, _) ->
    #{}.

skip_varint_AuthDisableRequest(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    skip_varint_AuthDisableRequest(Rest, Z1, Z2,
				   TrUserData);
skip_varint_AuthDisableRequest(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    dfp_read_field_def_AuthDisableRequest(Rest, Z1, Z2,
					  TrUserData).

skip_length_delimited_AuthDisableRequest(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_AuthDisableRequest(Rest, N + 7,
					     X bsl N + Acc, TrUserData);
skip_length_delimited_AuthDisableRequest(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AuthDisableRequest(Rest2, 0, 0,
					  TrUserData).

skip_group_AuthDisableRequest(Bin, FNum, Z2,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AuthDisableRequest(Rest, 0, Z2,
					  TrUserData).

skip_32_AuthDisableRequest(<<_:32, Rest/binary>>, Z1,
			   Z2, TrUserData) ->
    dfp_read_field_def_AuthDisableRequest(Rest, Z1, Z2,
					  TrUserData).

skip_64_AuthDisableRequest(<<_:64, Rest/binary>>, Z1,
			   Z2, TrUserData) ->
    dfp_read_field_def_AuthDisableRequest(Rest, Z1, Z2,
					  TrUserData).

decode_msg_AuthenticateRequest(Bin, TrUserData) ->
    dfp_read_field_def_AuthenticateRequest(Bin, 0, 0,
					   id([], TrUserData),
					   id([], TrUserData), TrUserData).

dfp_read_field_def_AuthenticateRequest(<<10,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_AuthenticateRequest_name(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
dfp_read_field_def_AuthenticateRequest(<<18,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_AuthenticateRequest_password(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData);
dfp_read_field_def_AuthenticateRequest(<<>>, 0, 0, F@_1,
				       F@_2, _) ->
    #{name => F@_1, password => F@_2};
dfp_read_field_def_AuthenticateRequest(Other, Z1, Z2,
				       F@_1, F@_2, TrUserData) ->
    dg_read_field_def_AuthenticateRequest(Other, Z1, Z2,
					  F@_1, F@_2, TrUserData).

dg_read_field_def_AuthenticateRequest(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AuthenticateRequest(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
dg_read_field_def_AuthenticateRequest(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AuthenticateRequest_name(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
      18 ->
	  d_field_AuthenticateRequest_password(Rest, 0, 0, F@_1,
					       F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AuthenticateRequest(Rest, 0, 0, F@_1, F@_2,
						TrUserData);
	    1 ->
		skip_64_AuthenticateRequest(Rest, 0, 0, F@_1, F@_2,
					    TrUserData);
	    2 ->
		skip_length_delimited_AuthenticateRequest(Rest, 0, 0,
							  F@_1, F@_2,
							  TrUserData);
	    3 ->
		skip_group_AuthenticateRequest(Rest, Key bsr 3, 0, F@_1,
					       F@_2, TrUserData);
	    5 ->
		skip_32_AuthenticateRequest(Rest, 0, 0, F@_1, F@_2,
					    TrUserData)
	  end
    end;
dg_read_field_def_AuthenticateRequest(<<>>, 0, 0, F@_1,
				      F@_2, _) ->
    #{name => F@_1, password => F@_2}.

d_field_AuthenticateRequest_name(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_AuthenticateRequest_name(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_AuthenticateRequest_name(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AuthenticateRequest(RestF, 0, 0,
					   NewFValue, F@_2, TrUserData).

d_field_AuthenticateRequest_password(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_AuthenticateRequest_password(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_AuthenticateRequest_password(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AuthenticateRequest(RestF, 0, 0,
					   F@_1, NewFValue, TrUserData).

skip_varint_AuthenticateRequest(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_AuthenticateRequest(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData);
skip_varint_AuthenticateRequest(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AuthenticateRequest(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

skip_length_delimited_AuthenticateRequest(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_AuthenticateRequest(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2,
					      TrUserData);
skip_length_delimited_AuthenticateRequest(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AuthenticateRequest(Rest2, 0, 0,
					   F@_1, F@_2, TrUserData).

skip_group_AuthenticateRequest(Bin, FNum, Z2, F@_1,
			       F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AuthenticateRequest(Rest, 0, Z2,
					   F@_1, F@_2, TrUserData).

skip_32_AuthenticateRequest(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AuthenticateRequest(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

skip_64_AuthenticateRequest(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AuthenticateRequest(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

decode_msg_AuthUserAddRequest(Bin, TrUserData) ->
    dfp_read_field_def_AuthUserAddRequest(Bin, 0, 0,
					  id([], TrUserData),
					  id([], TrUserData), TrUserData).

dfp_read_field_def_AuthUserAddRequest(<<10,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_AuthUserAddRequest_name(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData);
dfp_read_field_def_AuthUserAddRequest(<<18,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_AuthUserAddRequest_password(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData);
dfp_read_field_def_AuthUserAddRequest(<<>>, 0, 0, F@_1,
				      F@_2, _) ->
    #{name => F@_1, password => F@_2};
dfp_read_field_def_AuthUserAddRequest(Other, Z1, Z2,
				      F@_1, F@_2, TrUserData) ->
    dg_read_field_def_AuthUserAddRequest(Other, Z1, Z2,
					 F@_1, F@_2, TrUserData).

dg_read_field_def_AuthUserAddRequest(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AuthUserAddRequest(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_AuthUserAddRequest(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AuthUserAddRequest_name(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
      18 ->
	  d_field_AuthUserAddRequest_password(Rest, 0, 0, F@_1,
					      F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AuthUserAddRequest(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    1 ->
		skip_64_AuthUserAddRequest(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
	    2 ->
		skip_length_delimited_AuthUserAddRequest(Rest, 0, 0,
							 F@_1, F@_2,
							 TrUserData);
	    3 ->
		skip_group_AuthUserAddRequest(Rest, Key bsr 3, 0, F@_1,
					      F@_2, TrUserData);
	    5 ->
		skip_32_AuthUserAddRequest(Rest, 0, 0, F@_1, F@_2,
					   TrUserData)
	  end
    end;
dg_read_field_def_AuthUserAddRequest(<<>>, 0, 0, F@_1,
				     F@_2, _) ->
    #{name => F@_1, password => F@_2}.

d_field_AuthUserAddRequest_name(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_AuthUserAddRequest_name(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_AuthUserAddRequest_name(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AuthUserAddRequest(RestF, 0, 0,
					  NewFValue, F@_2, TrUserData).

d_field_AuthUserAddRequest_password(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_AuthUserAddRequest_password(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_AuthUserAddRequest_password(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AuthUserAddRequest(RestF, 0, 0, F@_1,
					  NewFValue, TrUserData).

skip_varint_AuthUserAddRequest(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_AuthUserAddRequest(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
skip_varint_AuthUserAddRequest(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AuthUserAddRequest(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

skip_length_delimited_AuthUserAddRequest(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_AuthUserAddRequest(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2,
					     TrUserData);
skip_length_delimited_AuthUserAddRequest(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AuthUserAddRequest(Rest2, 0, 0, F@_1,
					  F@_2, TrUserData).

skip_group_AuthUserAddRequest(Bin, FNum, Z2, F@_1, F@_2,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AuthUserAddRequest(Rest, 0, Z2, F@_1,
					  F@_2, TrUserData).

skip_32_AuthUserAddRequest(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AuthUserAddRequest(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

skip_64_AuthUserAddRequest(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AuthUserAddRequest(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

decode_msg_AuthUserGetRequest(Bin, TrUserData) ->
    dfp_read_field_def_AuthUserGetRequest(Bin, 0, 0,
					  id([], TrUserData), TrUserData).

dfp_read_field_def_AuthUserGetRequest(<<10,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    d_field_AuthUserGetRequest_name(Rest, Z1, Z2, F@_1,
				    TrUserData);
dfp_read_field_def_AuthUserGetRequest(<<>>, 0, 0, F@_1,
				      _) ->
    #{name => F@_1};
dfp_read_field_def_AuthUserGetRequest(Other, Z1, Z2,
				      F@_1, TrUserData) ->
    dg_read_field_def_AuthUserGetRequest(Other, Z1, Z2,
					 F@_1, TrUserData).

dg_read_field_def_AuthUserGetRequest(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AuthUserGetRequest(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_AuthUserGetRequest(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AuthUserGetRequest_name(Rest, 0, 0, F@_1,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AuthUserGetRequest(Rest, 0, 0, F@_1,
					       TrUserData);
	    1 ->
		skip_64_AuthUserGetRequest(Rest, 0, 0, F@_1,
					   TrUserData);
	    2 ->
		skip_length_delimited_AuthUserGetRequest(Rest, 0, 0,
							 F@_1, TrUserData);
	    3 ->
		skip_group_AuthUserGetRequest(Rest, Key bsr 3, 0, F@_1,
					      TrUserData);
	    5 ->
		skip_32_AuthUserGetRequest(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_AuthUserGetRequest(<<>>, 0, 0, F@_1,
				     _) ->
    #{name => F@_1}.

d_field_AuthUserGetRequest_name(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_AuthUserGetRequest_name(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
d_field_AuthUserGetRequest_name(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AuthUserGetRequest(RestF, 0, 0,
					  NewFValue, TrUserData).

skip_varint_AuthUserGetRequest(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    skip_varint_AuthUserGetRequest(Rest, Z1, Z2, F@_1,
				   TrUserData);
skip_varint_AuthUserGetRequest(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_AuthUserGetRequest(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_length_delimited_AuthUserGetRequest(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_AuthUserGetRequest(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_AuthUserGetRequest(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AuthUserGetRequest(Rest2, 0, 0, F@_1,
					  TrUserData).

skip_group_AuthUserGetRequest(Bin, FNum, Z2, F@_1,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AuthUserGetRequest(Rest, 0, Z2, F@_1,
					  TrUserData).

skip_32_AuthUserGetRequest(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_AuthUserGetRequest(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_64_AuthUserGetRequest(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_AuthUserGetRequest(Rest, Z1, Z2,
					  F@_1, TrUserData).

decode_msg_AuthUserDeleteRequest(Bin, TrUserData) ->
    dfp_read_field_def_AuthUserDeleteRequest(Bin, 0, 0,
					     id([], TrUserData), TrUserData).

dfp_read_field_def_AuthUserDeleteRequest(<<10,
					   Rest/binary>>,
					 Z1, Z2, F@_1, TrUserData) ->
    d_field_AuthUserDeleteRequest_name(Rest, Z1, Z2, F@_1,
				       TrUserData);
dfp_read_field_def_AuthUserDeleteRequest(<<>>, 0, 0,
					 F@_1, _) ->
    #{name => F@_1};
dfp_read_field_def_AuthUserDeleteRequest(Other, Z1, Z2,
					 F@_1, TrUserData) ->
    dg_read_field_def_AuthUserDeleteRequest(Other, Z1, Z2,
					    F@_1, TrUserData).

dg_read_field_def_AuthUserDeleteRequest(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AuthUserDeleteRequest(Rest, N + 7,
					    X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_AuthUserDeleteRequest(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AuthUserDeleteRequest_name(Rest, 0, 0, F@_1,
					     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AuthUserDeleteRequest(Rest, 0, 0, F@_1,
						  TrUserData);
	    1 ->
		skip_64_AuthUserDeleteRequest(Rest, 0, 0, F@_1,
					      TrUserData);
	    2 ->
		skip_length_delimited_AuthUserDeleteRequest(Rest, 0, 0,
							    F@_1, TrUserData);
	    3 ->
		skip_group_AuthUserDeleteRequest(Rest, Key bsr 3, 0,
						 F@_1, TrUserData);
	    5 ->
		skip_32_AuthUserDeleteRequest(Rest, 0, 0, F@_1,
					      TrUserData)
	  end
    end;
dg_read_field_def_AuthUserDeleteRequest(<<>>, 0, 0,
					F@_1, _) ->
    #{name => F@_1}.

d_field_AuthUserDeleteRequest_name(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_AuthUserDeleteRequest_name(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
d_field_AuthUserDeleteRequest_name(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AuthUserDeleteRequest(RestF, 0, 0,
					     NewFValue, TrUserData).

skip_varint_AuthUserDeleteRequest(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    skip_varint_AuthUserDeleteRequest(Rest, Z1, Z2, F@_1,
				      TrUserData);
skip_varint_AuthUserDeleteRequest(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_AuthUserDeleteRequest(Rest, Z1, Z2,
					     F@_1, TrUserData).

skip_length_delimited_AuthUserDeleteRequest(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_AuthUserDeleteRequest(Rest, N + 7,
						X bsl N + Acc, F@_1,
						TrUserData);
skip_length_delimited_AuthUserDeleteRequest(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AuthUserDeleteRequest(Rest2, 0, 0,
					     F@_1, TrUserData).

skip_group_AuthUserDeleteRequest(Bin, FNum, Z2, F@_1,
				 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AuthUserDeleteRequest(Rest, 0, Z2,
					     F@_1, TrUserData).

skip_32_AuthUserDeleteRequest(<<_:32, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    dfp_read_field_def_AuthUserDeleteRequest(Rest, Z1, Z2,
					     F@_1, TrUserData).

skip_64_AuthUserDeleteRequest(<<_:64, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    dfp_read_field_def_AuthUserDeleteRequest(Rest, Z1, Z2,
					     F@_1, TrUserData).

decode_msg_AuthUserChangePasswordRequest(Bin,
					 TrUserData) ->
    dfp_read_field_def_AuthUserChangePasswordRequest(Bin, 0,
						     0, id([], TrUserData),
						     id([], TrUserData),
						     TrUserData).

dfp_read_field_def_AuthUserChangePasswordRequest(<<10,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2,
						 TrUserData) ->
    d_field_AuthUserChangePasswordRequest_name(Rest, Z1, Z2,
					       F@_1, F@_2, TrUserData);
dfp_read_field_def_AuthUserChangePasswordRequest(<<18,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2,
						 TrUserData) ->
    d_field_AuthUserChangePasswordRequest_password(Rest, Z1,
						   Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_AuthUserChangePasswordRequest(<<>>,
						 0, 0, F@_1, F@_2, _) ->
    #{name => F@_1, password => F@_2};
dfp_read_field_def_AuthUserChangePasswordRequest(Other,
						 Z1, Z2, F@_1, F@_2,
						 TrUserData) ->
    dg_read_field_def_AuthUserChangePasswordRequest(Other,
						    Z1, Z2, F@_1, F@_2,
						    TrUserData).

dg_read_field_def_AuthUserChangePasswordRequest(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AuthUserChangePasswordRequest(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, TrUserData);
dg_read_field_def_AuthUserChangePasswordRequest(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2,
						TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AuthUserChangePasswordRequest_name(Rest, 0, 0,
						     F@_1, F@_2, TrUserData);
      18 ->
	  d_field_AuthUserChangePasswordRequest_password(Rest, 0,
							 0, F@_1, F@_2,
							 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AuthUserChangePasswordRequest(Rest, 0, 0,
							  F@_1, F@_2,
							  TrUserData);
	    1 ->
		skip_64_AuthUserChangePasswordRequest(Rest, 0, 0, F@_1,
						      F@_2, TrUserData);
	    2 ->
		skip_length_delimited_AuthUserChangePasswordRequest(Rest,
								    0, 0, F@_1,
								    F@_2,
								    TrUserData);
	    3 ->
		skip_group_AuthUserChangePasswordRequest(Rest,
							 Key bsr 3, 0, F@_1,
							 F@_2, TrUserData);
	    5 ->
		skip_32_AuthUserChangePasswordRequest(Rest, 0, 0, F@_1,
						      F@_2, TrUserData)
	  end
    end;
dg_read_field_def_AuthUserChangePasswordRequest(<<>>, 0,
						0, F@_1, F@_2, _) ->
    #{name => F@_1, password => F@_2}.

d_field_AuthUserChangePasswordRequest_name(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_AuthUserChangePasswordRequest_name(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2,
					       TrUserData);
d_field_AuthUserChangePasswordRequest_name(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AuthUserChangePasswordRequest(RestF,
						     0, 0, NewFValue, F@_2,
						     TrUserData).

d_field_AuthUserChangePasswordRequest_password(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_AuthUserChangePasswordRequest_password(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, TrUserData);
d_field_AuthUserChangePasswordRequest_password(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AuthUserChangePasswordRequest(RestF,
						     0, 0, F@_1, NewFValue,
						     TrUserData).

skip_varint_AuthUserChangePasswordRequest(<<1:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_AuthUserChangePasswordRequest(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData);
skip_varint_AuthUserChangePasswordRequest(<<0:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AuthUserChangePasswordRequest(Rest,
						     Z1, Z2, F@_1, F@_2,
						     TrUserData).

skip_length_delimited_AuthUserChangePasswordRequest(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2,
						    TrUserData)
    when N < 57 ->
    skip_length_delimited_AuthUserChangePasswordRequest(Rest,
							N + 7, X bsl N + Acc,
							F@_1, F@_2, TrUserData);
skip_length_delimited_AuthUserChangePasswordRequest(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2,
						    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AuthUserChangePasswordRequest(Rest2,
						     0, 0, F@_1, F@_2,
						     TrUserData).

skip_group_AuthUserChangePasswordRequest(Bin, FNum, Z2,
					 F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AuthUserChangePasswordRequest(Rest,
						     0, Z2, F@_1, F@_2,
						     TrUserData).

skip_32_AuthUserChangePasswordRequest(<<_:32,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AuthUserChangePasswordRequest(Rest,
						     Z1, Z2, F@_1, F@_2,
						     TrUserData).

skip_64_AuthUserChangePasswordRequest(<<_:64,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AuthUserChangePasswordRequest(Rest,
						     Z1, Z2, F@_1, F@_2,
						     TrUserData).

decode_msg_AuthUserGrantRoleRequest(Bin, TrUserData) ->
    dfp_read_field_def_AuthUserGrantRoleRequest(Bin, 0, 0,
						id([], TrUserData),
						id([], TrUserData), TrUserData).

dfp_read_field_def_AuthUserGrantRoleRequest(<<10,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_AuthUserGrantRoleRequest_user(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData);
dfp_read_field_def_AuthUserGrantRoleRequest(<<18,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_AuthUserGrantRoleRequest_role(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData);
dfp_read_field_def_AuthUserGrantRoleRequest(<<>>, 0, 0,
					    F@_1, F@_2, _) ->
    #{user => F@_1, role => F@_2};
dfp_read_field_def_AuthUserGrantRoleRequest(Other, Z1,
					    Z2, F@_1, F@_2, TrUserData) ->
    dg_read_field_def_AuthUserGrantRoleRequest(Other, Z1,
					       Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_AuthUserGrantRoleRequest(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AuthUserGrantRoleRequest(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2,
					       TrUserData);
dg_read_field_def_AuthUserGrantRoleRequest(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AuthUserGrantRoleRequest_user(Rest, 0, 0, F@_1,
						F@_2, TrUserData);
      18 ->
	  d_field_AuthUserGrantRoleRequest_role(Rest, 0, 0, F@_1,
						F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AuthUserGrantRoleRequest(Rest, 0, 0, F@_1,
						     F@_2, TrUserData);
	    1 ->
		skip_64_AuthUserGrantRoleRequest(Rest, 0, 0, F@_1, F@_2,
						 TrUserData);
	    2 ->
		skip_length_delimited_AuthUserGrantRoleRequest(Rest, 0,
							       0, F@_1, F@_2,
							       TrUserData);
	    3 ->
		skip_group_AuthUserGrantRoleRequest(Rest, Key bsr 3, 0,
						    F@_1, F@_2, TrUserData);
	    5 ->
		skip_32_AuthUserGrantRoleRequest(Rest, 0, 0, F@_1, F@_2,
						 TrUserData)
	  end
    end;
dg_read_field_def_AuthUserGrantRoleRequest(<<>>, 0, 0,
					   F@_1, F@_2, _) ->
    #{user => F@_1, role => F@_2}.

d_field_AuthUserGrantRoleRequest_user(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_AuthUserGrantRoleRequest_user(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
d_field_AuthUserGrantRoleRequest_user(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AuthUserGrantRoleRequest(RestF, 0, 0,
						NewFValue, F@_2, TrUserData).

d_field_AuthUserGrantRoleRequest_role(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_AuthUserGrantRoleRequest_role(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
d_field_AuthUserGrantRoleRequest_role(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AuthUserGrantRoleRequest(RestF, 0, 0,
						F@_1, NewFValue, TrUserData).

skip_varint_AuthUserGrantRoleRequest(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_AuthUserGrantRoleRequest(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData);
skip_varint_AuthUserGrantRoleRequest(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AuthUserGrantRoleRequest(Rest, Z1,
						Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_AuthUserGrantRoleRequest(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_AuthUserGrantRoleRequest(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, TrUserData);
skip_length_delimited_AuthUserGrantRoleRequest(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2,
					       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AuthUserGrantRoleRequest(Rest2, 0, 0,
						F@_1, F@_2, TrUserData).

skip_group_AuthUserGrantRoleRequest(Bin, FNum, Z2, F@_1,
				    F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AuthUserGrantRoleRequest(Rest, 0, Z2,
						F@_1, F@_2, TrUserData).

skip_32_AuthUserGrantRoleRequest(<<_:32, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AuthUserGrantRoleRequest(Rest, Z1,
						Z2, F@_1, F@_2, TrUserData).

skip_64_AuthUserGrantRoleRequest(<<_:64, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AuthUserGrantRoleRequest(Rest, Z1,
						Z2, F@_1, F@_2, TrUserData).

decode_msg_AuthUserRevokeRoleRequest(Bin, TrUserData) ->
    dfp_read_field_def_AuthUserRevokeRoleRequest(Bin, 0, 0,
						 id([], TrUserData),
						 id([], TrUserData),
						 TrUserData).

dfp_read_field_def_AuthUserRevokeRoleRequest(<<10,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_AuthUserRevokeRoleRequest_name(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData);
dfp_read_field_def_AuthUserRevokeRoleRequest(<<18,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_AuthUserRevokeRoleRequest_role(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData);
dfp_read_field_def_AuthUserRevokeRoleRequest(<<>>, 0, 0,
					     F@_1, F@_2, _) ->
    #{name => F@_1, role => F@_2};
dfp_read_field_def_AuthUserRevokeRoleRequest(Other, Z1,
					     Z2, F@_1, F@_2, TrUserData) ->
    dg_read_field_def_AuthUserRevokeRoleRequest(Other, Z1,
						Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_AuthUserRevokeRoleRequest(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AuthUserRevokeRoleRequest(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2,
						TrUserData);
dg_read_field_def_AuthUserRevokeRoleRequest(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AuthUserRevokeRoleRequest_name(Rest, 0, 0, F@_1,
						 F@_2, TrUserData);
      18 ->
	  d_field_AuthUserRevokeRoleRequest_role(Rest, 0, 0, F@_1,
						 F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AuthUserRevokeRoleRequest(Rest, 0, 0, F@_1,
						      F@_2, TrUserData);
	    1 ->
		skip_64_AuthUserRevokeRoleRequest(Rest, 0, 0, F@_1,
						  F@_2, TrUserData);
	    2 ->
		skip_length_delimited_AuthUserRevokeRoleRequest(Rest, 0,
								0, F@_1, F@_2,
								TrUserData);
	    3 ->
		skip_group_AuthUserRevokeRoleRequest(Rest, Key bsr 3, 0,
						     F@_1, F@_2, TrUserData);
	    5 ->
		skip_32_AuthUserRevokeRoleRequest(Rest, 0, 0, F@_1,
						  F@_2, TrUserData)
	  end
    end;
dg_read_field_def_AuthUserRevokeRoleRequest(<<>>, 0, 0,
					    F@_1, F@_2, _) ->
    #{name => F@_1, role => F@_2}.

d_field_AuthUserRevokeRoleRequest_name(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_AuthUserRevokeRoleRequest_name(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2,
					   TrUserData);
d_field_AuthUserRevokeRoleRequest_name(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AuthUserRevokeRoleRequest(RestF, 0,
						 0, NewFValue, F@_2,
						 TrUserData).

d_field_AuthUserRevokeRoleRequest_role(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_AuthUserRevokeRoleRequest_role(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2,
					   TrUserData);
d_field_AuthUserRevokeRoleRequest_role(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AuthUserRevokeRoleRequest(RestF, 0,
						 0, F@_1, NewFValue,
						 TrUserData).

skip_varint_AuthUserRevokeRoleRequest(<<1:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_AuthUserRevokeRoleRequest(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData);
skip_varint_AuthUserRevokeRoleRequest(<<0:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AuthUserRevokeRoleRequest(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_AuthUserRevokeRoleRequest(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_AuthUserRevokeRoleRequest(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, TrUserData);
skip_length_delimited_AuthUserRevokeRoleRequest(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2,
						TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AuthUserRevokeRoleRequest(Rest2, 0,
						 0, F@_1, F@_2, TrUserData).

skip_group_AuthUserRevokeRoleRequest(Bin, FNum, Z2,
				     F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AuthUserRevokeRoleRequest(Rest, 0,
						 Z2, F@_1, F@_2, TrUserData).

skip_32_AuthUserRevokeRoleRequest(<<_:32, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AuthUserRevokeRoleRequest(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData).

skip_64_AuthUserRevokeRoleRequest(<<_:64, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AuthUserRevokeRoleRequest(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData).

decode_msg_AuthRoleAddRequest(Bin, TrUserData) ->
    dfp_read_field_def_AuthRoleAddRequest(Bin, 0, 0,
					  id([], TrUserData), TrUserData).

dfp_read_field_def_AuthRoleAddRequest(<<10,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    d_field_AuthRoleAddRequest_name(Rest, Z1, Z2, F@_1,
				    TrUserData);
dfp_read_field_def_AuthRoleAddRequest(<<>>, 0, 0, F@_1,
				      _) ->
    #{name => F@_1};
dfp_read_field_def_AuthRoleAddRequest(Other, Z1, Z2,
				      F@_1, TrUserData) ->
    dg_read_field_def_AuthRoleAddRequest(Other, Z1, Z2,
					 F@_1, TrUserData).

dg_read_field_def_AuthRoleAddRequest(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AuthRoleAddRequest(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_AuthRoleAddRequest(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AuthRoleAddRequest_name(Rest, 0, 0, F@_1,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AuthRoleAddRequest(Rest, 0, 0, F@_1,
					       TrUserData);
	    1 ->
		skip_64_AuthRoleAddRequest(Rest, 0, 0, F@_1,
					   TrUserData);
	    2 ->
		skip_length_delimited_AuthRoleAddRequest(Rest, 0, 0,
							 F@_1, TrUserData);
	    3 ->
		skip_group_AuthRoleAddRequest(Rest, Key bsr 3, 0, F@_1,
					      TrUserData);
	    5 ->
		skip_32_AuthRoleAddRequest(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_AuthRoleAddRequest(<<>>, 0, 0, F@_1,
				     _) ->
    #{name => F@_1}.

d_field_AuthRoleAddRequest_name(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_AuthRoleAddRequest_name(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
d_field_AuthRoleAddRequest_name(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AuthRoleAddRequest(RestF, 0, 0,
					  NewFValue, TrUserData).

skip_varint_AuthRoleAddRequest(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    skip_varint_AuthRoleAddRequest(Rest, Z1, Z2, F@_1,
				   TrUserData);
skip_varint_AuthRoleAddRequest(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_AuthRoleAddRequest(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_length_delimited_AuthRoleAddRequest(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_AuthRoleAddRequest(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_AuthRoleAddRequest(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AuthRoleAddRequest(Rest2, 0, 0, F@_1,
					  TrUserData).

skip_group_AuthRoleAddRequest(Bin, FNum, Z2, F@_1,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AuthRoleAddRequest(Rest, 0, Z2, F@_1,
					  TrUserData).

skip_32_AuthRoleAddRequest(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_AuthRoleAddRequest(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_64_AuthRoleAddRequest(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_AuthRoleAddRequest(Rest, Z1, Z2,
					  F@_1, TrUserData).

decode_msg_AuthRoleGetRequest(Bin, TrUserData) ->
    dfp_read_field_def_AuthRoleGetRequest(Bin, 0, 0,
					  id([], TrUserData), TrUserData).

dfp_read_field_def_AuthRoleGetRequest(<<10,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    d_field_AuthRoleGetRequest_role(Rest, Z1, Z2, F@_1,
				    TrUserData);
dfp_read_field_def_AuthRoleGetRequest(<<>>, 0, 0, F@_1,
				      _) ->
    #{role => F@_1};
dfp_read_field_def_AuthRoleGetRequest(Other, Z1, Z2,
				      F@_1, TrUserData) ->
    dg_read_field_def_AuthRoleGetRequest(Other, Z1, Z2,
					 F@_1, TrUserData).

dg_read_field_def_AuthRoleGetRequest(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AuthRoleGetRequest(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_AuthRoleGetRequest(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AuthRoleGetRequest_role(Rest, 0, 0, F@_1,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AuthRoleGetRequest(Rest, 0, 0, F@_1,
					       TrUserData);
	    1 ->
		skip_64_AuthRoleGetRequest(Rest, 0, 0, F@_1,
					   TrUserData);
	    2 ->
		skip_length_delimited_AuthRoleGetRequest(Rest, 0, 0,
							 F@_1, TrUserData);
	    3 ->
		skip_group_AuthRoleGetRequest(Rest, Key bsr 3, 0, F@_1,
					      TrUserData);
	    5 ->
		skip_32_AuthRoleGetRequest(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_AuthRoleGetRequest(<<>>, 0, 0, F@_1,
				     _) ->
    #{role => F@_1}.

d_field_AuthRoleGetRequest_role(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_AuthRoleGetRequest_role(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
d_field_AuthRoleGetRequest_role(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AuthRoleGetRequest(RestF, 0, 0,
					  NewFValue, TrUserData).

skip_varint_AuthRoleGetRequest(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    skip_varint_AuthRoleGetRequest(Rest, Z1, Z2, F@_1,
				   TrUserData);
skip_varint_AuthRoleGetRequest(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_AuthRoleGetRequest(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_length_delimited_AuthRoleGetRequest(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_AuthRoleGetRequest(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_AuthRoleGetRequest(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AuthRoleGetRequest(Rest2, 0, 0, F@_1,
					  TrUserData).

skip_group_AuthRoleGetRequest(Bin, FNum, Z2, F@_1,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AuthRoleGetRequest(Rest, 0, Z2, F@_1,
					  TrUserData).

skip_32_AuthRoleGetRequest(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_AuthRoleGetRequest(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_64_AuthRoleGetRequest(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_AuthRoleGetRequest(Rest, Z1, Z2,
					  F@_1, TrUserData).

decode_msg_AuthUserListRequest(Bin, TrUserData) ->
    dfp_read_field_def_AuthUserListRequest(Bin, 0, 0,
					   TrUserData).

dfp_read_field_def_AuthUserListRequest(<<>>, 0, 0, _) ->
    #{};
dfp_read_field_def_AuthUserListRequest(Other, Z1, Z2,
				       TrUserData) ->
    dg_read_field_def_AuthUserListRequest(Other, Z1, Z2,
					  TrUserData).

dg_read_field_def_AuthUserListRequest(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AuthUserListRequest(Rest, N + 7,
					  X bsl N + Acc, TrUserData);
dg_read_field_def_AuthUserListRequest(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_AuthUserListRequest(Rest, 0, 0, TrUserData);
      1 ->
	  skip_64_AuthUserListRequest(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_AuthUserListRequest(Rest, 0, 0,
						    TrUserData);
      3 ->
	  skip_group_AuthUserListRequest(Rest, Key bsr 3, 0,
					 TrUserData);
      5 -> skip_32_AuthUserListRequest(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_AuthUserListRequest(<<>>, 0, 0, _) ->
    #{}.

skip_varint_AuthUserListRequest(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, TrUserData) ->
    skip_varint_AuthUserListRequest(Rest, Z1, Z2,
				    TrUserData);
skip_varint_AuthUserListRequest(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, TrUserData) ->
    dfp_read_field_def_AuthUserListRequest(Rest, Z1, Z2,
					   TrUserData).

skip_length_delimited_AuthUserListRequest(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_AuthUserListRequest(Rest, N + 7,
					      X bsl N + Acc, TrUserData);
skip_length_delimited_AuthUserListRequest(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AuthUserListRequest(Rest2, 0, 0,
					   TrUserData).

skip_group_AuthUserListRequest(Bin, FNum, Z2,
			       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AuthUserListRequest(Rest, 0, Z2,
					   TrUserData).

skip_32_AuthUserListRequest(<<_:32, Rest/binary>>, Z1,
			    Z2, TrUserData) ->
    dfp_read_field_def_AuthUserListRequest(Rest, Z1, Z2,
					   TrUserData).

skip_64_AuthUserListRequest(<<_:64, Rest/binary>>, Z1,
			    Z2, TrUserData) ->
    dfp_read_field_def_AuthUserListRequest(Rest, Z1, Z2,
					   TrUserData).

decode_msg_AuthRoleListRequest(Bin, TrUserData) ->
    dfp_read_field_def_AuthRoleListRequest(Bin, 0, 0,
					   TrUserData).

dfp_read_field_def_AuthRoleListRequest(<<>>, 0, 0, _) ->
    #{};
dfp_read_field_def_AuthRoleListRequest(Other, Z1, Z2,
				       TrUserData) ->
    dg_read_field_def_AuthRoleListRequest(Other, Z1, Z2,
					  TrUserData).

dg_read_field_def_AuthRoleListRequest(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AuthRoleListRequest(Rest, N + 7,
					  X bsl N + Acc, TrUserData);
dg_read_field_def_AuthRoleListRequest(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_AuthRoleListRequest(Rest, 0, 0, TrUserData);
      1 ->
	  skip_64_AuthRoleListRequest(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_AuthRoleListRequest(Rest, 0, 0,
						    TrUserData);
      3 ->
	  skip_group_AuthRoleListRequest(Rest, Key bsr 3, 0,
					 TrUserData);
      5 -> skip_32_AuthRoleListRequest(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_AuthRoleListRequest(<<>>, 0, 0, _) ->
    #{}.

skip_varint_AuthRoleListRequest(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, TrUserData) ->
    skip_varint_AuthRoleListRequest(Rest, Z1, Z2,
				    TrUserData);
skip_varint_AuthRoleListRequest(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, TrUserData) ->
    dfp_read_field_def_AuthRoleListRequest(Rest, Z1, Z2,
					   TrUserData).

skip_length_delimited_AuthRoleListRequest(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_AuthRoleListRequest(Rest, N + 7,
					      X bsl N + Acc, TrUserData);
skip_length_delimited_AuthRoleListRequest(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AuthRoleListRequest(Rest2, 0, 0,
					   TrUserData).

skip_group_AuthRoleListRequest(Bin, FNum, Z2,
			       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AuthRoleListRequest(Rest, 0, Z2,
					   TrUserData).

skip_32_AuthRoleListRequest(<<_:32, Rest/binary>>, Z1,
			    Z2, TrUserData) ->
    dfp_read_field_def_AuthRoleListRequest(Rest, Z1, Z2,
					   TrUserData).

skip_64_AuthRoleListRequest(<<_:64, Rest/binary>>, Z1,
			    Z2, TrUserData) ->
    dfp_read_field_def_AuthRoleListRequest(Rest, Z1, Z2,
					   TrUserData).

decode_msg_AuthRoleDeleteRequest(Bin, TrUserData) ->
    dfp_read_field_def_AuthRoleDeleteRequest(Bin, 0, 0,
					     id([], TrUserData), TrUserData).

dfp_read_field_def_AuthRoleDeleteRequest(<<10,
					   Rest/binary>>,
					 Z1, Z2, F@_1, TrUserData) ->
    d_field_AuthRoleDeleteRequest_role(Rest, Z1, Z2, F@_1,
				       TrUserData);
dfp_read_field_def_AuthRoleDeleteRequest(<<>>, 0, 0,
					 F@_1, _) ->
    #{role => F@_1};
dfp_read_field_def_AuthRoleDeleteRequest(Other, Z1, Z2,
					 F@_1, TrUserData) ->
    dg_read_field_def_AuthRoleDeleteRequest(Other, Z1, Z2,
					    F@_1, TrUserData).

dg_read_field_def_AuthRoleDeleteRequest(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AuthRoleDeleteRequest(Rest, N + 7,
					    X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_AuthRoleDeleteRequest(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AuthRoleDeleteRequest_role(Rest, 0, 0, F@_1,
					     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AuthRoleDeleteRequest(Rest, 0, 0, F@_1,
						  TrUserData);
	    1 ->
		skip_64_AuthRoleDeleteRequest(Rest, 0, 0, F@_1,
					      TrUserData);
	    2 ->
		skip_length_delimited_AuthRoleDeleteRequest(Rest, 0, 0,
							    F@_1, TrUserData);
	    3 ->
		skip_group_AuthRoleDeleteRequest(Rest, Key bsr 3, 0,
						 F@_1, TrUserData);
	    5 ->
		skip_32_AuthRoleDeleteRequest(Rest, 0, 0, F@_1,
					      TrUserData)
	  end
    end;
dg_read_field_def_AuthRoleDeleteRequest(<<>>, 0, 0,
					F@_1, _) ->
    #{role => F@_1}.

d_field_AuthRoleDeleteRequest_role(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_AuthRoleDeleteRequest_role(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
d_field_AuthRoleDeleteRequest_role(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AuthRoleDeleteRequest(RestF, 0, 0,
					     NewFValue, TrUserData).

skip_varint_AuthRoleDeleteRequest(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    skip_varint_AuthRoleDeleteRequest(Rest, Z1, Z2, F@_1,
				      TrUserData);
skip_varint_AuthRoleDeleteRequest(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_AuthRoleDeleteRequest(Rest, Z1, Z2,
					     F@_1, TrUserData).

skip_length_delimited_AuthRoleDeleteRequest(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_AuthRoleDeleteRequest(Rest, N + 7,
						X bsl N + Acc, F@_1,
						TrUserData);
skip_length_delimited_AuthRoleDeleteRequest(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AuthRoleDeleteRequest(Rest2, 0, 0,
					     F@_1, TrUserData).

skip_group_AuthRoleDeleteRequest(Bin, FNum, Z2, F@_1,
				 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AuthRoleDeleteRequest(Rest, 0, Z2,
					     F@_1, TrUserData).

skip_32_AuthRoleDeleteRequest(<<_:32, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    dfp_read_field_def_AuthRoleDeleteRequest(Rest, Z1, Z2,
					     F@_1, TrUserData).

skip_64_AuthRoleDeleteRequest(<<_:64, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    dfp_read_field_def_AuthRoleDeleteRequest(Rest, Z1, Z2,
					     F@_1, TrUserData).

decode_msg_AuthRoleGrantPermissionRequest(Bin,
					  TrUserData) ->
    dfp_read_field_def_AuthRoleGrantPermissionRequest(Bin,
						      0, 0, id([], TrUserData),
						      id(undefined, TrUserData),
						      TrUserData).

dfp_read_field_def_AuthRoleGrantPermissionRequest(<<10,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2,
						  TrUserData) ->
    d_field_AuthRoleGrantPermissionRequest_name(Rest, Z1,
						Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_AuthRoleGrantPermissionRequest(<<18,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2,
						  TrUserData) ->
    d_field_AuthRoleGrantPermissionRequest_perm(Rest, Z1,
						Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_AuthRoleGrantPermissionRequest(<<>>,
						  0, 0, F@_1, F@_2, _) ->
    S1 = #{name => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{perm => F@_2}
    end;
dfp_read_field_def_AuthRoleGrantPermissionRequest(Other,
						  Z1, Z2, F@_1, F@_2,
						  TrUserData) ->
    dg_read_field_def_AuthRoleGrantPermissionRequest(Other,
						     Z1, Z2, F@_1, F@_2,
						     TrUserData).

dg_read_field_def_AuthRoleGrantPermissionRequest(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AuthRoleGrantPermissionRequest(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     F@_2, TrUserData);
dg_read_field_def_AuthRoleGrantPermissionRequest(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2,
						 TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AuthRoleGrantPermissionRequest_name(Rest, 0, 0,
						      F@_1, F@_2, TrUserData);
      18 ->
	  d_field_AuthRoleGrantPermissionRequest_perm(Rest, 0, 0,
						      F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AuthRoleGrantPermissionRequest(Rest, 0, 0,
							   F@_1, F@_2,
							   TrUserData);
	    1 ->
		skip_64_AuthRoleGrantPermissionRequest(Rest, 0, 0, F@_1,
						       F@_2, TrUserData);
	    2 ->
		skip_length_delimited_AuthRoleGrantPermissionRequest(Rest,
								     0, 0, F@_1,
								     F@_2,
								     TrUserData);
	    3 ->
		skip_group_AuthRoleGrantPermissionRequest(Rest,
							  Key bsr 3, 0, F@_1,
							  F@_2, TrUserData);
	    5 ->
		skip_32_AuthRoleGrantPermissionRequest(Rest, 0, 0, F@_1,
						       F@_2, TrUserData)
	  end
    end;
dg_read_field_def_AuthRoleGrantPermissionRequest(<<>>,
						 0, 0, F@_1, F@_2, _) ->
    S1 = #{name => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{perm => F@_2}
    end.

d_field_AuthRoleGrantPermissionRequest_name(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_AuthRoleGrantPermissionRequest_name(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2,
						TrUserData);
d_field_AuthRoleGrantPermissionRequest_name(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AuthRoleGrantPermissionRequest(RestF,
						      0, 0, NewFValue, F@_2,
						      TrUserData).

d_field_AuthRoleGrantPermissionRequest_perm(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_AuthRoleGrantPermissionRequest_perm(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2,
						TrUserData);
d_field_AuthRoleGrantPermissionRequest_perm(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_Permission(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AuthRoleGrantPermissionRequest(RestF,
						      0, 0, F@_1,
						      if Prev == '$undef' ->
							     NewFValue;
							 true ->
							     merge_msg_Permission(Prev,
										  NewFValue,
										  TrUserData)
						      end,
						      TrUserData).

skip_varint_AuthRoleGrantPermissionRequest(<<1:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_AuthRoleGrantPermissionRequest(Rest, Z1, Z2,
					       F@_1, F@_2, TrUserData);
skip_varint_AuthRoleGrantPermissionRequest(<<0:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AuthRoleGrantPermissionRequest(Rest,
						      Z1, Z2, F@_1, F@_2,
						      TrUserData).

skip_length_delimited_AuthRoleGrantPermissionRequest(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2,
						     TrUserData)
    when N < 57 ->
    skip_length_delimited_AuthRoleGrantPermissionRequest(Rest,
							 N + 7, X bsl N + Acc,
							 F@_1, F@_2,
							 TrUserData);
skip_length_delimited_AuthRoleGrantPermissionRequest(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2,
						     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AuthRoleGrantPermissionRequest(Rest2,
						      0, 0, F@_1, F@_2,
						      TrUserData).

skip_group_AuthRoleGrantPermissionRequest(Bin, FNum, Z2,
					  F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AuthRoleGrantPermissionRequest(Rest,
						      0, Z2, F@_1, F@_2,
						      TrUserData).

skip_32_AuthRoleGrantPermissionRequest(<<_:32,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AuthRoleGrantPermissionRequest(Rest,
						      Z1, Z2, F@_1, F@_2,
						      TrUserData).

skip_64_AuthRoleGrantPermissionRequest(<<_:64,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AuthRoleGrantPermissionRequest(Rest,
						      Z1, Z2, F@_1, F@_2,
						      TrUserData).

decode_msg_AuthRoleRevokePermissionRequest(Bin,
					   TrUserData) ->
    dfp_read_field_def_AuthRoleRevokePermissionRequest(Bin,
						       0, 0, id([], TrUserData),
						       id(<<>>, TrUserData),
						       id(<<>>, TrUserData),
						       TrUserData).

dfp_read_field_def_AuthRoleRevokePermissionRequest(<<10,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   TrUserData) ->
    d_field_AuthRoleRevokePermissionRequest_role(Rest, Z1,
						 Z2, F@_1, F@_2, F@_3,
						 TrUserData);
dfp_read_field_def_AuthRoleRevokePermissionRequest(<<18,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   TrUserData) ->
    d_field_AuthRoleRevokePermissionRequest_key(Rest, Z1,
						Z2, F@_1, F@_2, F@_3,
						TrUserData);
dfp_read_field_def_AuthRoleRevokePermissionRequest(<<26,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   TrUserData) ->
    d_field_AuthRoleRevokePermissionRequest_range_end(Rest,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      TrUserData);
dfp_read_field_def_AuthRoleRevokePermissionRequest(<<>>,
						   0, 0, F@_1, F@_2, F@_3, _) ->
    #{role => F@_1, key => F@_2, range_end => F@_3};
dfp_read_field_def_AuthRoleRevokePermissionRequest(Other,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   TrUserData) ->
    dg_read_field_def_AuthRoleRevokePermissionRequest(Other,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      TrUserData).

dg_read_field_def_AuthRoleRevokePermissionRequest(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AuthRoleRevokePermissionRequest(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, F@_3,
						      TrUserData);
dg_read_field_def_AuthRoleRevokePermissionRequest(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AuthRoleRevokePermissionRequest_role(Rest, 0, 0,
						       F@_1, F@_2, F@_3,
						       TrUserData);
      18 ->
	  d_field_AuthRoleRevokePermissionRequest_key(Rest, 0, 0,
						      F@_1, F@_2, F@_3,
						      TrUserData);
      26 ->
	  d_field_AuthRoleRevokePermissionRequest_range_end(Rest,
							    0, 0, F@_1, F@_2,
							    F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AuthRoleRevokePermissionRequest(Rest, 0, 0,
							    F@_1, F@_2, F@_3,
							    TrUserData);
	    1 ->
		skip_64_AuthRoleRevokePermissionRequest(Rest, 0, 0,
							F@_1, F@_2, F@_3,
							TrUserData);
	    2 ->
		skip_length_delimited_AuthRoleRevokePermissionRequest(Rest,
								      0, 0,
								      F@_1,
								      F@_2,
								      F@_3,
								      TrUserData);
	    3 ->
		skip_group_AuthRoleRevokePermissionRequest(Rest,
							   Key bsr 3, 0, F@_1,
							   F@_2, F@_3,
							   TrUserData);
	    5 ->
		skip_32_AuthRoleRevokePermissionRequest(Rest, 0, 0,
							F@_1, F@_2, F@_3,
							TrUserData)
	  end
    end;
dg_read_field_def_AuthRoleRevokePermissionRequest(<<>>,
						  0, 0, F@_1, F@_2, F@_3, _) ->
    #{role => F@_1, key => F@_2, range_end => F@_3}.

d_field_AuthRoleRevokePermissionRequest_role(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3,
					     TrUserData)
    when N < 57 ->
    d_field_AuthRoleRevokePermissionRequest_role(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, F@_3, TrUserData);
d_field_AuthRoleRevokePermissionRequest_role(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, _, F@_2, F@_3,
					     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AuthRoleRevokePermissionRequest(RestF,
						       0, 0, NewFValue, F@_2,
						       F@_3, TrUserData).

d_field_AuthRoleRevokePermissionRequest_key(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3,
					    TrUserData)
    when N < 57 ->
    d_field_AuthRoleRevokePermissionRequest_key(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2, F@_3,
						TrUserData);
d_field_AuthRoleRevokePermissionRequest_key(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, _, F@_3,
					    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_AuthRoleRevokePermissionRequest(RestF,
						       0, 0, F@_1, NewFValue,
						       F@_3, TrUserData).

d_field_AuthRoleRevokePermissionRequest_range_end(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  TrUserData)
    when N < 57 ->
    d_field_AuthRoleRevokePermissionRequest_range_end(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, F@_3,
						      TrUserData);
d_field_AuthRoleRevokePermissionRequest_range_end(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, _,
						  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_AuthRoleRevokePermissionRequest(RestF,
						       0, 0, F@_1, F@_2,
						       NewFValue, TrUserData).

skip_varint_AuthRoleRevokePermissionRequest(<<1:1, _:7,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3,
					    TrUserData) ->
    skip_varint_AuthRoleRevokePermissionRequest(Rest, Z1,
						Z2, F@_1, F@_2, F@_3,
						TrUserData);
skip_varint_AuthRoleRevokePermissionRequest(<<0:1, _:7,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3,
					    TrUserData) ->
    dfp_read_field_def_AuthRoleRevokePermissionRequest(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       TrUserData).

skip_length_delimited_AuthRoleRevokePermissionRequest(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2, F@_3,
						      TrUserData)
    when N < 57 ->
    skip_length_delimited_AuthRoleRevokePermissionRequest(Rest,
							  N + 7, X bsl N + Acc,
							  F@_1, F@_2, F@_3,
							  TrUserData);
skip_length_delimited_AuthRoleRevokePermissionRequest(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2, F@_3,
						      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AuthRoleRevokePermissionRequest(Rest2,
						       0, 0, F@_1, F@_2, F@_3,
						       TrUserData).

skip_group_AuthRoleRevokePermissionRequest(Bin, FNum,
					   Z2, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AuthRoleRevokePermissionRequest(Rest,
						       0, Z2, F@_1, F@_2, F@_3,
						       TrUserData).

skip_32_AuthRoleRevokePermissionRequest(<<_:32,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_AuthRoleRevokePermissionRequest(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       TrUserData).

skip_64_AuthRoleRevokePermissionRequest(<<_:64,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_AuthRoleRevokePermissionRequest(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       TrUserData).

decode_msg_AuthEnableResponse(Bin, TrUserData) ->
    dfp_read_field_def_AuthEnableResponse(Bin, 0, 0,
					  id(undefined, TrUserData),
					  TrUserData).

dfp_read_field_def_AuthEnableResponse(<<10,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    d_field_AuthEnableResponse_header(Rest, Z1, Z2, F@_1,
				      TrUserData);
dfp_read_field_def_AuthEnableResponse(<<>>, 0, 0, F@_1,
				      _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end;
dfp_read_field_def_AuthEnableResponse(Other, Z1, Z2,
				      F@_1, TrUserData) ->
    dg_read_field_def_AuthEnableResponse(Other, Z1, Z2,
					 F@_1, TrUserData).

dg_read_field_def_AuthEnableResponse(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AuthEnableResponse(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_AuthEnableResponse(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AuthEnableResponse_header(Rest, 0, 0, F@_1,
					    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AuthEnableResponse(Rest, 0, 0, F@_1,
					       TrUserData);
	    1 ->
		skip_64_AuthEnableResponse(Rest, 0, 0, F@_1,
					   TrUserData);
	    2 ->
		skip_length_delimited_AuthEnableResponse(Rest, 0, 0,
							 F@_1, TrUserData);
	    3 ->
		skip_group_AuthEnableResponse(Rest, Key bsr 3, 0, F@_1,
					      TrUserData);
	    5 ->
		skip_32_AuthEnableResponse(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_AuthEnableResponse(<<>>, 0, 0, F@_1,
				     _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end.

d_field_AuthEnableResponse_header(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_AuthEnableResponse_header(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
d_field_AuthEnableResponse_header(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ResponseHeader(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AuthEnableResponse(RestF, 0, 0,
					  if Prev == '$undef' -> NewFValue;
					     true ->
						 merge_msg_ResponseHeader(Prev,
									  NewFValue,
									  TrUserData)
					  end,
					  TrUserData).

skip_varint_AuthEnableResponse(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    skip_varint_AuthEnableResponse(Rest, Z1, Z2, F@_1,
				   TrUserData);
skip_varint_AuthEnableResponse(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_AuthEnableResponse(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_length_delimited_AuthEnableResponse(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_AuthEnableResponse(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_AuthEnableResponse(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AuthEnableResponse(Rest2, 0, 0, F@_1,
					  TrUserData).

skip_group_AuthEnableResponse(Bin, FNum, Z2, F@_1,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AuthEnableResponse(Rest, 0, Z2, F@_1,
					  TrUserData).

skip_32_AuthEnableResponse(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_AuthEnableResponse(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_64_AuthEnableResponse(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_AuthEnableResponse(Rest, Z1, Z2,
					  F@_1, TrUserData).

decode_msg_AuthDisableResponse(Bin, TrUserData) ->
    dfp_read_field_def_AuthDisableResponse(Bin, 0, 0,
					   id(undefined, TrUserData),
					   TrUserData).

dfp_read_field_def_AuthDisableResponse(<<10,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    d_field_AuthDisableResponse_header(Rest, Z1, Z2, F@_1,
				       TrUserData);
dfp_read_field_def_AuthDisableResponse(<<>>, 0, 0, F@_1,
				       _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end;
dfp_read_field_def_AuthDisableResponse(Other, Z1, Z2,
				       F@_1, TrUserData) ->
    dg_read_field_def_AuthDisableResponse(Other, Z1, Z2,
					  F@_1, TrUserData).

dg_read_field_def_AuthDisableResponse(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AuthDisableResponse(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_AuthDisableResponse(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AuthDisableResponse_header(Rest, 0, 0, F@_1,
					     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AuthDisableResponse(Rest, 0, 0, F@_1,
						TrUserData);
	    1 ->
		skip_64_AuthDisableResponse(Rest, 0, 0, F@_1,
					    TrUserData);
	    2 ->
		skip_length_delimited_AuthDisableResponse(Rest, 0, 0,
							  F@_1, TrUserData);
	    3 ->
		skip_group_AuthDisableResponse(Rest, Key bsr 3, 0, F@_1,
					       TrUserData);
	    5 ->
		skip_32_AuthDisableResponse(Rest, 0, 0, F@_1,
					    TrUserData)
	  end
    end;
dg_read_field_def_AuthDisableResponse(<<>>, 0, 0, F@_1,
				      _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end.

d_field_AuthDisableResponse_header(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_AuthDisableResponse_header(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
d_field_AuthDisableResponse_header(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ResponseHeader(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AuthDisableResponse(RestF, 0, 0,
					   if Prev == '$undef' -> NewFValue;
					      true ->
						  merge_msg_ResponseHeader(Prev,
									   NewFValue,
									   TrUserData)
					   end,
					   TrUserData).

skip_varint_AuthDisableResponse(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    skip_varint_AuthDisableResponse(Rest, Z1, Z2, F@_1,
				    TrUserData);
skip_varint_AuthDisableResponse(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_AuthDisableResponse(Rest, Z1, Z2,
					   F@_1, TrUserData).

skip_length_delimited_AuthDisableResponse(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_AuthDisableResponse(Rest, N + 7,
					      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_AuthDisableResponse(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AuthDisableResponse(Rest2, 0, 0,
					   F@_1, TrUserData).

skip_group_AuthDisableResponse(Bin, FNum, Z2, F@_1,
			       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AuthDisableResponse(Rest, 0, Z2,
					   F@_1, TrUserData).

skip_32_AuthDisableResponse(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, TrUserData) ->
    dfp_read_field_def_AuthDisableResponse(Rest, Z1, Z2,
					   F@_1, TrUserData).

skip_64_AuthDisableResponse(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, TrUserData) ->
    dfp_read_field_def_AuthDisableResponse(Rest, Z1, Z2,
					   F@_1, TrUserData).

decode_msg_AuthenticateResponse(Bin, TrUserData) ->
    dfp_read_field_def_AuthenticateResponse(Bin, 0, 0,
					    id(undefined, TrUserData),
					    id([], TrUserData), TrUserData).

dfp_read_field_def_AuthenticateResponse(<<10,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_AuthenticateResponse_header(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData);
dfp_read_field_def_AuthenticateResponse(<<18,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_AuthenticateResponse_token(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData);
dfp_read_field_def_AuthenticateResponse(<<>>, 0, 0,
					F@_1, F@_2, _) ->
    S1 = #{token => F@_2},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end;
dfp_read_field_def_AuthenticateResponse(Other, Z1, Z2,
					F@_1, F@_2, TrUserData) ->
    dg_read_field_def_AuthenticateResponse(Other, Z1, Z2,
					   F@_1, F@_2, TrUserData).

dg_read_field_def_AuthenticateResponse(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AuthenticateResponse(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2,
					   TrUserData);
dg_read_field_def_AuthenticateResponse(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AuthenticateResponse_header(Rest, 0, 0, F@_1,
					      F@_2, TrUserData);
      18 ->
	  d_field_AuthenticateResponse_token(Rest, 0, 0, F@_1,
					     F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AuthenticateResponse(Rest, 0, 0, F@_1, F@_2,
						 TrUserData);
	    1 ->
		skip_64_AuthenticateResponse(Rest, 0, 0, F@_1, F@_2,
					     TrUserData);
	    2 ->
		skip_length_delimited_AuthenticateResponse(Rest, 0, 0,
							   F@_1, F@_2,
							   TrUserData);
	    3 ->
		skip_group_AuthenticateResponse(Rest, Key bsr 3, 0,
						F@_1, F@_2, TrUserData);
	    5 ->
		skip_32_AuthenticateResponse(Rest, 0, 0, F@_1, F@_2,
					     TrUserData)
	  end
    end;
dg_read_field_def_AuthenticateResponse(<<>>, 0, 0, F@_1,
				       F@_2, _) ->
    S1 = #{token => F@_2},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end.

d_field_AuthenticateResponse_header(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_AuthenticateResponse_header(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_AuthenticateResponse_header(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ResponseHeader(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AuthenticateResponse(RestF, 0, 0,
					    if Prev == '$undef' -> NewFValue;
					       true ->
						   merge_msg_ResponseHeader(Prev,
									    NewFValue,
									    TrUserData)
					    end,
					    F@_2, TrUserData).

d_field_AuthenticateResponse_token(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_AuthenticateResponse_token(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_AuthenticateResponse_token(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AuthenticateResponse(RestF, 0, 0,
					    F@_1, NewFValue, TrUserData).

skip_varint_AuthenticateResponse(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_AuthenticateResponse(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
skip_varint_AuthenticateResponse(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AuthenticateResponse(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

skip_length_delimited_AuthenticateResponse(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_AuthenticateResponse(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2,
					       TrUserData);
skip_length_delimited_AuthenticateResponse(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AuthenticateResponse(Rest2, 0, 0,
					    F@_1, F@_2, TrUserData).

skip_group_AuthenticateResponse(Bin, FNum, Z2, F@_1,
				F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AuthenticateResponse(Rest, 0, Z2,
					    F@_1, F@_2, TrUserData).

skip_32_AuthenticateResponse(<<_:32, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AuthenticateResponse(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

skip_64_AuthenticateResponse(<<_:64, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AuthenticateResponse(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

decode_msg_AuthUserAddResponse(Bin, TrUserData) ->
    dfp_read_field_def_AuthUserAddResponse(Bin, 0, 0,
					   id(undefined, TrUserData),
					   TrUserData).

dfp_read_field_def_AuthUserAddResponse(<<10,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    d_field_AuthUserAddResponse_header(Rest, Z1, Z2, F@_1,
				       TrUserData);
dfp_read_field_def_AuthUserAddResponse(<<>>, 0, 0, F@_1,
				       _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end;
dfp_read_field_def_AuthUserAddResponse(Other, Z1, Z2,
				       F@_1, TrUserData) ->
    dg_read_field_def_AuthUserAddResponse(Other, Z1, Z2,
					  F@_1, TrUserData).

dg_read_field_def_AuthUserAddResponse(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AuthUserAddResponse(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_AuthUserAddResponse(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AuthUserAddResponse_header(Rest, 0, 0, F@_1,
					     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AuthUserAddResponse(Rest, 0, 0, F@_1,
						TrUserData);
	    1 ->
		skip_64_AuthUserAddResponse(Rest, 0, 0, F@_1,
					    TrUserData);
	    2 ->
		skip_length_delimited_AuthUserAddResponse(Rest, 0, 0,
							  F@_1, TrUserData);
	    3 ->
		skip_group_AuthUserAddResponse(Rest, Key bsr 3, 0, F@_1,
					       TrUserData);
	    5 ->
		skip_32_AuthUserAddResponse(Rest, 0, 0, F@_1,
					    TrUserData)
	  end
    end;
dg_read_field_def_AuthUserAddResponse(<<>>, 0, 0, F@_1,
				      _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end.

d_field_AuthUserAddResponse_header(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_AuthUserAddResponse_header(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
d_field_AuthUserAddResponse_header(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ResponseHeader(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AuthUserAddResponse(RestF, 0, 0,
					   if Prev == '$undef' -> NewFValue;
					      true ->
						  merge_msg_ResponseHeader(Prev,
									   NewFValue,
									   TrUserData)
					   end,
					   TrUserData).

skip_varint_AuthUserAddResponse(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    skip_varint_AuthUserAddResponse(Rest, Z1, Z2, F@_1,
				    TrUserData);
skip_varint_AuthUserAddResponse(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_AuthUserAddResponse(Rest, Z1, Z2,
					   F@_1, TrUserData).

skip_length_delimited_AuthUserAddResponse(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_AuthUserAddResponse(Rest, N + 7,
					      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_AuthUserAddResponse(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AuthUserAddResponse(Rest2, 0, 0,
					   F@_1, TrUserData).

skip_group_AuthUserAddResponse(Bin, FNum, Z2, F@_1,
			       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AuthUserAddResponse(Rest, 0, Z2,
					   F@_1, TrUserData).

skip_32_AuthUserAddResponse(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, TrUserData) ->
    dfp_read_field_def_AuthUserAddResponse(Rest, Z1, Z2,
					   F@_1, TrUserData).

skip_64_AuthUserAddResponse(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, TrUserData) ->
    dfp_read_field_def_AuthUserAddResponse(Rest, Z1, Z2,
					   F@_1, TrUserData).

decode_msg_AuthUserGetResponse(Bin, TrUserData) ->
    dfp_read_field_def_AuthUserGetResponse(Bin, 0, 0,
					   id(undefined, TrUserData),
					   id([], TrUserData), TrUserData).

dfp_read_field_def_AuthUserGetResponse(<<10,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_AuthUserGetResponse_header(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData);
dfp_read_field_def_AuthUserGetResponse(<<18,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_AuthUserGetResponse_roles(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData);
dfp_read_field_def_AuthUserGetResponse(<<>>, 0, 0, F@_1,
				       R1, TrUserData) ->
    S1 = #{roles => lists_reverse(R1, TrUserData)},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end;
dfp_read_field_def_AuthUserGetResponse(Other, Z1, Z2,
				       F@_1, F@_2, TrUserData) ->
    dg_read_field_def_AuthUserGetResponse(Other, Z1, Z2,
					  F@_1, F@_2, TrUserData).

dg_read_field_def_AuthUserGetResponse(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AuthUserGetResponse(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
dg_read_field_def_AuthUserGetResponse(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AuthUserGetResponse_header(Rest, 0, 0, F@_1,
					     F@_2, TrUserData);
      18 ->
	  d_field_AuthUserGetResponse_roles(Rest, 0, 0, F@_1,
					    F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AuthUserGetResponse(Rest, 0, 0, F@_1, F@_2,
						TrUserData);
	    1 ->
		skip_64_AuthUserGetResponse(Rest, 0, 0, F@_1, F@_2,
					    TrUserData);
	    2 ->
		skip_length_delimited_AuthUserGetResponse(Rest, 0, 0,
							  F@_1, F@_2,
							  TrUserData);
	    3 ->
		skip_group_AuthUserGetResponse(Rest, Key bsr 3, 0, F@_1,
					       F@_2, TrUserData);
	    5 ->
		skip_32_AuthUserGetResponse(Rest, 0, 0, F@_1, F@_2,
					    TrUserData)
	  end
    end;
dg_read_field_def_AuthUserGetResponse(<<>>, 0, 0, F@_1,
				      R1, TrUserData) ->
    S1 = #{roles => lists_reverse(R1, TrUserData)},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end.

d_field_AuthUserGetResponse_header(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_AuthUserGetResponse_header(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_AuthUserGetResponse_header(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ResponseHeader(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AuthUserGetResponse(RestF, 0, 0,
					   if Prev == '$undef' -> NewFValue;
					      true ->
						  merge_msg_ResponseHeader(Prev,
									   NewFValue,
									   TrUserData)
					   end,
					   F@_2, TrUserData).

d_field_AuthUserGetResponse_roles(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_AuthUserGetResponse_roles(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_AuthUserGetResponse_roles(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AuthUserGetResponse(RestF, 0, 0,
					   F@_1,
					   cons(NewFValue, Prev, TrUserData),
					   TrUserData).

skip_varint_AuthUserGetResponse(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_AuthUserGetResponse(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData);
skip_varint_AuthUserGetResponse(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AuthUserGetResponse(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

skip_length_delimited_AuthUserGetResponse(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_AuthUserGetResponse(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2,
					      TrUserData);
skip_length_delimited_AuthUserGetResponse(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AuthUserGetResponse(Rest2, 0, 0,
					   F@_1, F@_2, TrUserData).

skip_group_AuthUserGetResponse(Bin, FNum, Z2, F@_1,
			       F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AuthUserGetResponse(Rest, 0, Z2,
					   F@_1, F@_2, TrUserData).

skip_32_AuthUserGetResponse(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AuthUserGetResponse(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

skip_64_AuthUserGetResponse(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AuthUserGetResponse(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

decode_msg_AuthUserDeleteResponse(Bin, TrUserData) ->
    dfp_read_field_def_AuthUserDeleteResponse(Bin, 0, 0,
					      id(undefined, TrUserData),
					      TrUserData).

dfp_read_field_def_AuthUserDeleteResponse(<<10,
					    Rest/binary>>,
					  Z1, Z2, F@_1, TrUserData) ->
    d_field_AuthUserDeleteResponse_header(Rest, Z1, Z2,
					  F@_1, TrUserData);
dfp_read_field_def_AuthUserDeleteResponse(<<>>, 0, 0,
					  F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end;
dfp_read_field_def_AuthUserDeleteResponse(Other, Z1, Z2,
					  F@_1, TrUserData) ->
    dg_read_field_def_AuthUserDeleteResponse(Other, Z1, Z2,
					     F@_1, TrUserData).

dg_read_field_def_AuthUserDeleteResponse(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AuthUserDeleteResponse(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_AuthUserDeleteResponse(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AuthUserDeleteResponse_header(Rest, 0, 0, F@_1,
						TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AuthUserDeleteResponse(Rest, 0, 0, F@_1,
						   TrUserData);
	    1 ->
		skip_64_AuthUserDeleteResponse(Rest, 0, 0, F@_1,
					       TrUserData);
	    2 ->
		skip_length_delimited_AuthUserDeleteResponse(Rest, 0, 0,
							     F@_1, TrUserData);
	    3 ->
		skip_group_AuthUserDeleteResponse(Rest, Key bsr 3, 0,
						  F@_1, TrUserData);
	    5 ->
		skip_32_AuthUserDeleteResponse(Rest, 0, 0, F@_1,
					       TrUserData)
	  end
    end;
dg_read_field_def_AuthUserDeleteResponse(<<>>, 0, 0,
					 F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end.

d_field_AuthUserDeleteResponse_header(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_AuthUserDeleteResponse_header(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
d_field_AuthUserDeleteResponse_header(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ResponseHeader(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AuthUserDeleteResponse(RestF, 0, 0,
					      if Prev == '$undef' -> NewFValue;
						 true ->
						     merge_msg_ResponseHeader(Prev,
									      NewFValue,
									      TrUserData)
					      end,
					      TrUserData).

skip_varint_AuthUserDeleteResponse(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_AuthUserDeleteResponse(Rest, Z1, Z2, F@_1,
				       TrUserData);
skip_varint_AuthUserDeleteResponse(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_AuthUserDeleteResponse(Rest, Z1, Z2,
					      F@_1, TrUserData).

skip_length_delimited_AuthUserDeleteResponse(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_AuthUserDeleteResponse(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 TrUserData);
skip_length_delimited_AuthUserDeleteResponse(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AuthUserDeleteResponse(Rest2, 0, 0,
					      F@_1, TrUserData).

skip_group_AuthUserDeleteResponse(Bin, FNum, Z2, F@_1,
				  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AuthUserDeleteResponse(Rest, 0, Z2,
					      F@_1, TrUserData).

skip_32_AuthUserDeleteResponse(<<_:32, Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_AuthUserDeleteResponse(Rest, Z1, Z2,
					      F@_1, TrUserData).

skip_64_AuthUserDeleteResponse(<<_:64, Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_AuthUserDeleteResponse(Rest, Z1, Z2,
					      F@_1, TrUserData).

decode_msg_AuthUserChangePasswordResponse(Bin,
					  TrUserData) ->
    dfp_read_field_def_AuthUserChangePasswordResponse(Bin,
						      0, 0,
						      id(undefined, TrUserData),
						      TrUserData).

dfp_read_field_def_AuthUserChangePasswordResponse(<<10,
						    Rest/binary>>,
						  Z1, Z2, F@_1, TrUserData) ->
    d_field_AuthUserChangePasswordResponse_header(Rest, Z1,
						  Z2, F@_1, TrUserData);
dfp_read_field_def_AuthUserChangePasswordResponse(<<>>,
						  0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end;
dfp_read_field_def_AuthUserChangePasswordResponse(Other,
						  Z1, Z2, F@_1, TrUserData) ->
    dg_read_field_def_AuthUserChangePasswordResponse(Other,
						     Z1, Z2, F@_1, TrUserData).

dg_read_field_def_AuthUserChangePasswordResponse(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AuthUserChangePasswordResponse(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     TrUserData);
dg_read_field_def_AuthUserChangePasswordResponse(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AuthUserChangePasswordResponse_header(Rest, 0,
							0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AuthUserChangePasswordResponse(Rest, 0, 0,
							   F@_1, TrUserData);
	    1 ->
		skip_64_AuthUserChangePasswordResponse(Rest, 0, 0, F@_1,
						       TrUserData);
	    2 ->
		skip_length_delimited_AuthUserChangePasswordResponse(Rest,
								     0, 0, F@_1,
								     TrUserData);
	    3 ->
		skip_group_AuthUserChangePasswordResponse(Rest,
							  Key bsr 3, 0, F@_1,
							  TrUserData);
	    5 ->
		skip_32_AuthUserChangePasswordResponse(Rest, 0, 0, F@_1,
						       TrUserData)
	  end
    end;
dg_read_field_def_AuthUserChangePasswordResponse(<<>>,
						 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end.

d_field_AuthUserChangePasswordResponse_header(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_AuthUserChangePasswordResponse_header(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  TrUserData);
d_field_AuthUserChangePasswordResponse_header(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ResponseHeader(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AuthUserChangePasswordResponse(RestF,
						      0, 0,
						      if Prev == '$undef' ->
							     NewFValue;
							 true ->
							     merge_msg_ResponseHeader(Prev,
										      NewFValue,
										      TrUserData)
						      end,
						      TrUserData).

skip_varint_AuthUserChangePasswordResponse(<<1:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_AuthUserChangePasswordResponse(Rest, Z1, Z2,
					       F@_1, TrUserData);
skip_varint_AuthUserChangePasswordResponse(<<0:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_AuthUserChangePasswordResponse(Rest,
						      Z1, Z2, F@_1, TrUserData).

skip_length_delimited_AuthUserChangePasswordResponse(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_AuthUserChangePasswordResponse(Rest,
							 N + 7, X bsl N + Acc,
							 F@_1, TrUserData);
skip_length_delimited_AuthUserChangePasswordResponse(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1,
						     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AuthUserChangePasswordResponse(Rest2,
						      0, 0, F@_1, TrUserData).

skip_group_AuthUserChangePasswordResponse(Bin, FNum, Z2,
					  F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AuthUserChangePasswordResponse(Rest,
						      0, Z2, F@_1, TrUserData).

skip_32_AuthUserChangePasswordResponse(<<_:32,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_AuthUserChangePasswordResponse(Rest,
						      Z1, Z2, F@_1, TrUserData).

skip_64_AuthUserChangePasswordResponse(<<_:64,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_AuthUserChangePasswordResponse(Rest,
						      Z1, Z2, F@_1, TrUserData).

decode_msg_AuthUserGrantRoleResponse(Bin, TrUserData) ->
    dfp_read_field_def_AuthUserGrantRoleResponse(Bin, 0, 0,
						 id(undefined, TrUserData),
						 TrUserData).

dfp_read_field_def_AuthUserGrantRoleResponse(<<10,
					       Rest/binary>>,
					     Z1, Z2, F@_1, TrUserData) ->
    d_field_AuthUserGrantRoleResponse_header(Rest, Z1, Z2,
					     F@_1, TrUserData);
dfp_read_field_def_AuthUserGrantRoleResponse(<<>>, 0, 0,
					     F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end;
dfp_read_field_def_AuthUserGrantRoleResponse(Other, Z1,
					     Z2, F@_1, TrUserData) ->
    dg_read_field_def_AuthUserGrantRoleResponse(Other, Z1,
						Z2, F@_1, TrUserData).

dg_read_field_def_AuthUserGrantRoleResponse(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AuthUserGrantRoleResponse(Rest, N + 7,
						X bsl N + Acc, F@_1,
						TrUserData);
dg_read_field_def_AuthUserGrantRoleResponse(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AuthUserGrantRoleResponse_header(Rest, 0, 0,
						   F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AuthUserGrantRoleResponse(Rest, 0, 0, F@_1,
						      TrUserData);
	    1 ->
		skip_64_AuthUserGrantRoleResponse(Rest, 0, 0, F@_1,
						  TrUserData);
	    2 ->
		skip_length_delimited_AuthUserGrantRoleResponse(Rest, 0,
								0, F@_1,
								TrUserData);
	    3 ->
		skip_group_AuthUserGrantRoleResponse(Rest, Key bsr 3, 0,
						     F@_1, TrUserData);
	    5 ->
		skip_32_AuthUserGrantRoleResponse(Rest, 0, 0, F@_1,
						  TrUserData)
	  end
    end;
dg_read_field_def_AuthUserGrantRoleResponse(<<>>, 0, 0,
					    F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end.

d_field_AuthUserGrantRoleResponse_header(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_AuthUserGrantRoleResponse_header(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
d_field_AuthUserGrantRoleResponse_header(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ResponseHeader(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AuthUserGrantRoleResponse(RestF, 0,
						 0,
						 if Prev == '$undef' ->
							NewFValue;
						    true ->
							merge_msg_ResponseHeader(Prev,
										 NewFValue,
										 TrUserData)
						 end,
						 TrUserData).

skip_varint_AuthUserGrantRoleResponse(<<1:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    skip_varint_AuthUserGrantRoleResponse(Rest, Z1, Z2,
					  F@_1, TrUserData);
skip_varint_AuthUserGrantRoleResponse(<<0:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_AuthUserGrantRoleResponse(Rest, Z1,
						 Z2, F@_1, TrUserData).

skip_length_delimited_AuthUserGrantRoleResponse(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_AuthUserGrantRoleResponse(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    TrUserData);
skip_length_delimited_AuthUserGrantRoleResponse(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AuthUserGrantRoleResponse(Rest2, 0,
						 0, F@_1, TrUserData).

skip_group_AuthUserGrantRoleResponse(Bin, FNum, Z2,
				     F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AuthUserGrantRoleResponse(Rest, 0,
						 Z2, F@_1, TrUserData).

skip_32_AuthUserGrantRoleResponse(<<_:32, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_AuthUserGrantRoleResponse(Rest, Z1,
						 Z2, F@_1, TrUserData).

skip_64_AuthUserGrantRoleResponse(<<_:64, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_AuthUserGrantRoleResponse(Rest, Z1,
						 Z2, F@_1, TrUserData).

decode_msg_AuthUserRevokeRoleResponse(Bin,
				      TrUserData) ->
    dfp_read_field_def_AuthUserRevokeRoleResponse(Bin, 0, 0,
						  id(undefined, TrUserData),
						  TrUserData).

dfp_read_field_def_AuthUserRevokeRoleResponse(<<10,
						Rest/binary>>,
					      Z1, Z2, F@_1, TrUserData) ->
    d_field_AuthUserRevokeRoleResponse_header(Rest, Z1, Z2,
					      F@_1, TrUserData);
dfp_read_field_def_AuthUserRevokeRoleResponse(<<>>, 0,
					      0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end;
dfp_read_field_def_AuthUserRevokeRoleResponse(Other, Z1,
					      Z2, F@_1, TrUserData) ->
    dg_read_field_def_AuthUserRevokeRoleResponse(Other, Z1,
						 Z2, F@_1, TrUserData).

dg_read_field_def_AuthUserRevokeRoleResponse(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AuthUserRevokeRoleResponse(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 TrUserData);
dg_read_field_def_AuthUserRevokeRoleResponse(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AuthUserRevokeRoleResponse_header(Rest, 0, 0,
						    F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AuthUserRevokeRoleResponse(Rest, 0, 0, F@_1,
						       TrUserData);
	    1 ->
		skip_64_AuthUserRevokeRoleResponse(Rest, 0, 0, F@_1,
						   TrUserData);
	    2 ->
		skip_length_delimited_AuthUserRevokeRoleResponse(Rest,
								 0, 0, F@_1,
								 TrUserData);
	    3 ->
		skip_group_AuthUserRevokeRoleResponse(Rest, Key bsr 3,
						      0, F@_1, TrUserData);
	    5 ->
		skip_32_AuthUserRevokeRoleResponse(Rest, 0, 0, F@_1,
						   TrUserData)
	  end
    end;
dg_read_field_def_AuthUserRevokeRoleResponse(<<>>, 0, 0,
					     F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end.

d_field_AuthUserRevokeRoleResponse_header(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_AuthUserRevokeRoleResponse_header(Rest, N + 7,
					      X bsl N + Acc, F@_1, TrUserData);
d_field_AuthUserRevokeRoleResponse_header(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ResponseHeader(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AuthUserRevokeRoleResponse(RestF, 0,
						  0,
						  if Prev == '$undef' ->
							 NewFValue;
						     true ->
							 merge_msg_ResponseHeader(Prev,
										  NewFValue,
										  TrUserData)
						  end,
						  TrUserData).

skip_varint_AuthUserRevokeRoleResponse(<<1:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    skip_varint_AuthUserRevokeRoleResponse(Rest, Z1, Z2,
					   F@_1, TrUserData);
skip_varint_AuthUserRevokeRoleResponse(<<0:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_AuthUserRevokeRoleResponse(Rest, Z1,
						  Z2, F@_1, TrUserData).

skip_length_delimited_AuthUserRevokeRoleResponse(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_AuthUserRevokeRoleResponse(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     TrUserData);
skip_length_delimited_AuthUserRevokeRoleResponse(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AuthUserRevokeRoleResponse(Rest2, 0,
						  0, F@_1, TrUserData).

skip_group_AuthUserRevokeRoleResponse(Bin, FNum, Z2,
				      F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AuthUserRevokeRoleResponse(Rest, 0,
						  Z2, F@_1, TrUserData).

skip_32_AuthUserRevokeRoleResponse(<<_:32,
				     Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_AuthUserRevokeRoleResponse(Rest, Z1,
						  Z2, F@_1, TrUserData).

skip_64_AuthUserRevokeRoleResponse(<<_:64,
				     Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_AuthUserRevokeRoleResponse(Rest, Z1,
						  Z2, F@_1, TrUserData).

decode_msg_AuthRoleAddResponse(Bin, TrUserData) ->
    dfp_read_field_def_AuthRoleAddResponse(Bin, 0, 0,
					   id(undefined, TrUserData),
					   TrUserData).

dfp_read_field_def_AuthRoleAddResponse(<<10,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    d_field_AuthRoleAddResponse_header(Rest, Z1, Z2, F@_1,
				       TrUserData);
dfp_read_field_def_AuthRoleAddResponse(<<>>, 0, 0, F@_1,
				       _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end;
dfp_read_field_def_AuthRoleAddResponse(Other, Z1, Z2,
				       F@_1, TrUserData) ->
    dg_read_field_def_AuthRoleAddResponse(Other, Z1, Z2,
					  F@_1, TrUserData).

dg_read_field_def_AuthRoleAddResponse(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AuthRoleAddResponse(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_AuthRoleAddResponse(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AuthRoleAddResponse_header(Rest, 0, 0, F@_1,
					     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AuthRoleAddResponse(Rest, 0, 0, F@_1,
						TrUserData);
	    1 ->
		skip_64_AuthRoleAddResponse(Rest, 0, 0, F@_1,
					    TrUserData);
	    2 ->
		skip_length_delimited_AuthRoleAddResponse(Rest, 0, 0,
							  F@_1, TrUserData);
	    3 ->
		skip_group_AuthRoleAddResponse(Rest, Key bsr 3, 0, F@_1,
					       TrUserData);
	    5 ->
		skip_32_AuthRoleAddResponse(Rest, 0, 0, F@_1,
					    TrUserData)
	  end
    end;
dg_read_field_def_AuthRoleAddResponse(<<>>, 0, 0, F@_1,
				      _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end.

d_field_AuthRoleAddResponse_header(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_AuthRoleAddResponse_header(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
d_field_AuthRoleAddResponse_header(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ResponseHeader(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AuthRoleAddResponse(RestF, 0, 0,
					   if Prev == '$undef' -> NewFValue;
					      true ->
						  merge_msg_ResponseHeader(Prev,
									   NewFValue,
									   TrUserData)
					   end,
					   TrUserData).

skip_varint_AuthRoleAddResponse(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    skip_varint_AuthRoleAddResponse(Rest, Z1, Z2, F@_1,
				    TrUserData);
skip_varint_AuthRoleAddResponse(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_AuthRoleAddResponse(Rest, Z1, Z2,
					   F@_1, TrUserData).

skip_length_delimited_AuthRoleAddResponse(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_AuthRoleAddResponse(Rest, N + 7,
					      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_AuthRoleAddResponse(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AuthRoleAddResponse(Rest2, 0, 0,
					   F@_1, TrUserData).

skip_group_AuthRoleAddResponse(Bin, FNum, Z2, F@_1,
			       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AuthRoleAddResponse(Rest, 0, Z2,
					   F@_1, TrUserData).

skip_32_AuthRoleAddResponse(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, TrUserData) ->
    dfp_read_field_def_AuthRoleAddResponse(Rest, Z1, Z2,
					   F@_1, TrUserData).

skip_64_AuthRoleAddResponse(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, TrUserData) ->
    dfp_read_field_def_AuthRoleAddResponse(Rest, Z1, Z2,
					   F@_1, TrUserData).

decode_msg_AuthRoleGetResponse(Bin, TrUserData) ->
    dfp_read_field_def_AuthRoleGetResponse(Bin, 0, 0,
					   id(undefined, TrUserData),
					   id([], TrUserData), TrUserData).

dfp_read_field_def_AuthRoleGetResponse(<<10,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_AuthRoleGetResponse_header(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData);
dfp_read_field_def_AuthRoleGetResponse(<<18,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_AuthRoleGetResponse_perm(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
dfp_read_field_def_AuthRoleGetResponse(<<>>, 0, 0, F@_1,
				       R1, TrUserData) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{header => F@_1}
	 end,
    if R1 == '$undef' -> S2;
       true -> S2#{perm => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_AuthRoleGetResponse(Other, Z1, Z2,
				       F@_1, F@_2, TrUserData) ->
    dg_read_field_def_AuthRoleGetResponse(Other, Z1, Z2,
					  F@_1, F@_2, TrUserData).

dg_read_field_def_AuthRoleGetResponse(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AuthRoleGetResponse(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
dg_read_field_def_AuthRoleGetResponse(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AuthRoleGetResponse_header(Rest, 0, 0, F@_1,
					     F@_2, TrUserData);
      18 ->
	  d_field_AuthRoleGetResponse_perm(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AuthRoleGetResponse(Rest, 0, 0, F@_1, F@_2,
						TrUserData);
	    1 ->
		skip_64_AuthRoleGetResponse(Rest, 0, 0, F@_1, F@_2,
					    TrUserData);
	    2 ->
		skip_length_delimited_AuthRoleGetResponse(Rest, 0, 0,
							  F@_1, F@_2,
							  TrUserData);
	    3 ->
		skip_group_AuthRoleGetResponse(Rest, Key bsr 3, 0, F@_1,
					       F@_2, TrUserData);
	    5 ->
		skip_32_AuthRoleGetResponse(Rest, 0, 0, F@_1, F@_2,
					    TrUserData)
	  end
    end;
dg_read_field_def_AuthRoleGetResponse(<<>>, 0, 0, F@_1,
				      R1, TrUserData) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{header => F@_1}
	 end,
    if R1 == '$undef' -> S2;
       true -> S2#{perm => lists_reverse(R1, TrUserData)}
    end.

d_field_AuthRoleGetResponse_header(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_AuthRoleGetResponse_header(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_AuthRoleGetResponse_header(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ResponseHeader(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AuthRoleGetResponse(RestF, 0, 0,
					   if Prev == '$undef' -> NewFValue;
					      true ->
						  merge_msg_ResponseHeader(Prev,
									   NewFValue,
									   TrUserData)
					   end,
					   F@_2, TrUserData).

d_field_AuthRoleGetResponse_perm(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_AuthRoleGetResponse_perm(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_AuthRoleGetResponse_perm(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_Permission(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AuthRoleGetResponse(RestF, 0, 0,
					   F@_1,
					   cons(NewFValue, Prev, TrUserData),
					   TrUserData).

skip_varint_AuthRoleGetResponse(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_AuthRoleGetResponse(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData);
skip_varint_AuthRoleGetResponse(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AuthRoleGetResponse(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

skip_length_delimited_AuthRoleGetResponse(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_AuthRoleGetResponse(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2,
					      TrUserData);
skip_length_delimited_AuthRoleGetResponse(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AuthRoleGetResponse(Rest2, 0, 0,
					   F@_1, F@_2, TrUserData).

skip_group_AuthRoleGetResponse(Bin, FNum, Z2, F@_1,
			       F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AuthRoleGetResponse(Rest, 0, Z2,
					   F@_1, F@_2, TrUserData).

skip_32_AuthRoleGetResponse(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AuthRoleGetResponse(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

skip_64_AuthRoleGetResponse(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AuthRoleGetResponse(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

decode_msg_AuthRoleListResponse(Bin, TrUserData) ->
    dfp_read_field_def_AuthRoleListResponse(Bin, 0, 0,
					    id(undefined, TrUserData),
					    id([], TrUserData), TrUserData).

dfp_read_field_def_AuthRoleListResponse(<<10,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_AuthRoleListResponse_header(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData);
dfp_read_field_def_AuthRoleListResponse(<<18,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_AuthRoleListResponse_roles(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData);
dfp_read_field_def_AuthRoleListResponse(<<>>, 0, 0,
					F@_1, R1, TrUserData) ->
    S1 = #{roles => lists_reverse(R1, TrUserData)},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end;
dfp_read_field_def_AuthRoleListResponse(Other, Z1, Z2,
					F@_1, F@_2, TrUserData) ->
    dg_read_field_def_AuthRoleListResponse(Other, Z1, Z2,
					   F@_1, F@_2, TrUserData).

dg_read_field_def_AuthRoleListResponse(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AuthRoleListResponse(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2,
					   TrUserData);
dg_read_field_def_AuthRoleListResponse(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AuthRoleListResponse_header(Rest, 0, 0, F@_1,
					      F@_2, TrUserData);
      18 ->
	  d_field_AuthRoleListResponse_roles(Rest, 0, 0, F@_1,
					     F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AuthRoleListResponse(Rest, 0, 0, F@_1, F@_2,
						 TrUserData);
	    1 ->
		skip_64_AuthRoleListResponse(Rest, 0, 0, F@_1, F@_2,
					     TrUserData);
	    2 ->
		skip_length_delimited_AuthRoleListResponse(Rest, 0, 0,
							   F@_1, F@_2,
							   TrUserData);
	    3 ->
		skip_group_AuthRoleListResponse(Rest, Key bsr 3, 0,
						F@_1, F@_2, TrUserData);
	    5 ->
		skip_32_AuthRoleListResponse(Rest, 0, 0, F@_1, F@_2,
					     TrUserData)
	  end
    end;
dg_read_field_def_AuthRoleListResponse(<<>>, 0, 0, F@_1,
				       R1, TrUserData) ->
    S1 = #{roles => lists_reverse(R1, TrUserData)},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end.

d_field_AuthRoleListResponse_header(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_AuthRoleListResponse_header(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_AuthRoleListResponse_header(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ResponseHeader(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AuthRoleListResponse(RestF, 0, 0,
					    if Prev == '$undef' -> NewFValue;
					       true ->
						   merge_msg_ResponseHeader(Prev,
									    NewFValue,
									    TrUserData)
					    end,
					    F@_2, TrUserData).

d_field_AuthRoleListResponse_roles(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_AuthRoleListResponse_roles(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_AuthRoleListResponse_roles(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AuthRoleListResponse(RestF, 0, 0,
					    F@_1,
					    cons(NewFValue, Prev, TrUserData),
					    TrUserData).

skip_varint_AuthRoleListResponse(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_AuthRoleListResponse(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
skip_varint_AuthRoleListResponse(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AuthRoleListResponse(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

skip_length_delimited_AuthRoleListResponse(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_AuthRoleListResponse(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2,
					       TrUserData);
skip_length_delimited_AuthRoleListResponse(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AuthRoleListResponse(Rest2, 0, 0,
					    F@_1, F@_2, TrUserData).

skip_group_AuthRoleListResponse(Bin, FNum, Z2, F@_1,
				F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AuthRoleListResponse(Rest, 0, Z2,
					    F@_1, F@_2, TrUserData).

skip_32_AuthRoleListResponse(<<_:32, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AuthRoleListResponse(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

skip_64_AuthRoleListResponse(<<_:64, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AuthRoleListResponse(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

decode_msg_AuthUserListResponse(Bin, TrUserData) ->
    dfp_read_field_def_AuthUserListResponse(Bin, 0, 0,
					    id(undefined, TrUserData),
					    id([], TrUserData), TrUserData).

dfp_read_field_def_AuthUserListResponse(<<10,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_AuthUserListResponse_header(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData);
dfp_read_field_def_AuthUserListResponse(<<18,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_AuthUserListResponse_users(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData);
dfp_read_field_def_AuthUserListResponse(<<>>, 0, 0,
					F@_1, R1, TrUserData) ->
    S1 = #{users => lists_reverse(R1, TrUserData)},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end;
dfp_read_field_def_AuthUserListResponse(Other, Z1, Z2,
					F@_1, F@_2, TrUserData) ->
    dg_read_field_def_AuthUserListResponse(Other, Z1, Z2,
					   F@_1, F@_2, TrUserData).

dg_read_field_def_AuthUserListResponse(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AuthUserListResponse(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2,
					   TrUserData);
dg_read_field_def_AuthUserListResponse(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AuthUserListResponse_header(Rest, 0, 0, F@_1,
					      F@_2, TrUserData);
      18 ->
	  d_field_AuthUserListResponse_users(Rest, 0, 0, F@_1,
					     F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AuthUserListResponse(Rest, 0, 0, F@_1, F@_2,
						 TrUserData);
	    1 ->
		skip_64_AuthUserListResponse(Rest, 0, 0, F@_1, F@_2,
					     TrUserData);
	    2 ->
		skip_length_delimited_AuthUserListResponse(Rest, 0, 0,
							   F@_1, F@_2,
							   TrUserData);
	    3 ->
		skip_group_AuthUserListResponse(Rest, Key bsr 3, 0,
						F@_1, F@_2, TrUserData);
	    5 ->
		skip_32_AuthUserListResponse(Rest, 0, 0, F@_1, F@_2,
					     TrUserData)
	  end
    end;
dg_read_field_def_AuthUserListResponse(<<>>, 0, 0, F@_1,
				       R1, TrUserData) ->
    S1 = #{users => lists_reverse(R1, TrUserData)},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end.

d_field_AuthUserListResponse_header(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_AuthUserListResponse_header(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_AuthUserListResponse_header(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ResponseHeader(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AuthUserListResponse(RestF, 0, 0,
					    if Prev == '$undef' -> NewFValue;
					       true ->
						   merge_msg_ResponseHeader(Prev,
									    NewFValue,
									    TrUserData)
					    end,
					    F@_2, TrUserData).

d_field_AuthUserListResponse_users(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_AuthUserListResponse_users(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_AuthUserListResponse_users(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AuthUserListResponse(RestF, 0, 0,
					    F@_1,
					    cons(NewFValue, Prev, TrUserData),
					    TrUserData).

skip_varint_AuthUserListResponse(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_AuthUserListResponse(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
skip_varint_AuthUserListResponse(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AuthUserListResponse(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

skip_length_delimited_AuthUserListResponse(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_AuthUserListResponse(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2,
					       TrUserData);
skip_length_delimited_AuthUserListResponse(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AuthUserListResponse(Rest2, 0, 0,
					    F@_1, F@_2, TrUserData).

skip_group_AuthUserListResponse(Bin, FNum, Z2, F@_1,
				F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AuthUserListResponse(Rest, 0, Z2,
					    F@_1, F@_2, TrUserData).

skip_32_AuthUserListResponse(<<_:32, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AuthUserListResponse(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

skip_64_AuthUserListResponse(<<_:64, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AuthUserListResponse(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

decode_msg_AuthRoleDeleteResponse(Bin, TrUserData) ->
    dfp_read_field_def_AuthRoleDeleteResponse(Bin, 0, 0,
					      id(undefined, TrUserData),
					      TrUserData).

dfp_read_field_def_AuthRoleDeleteResponse(<<10,
					    Rest/binary>>,
					  Z1, Z2, F@_1, TrUserData) ->
    d_field_AuthRoleDeleteResponse_header(Rest, Z1, Z2,
					  F@_1, TrUserData);
dfp_read_field_def_AuthRoleDeleteResponse(<<>>, 0, 0,
					  F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end;
dfp_read_field_def_AuthRoleDeleteResponse(Other, Z1, Z2,
					  F@_1, TrUserData) ->
    dg_read_field_def_AuthRoleDeleteResponse(Other, Z1, Z2,
					     F@_1, TrUserData).

dg_read_field_def_AuthRoleDeleteResponse(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AuthRoleDeleteResponse(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_AuthRoleDeleteResponse(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AuthRoleDeleteResponse_header(Rest, 0, 0, F@_1,
						TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AuthRoleDeleteResponse(Rest, 0, 0, F@_1,
						   TrUserData);
	    1 ->
		skip_64_AuthRoleDeleteResponse(Rest, 0, 0, F@_1,
					       TrUserData);
	    2 ->
		skip_length_delimited_AuthRoleDeleteResponse(Rest, 0, 0,
							     F@_1, TrUserData);
	    3 ->
		skip_group_AuthRoleDeleteResponse(Rest, Key bsr 3, 0,
						  F@_1, TrUserData);
	    5 ->
		skip_32_AuthRoleDeleteResponse(Rest, 0, 0, F@_1,
					       TrUserData)
	  end
    end;
dg_read_field_def_AuthRoleDeleteResponse(<<>>, 0, 0,
					 F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end.

d_field_AuthRoleDeleteResponse_header(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_AuthRoleDeleteResponse_header(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
d_field_AuthRoleDeleteResponse_header(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ResponseHeader(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AuthRoleDeleteResponse(RestF, 0, 0,
					      if Prev == '$undef' -> NewFValue;
						 true ->
						     merge_msg_ResponseHeader(Prev,
									      NewFValue,
									      TrUserData)
					      end,
					      TrUserData).

skip_varint_AuthRoleDeleteResponse(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_AuthRoleDeleteResponse(Rest, Z1, Z2, F@_1,
				       TrUserData);
skip_varint_AuthRoleDeleteResponse(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_AuthRoleDeleteResponse(Rest, Z1, Z2,
					      F@_1, TrUserData).

skip_length_delimited_AuthRoleDeleteResponse(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_AuthRoleDeleteResponse(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 TrUserData);
skip_length_delimited_AuthRoleDeleteResponse(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AuthRoleDeleteResponse(Rest2, 0, 0,
					      F@_1, TrUserData).

skip_group_AuthRoleDeleteResponse(Bin, FNum, Z2, F@_1,
				  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AuthRoleDeleteResponse(Rest, 0, Z2,
					      F@_1, TrUserData).

skip_32_AuthRoleDeleteResponse(<<_:32, Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_AuthRoleDeleteResponse(Rest, Z1, Z2,
					      F@_1, TrUserData).

skip_64_AuthRoleDeleteResponse(<<_:64, Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_AuthRoleDeleteResponse(Rest, Z1, Z2,
					      F@_1, TrUserData).

decode_msg_AuthRoleGrantPermissionResponse(Bin,
					   TrUserData) ->
    dfp_read_field_def_AuthRoleGrantPermissionResponse(Bin,
						       0, 0,
						       id(undefined,
							  TrUserData),
						       TrUserData).

dfp_read_field_def_AuthRoleGrantPermissionResponse(<<10,
						     Rest/binary>>,
						   Z1, Z2, F@_1, TrUserData) ->
    d_field_AuthRoleGrantPermissionResponse_header(Rest, Z1,
						   Z2, F@_1, TrUserData);
dfp_read_field_def_AuthRoleGrantPermissionResponse(<<>>,
						   0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end;
dfp_read_field_def_AuthRoleGrantPermissionResponse(Other,
						   Z1, Z2, F@_1, TrUserData) ->
    dg_read_field_def_AuthRoleGrantPermissionResponse(Other,
						      Z1, Z2, F@_1, TrUserData).

dg_read_field_def_AuthRoleGrantPermissionResponse(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AuthRoleGrantPermissionResponse(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, TrUserData);
dg_read_field_def_AuthRoleGrantPermissionResponse(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AuthRoleGrantPermissionResponse_header(Rest, 0,
							 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AuthRoleGrantPermissionResponse(Rest, 0, 0,
							    F@_1, TrUserData);
	    1 ->
		skip_64_AuthRoleGrantPermissionResponse(Rest, 0, 0,
							F@_1, TrUserData);
	    2 ->
		skip_length_delimited_AuthRoleGrantPermissionResponse(Rest,
								      0, 0,
								      F@_1,
								      TrUserData);
	    3 ->
		skip_group_AuthRoleGrantPermissionResponse(Rest,
							   Key bsr 3, 0, F@_1,
							   TrUserData);
	    5 ->
		skip_32_AuthRoleGrantPermissionResponse(Rest, 0, 0,
							F@_1, TrUserData)
	  end
    end;
dg_read_field_def_AuthRoleGrantPermissionResponse(<<>>,
						  0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end.

d_field_AuthRoleGrantPermissionResponse_header(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_AuthRoleGrantPermissionResponse_header(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   TrUserData);
d_field_AuthRoleGrantPermissionResponse_header(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ResponseHeader(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AuthRoleGrantPermissionResponse(RestF,
						       0, 0,
						       if Prev == '$undef' ->
							      NewFValue;
							  true ->
							      merge_msg_ResponseHeader(Prev,
										       NewFValue,
										       TrUserData)
						       end,
						       TrUserData).

skip_varint_AuthRoleGrantPermissionResponse(<<1:1, _:7,
					      Rest/binary>>,
					    Z1, Z2, F@_1, TrUserData) ->
    skip_varint_AuthRoleGrantPermissionResponse(Rest, Z1,
						Z2, F@_1, TrUserData);
skip_varint_AuthRoleGrantPermissionResponse(<<0:1, _:7,
					      Rest/binary>>,
					    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_AuthRoleGrantPermissionResponse(Rest,
						       Z1, Z2, F@_1,
						       TrUserData).

skip_length_delimited_AuthRoleGrantPermissionResponse(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_AuthRoleGrantPermissionResponse(Rest,
							  N + 7, X bsl N + Acc,
							  F@_1, TrUserData);
skip_length_delimited_AuthRoleGrantPermissionResponse(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1,
						      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AuthRoleGrantPermissionResponse(Rest2,
						       0, 0, F@_1, TrUserData).

skip_group_AuthRoleGrantPermissionResponse(Bin, FNum,
					   Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AuthRoleGrantPermissionResponse(Rest,
						       0, Z2, F@_1, TrUserData).

skip_32_AuthRoleGrantPermissionResponse(<<_:32,
					  Rest/binary>>,
					Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_AuthRoleGrantPermissionResponse(Rest,
						       Z1, Z2, F@_1,
						       TrUserData).

skip_64_AuthRoleGrantPermissionResponse(<<_:64,
					  Rest/binary>>,
					Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_AuthRoleGrantPermissionResponse(Rest,
						       Z1, Z2, F@_1,
						       TrUserData).

decode_msg_AuthRoleRevokePermissionResponse(Bin,
					    TrUserData) ->
    dfp_read_field_def_AuthRoleRevokePermissionResponse(Bin,
							0, 0,
							id(undefined,
							   TrUserData),
							TrUserData).

dfp_read_field_def_AuthRoleRevokePermissionResponse(<<10,
						      Rest/binary>>,
						    Z1, Z2, F@_1, TrUserData) ->
    d_field_AuthRoleRevokePermissionResponse_header(Rest,
						    Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_AuthRoleRevokePermissionResponse(<<>>,
						    0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end;
dfp_read_field_def_AuthRoleRevokePermissionResponse(Other,
						    Z1, Z2, F@_1, TrUserData) ->
    dg_read_field_def_AuthRoleRevokePermissionResponse(Other,
						       Z1, Z2, F@_1,
						       TrUserData).

dg_read_field_def_AuthRoleRevokePermissionResponse(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AuthRoleRevokePermissionResponse(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, TrUserData);
dg_read_field_def_AuthRoleRevokePermissionResponse(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AuthRoleRevokePermissionResponse_header(Rest, 0,
							  0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AuthRoleRevokePermissionResponse(Rest, 0, 0,
							     F@_1, TrUserData);
	    1 ->
		skip_64_AuthRoleRevokePermissionResponse(Rest, 0, 0,
							 F@_1, TrUserData);
	    2 ->
		skip_length_delimited_AuthRoleRevokePermissionResponse(Rest,
								       0, 0,
								       F@_1,
								       TrUserData);
	    3 ->
		skip_group_AuthRoleRevokePermissionResponse(Rest,
							    Key bsr 3, 0, F@_1,
							    TrUserData);
	    5 ->
		skip_32_AuthRoleRevokePermissionResponse(Rest, 0, 0,
							 F@_1, TrUserData)
	  end
    end;
dg_read_field_def_AuthRoleRevokePermissionResponse(<<>>,
						   0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end.

d_field_AuthRoleRevokePermissionResponse_header(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_AuthRoleRevokePermissionResponse_header(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    TrUserData);
d_field_AuthRoleRevokePermissionResponse_header(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ResponseHeader(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AuthRoleRevokePermissionResponse(RestF,
							0, 0,
							if Prev == '$undef' ->
							       NewFValue;
							   true ->
							       merge_msg_ResponseHeader(Prev,
											NewFValue,
											TrUserData)
							end,
							TrUserData).

skip_varint_AuthRoleRevokePermissionResponse(<<1:1, _:7,
					       Rest/binary>>,
					     Z1, Z2, F@_1, TrUserData) ->
    skip_varint_AuthRoleRevokePermissionResponse(Rest, Z1,
						 Z2, F@_1, TrUserData);
skip_varint_AuthRoleRevokePermissionResponse(<<0:1, _:7,
					       Rest/binary>>,
					     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_AuthRoleRevokePermissionResponse(Rest,
							Z1, Z2, F@_1,
							TrUserData).

skip_length_delimited_AuthRoleRevokePermissionResponse(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_AuthRoleRevokePermissionResponse(Rest,
							   N + 7, X bsl N + Acc,
							   F@_1, TrUserData);
skip_length_delimited_AuthRoleRevokePermissionResponse(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1,
						       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AuthRoleRevokePermissionResponse(Rest2,
							0, 0, F@_1, TrUserData).

skip_group_AuthRoleRevokePermissionResponse(Bin, FNum,
					    Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AuthRoleRevokePermissionResponse(Rest,
							0, Z2, F@_1,
							TrUserData).

skip_32_AuthRoleRevokePermissionResponse(<<_:32,
					   Rest/binary>>,
					 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_AuthRoleRevokePermissionResponse(Rest,
							Z1, Z2, F@_1,
							TrUserData).

skip_64_AuthRoleRevokePermissionResponse(<<_:64,
					   Rest/binary>>,
					 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_AuthRoleRevokePermissionResponse(Rest,
							Z1, Z2, F@_1,
							TrUserData).

decode_msg_KeyValue(Bin, TrUserData) ->
    dfp_read_field_def_KeyValue(Bin, 0, 0,
				id(<<>>, TrUserData), id(0, TrUserData),
				id(0, TrUserData), id(0, TrUserData),
				id(<<>>, TrUserData), id(0, TrUserData),
				TrUserData).

dfp_read_field_def_KeyValue(<<10, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    d_field_KeyValue_key(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_KeyValue(<<16, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    d_field_KeyValue_create_revision(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_KeyValue(<<24, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    d_field_KeyValue_mod_revision(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_KeyValue(<<32, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    d_field_KeyValue_version(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_KeyValue(<<42, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    d_field_KeyValue_value(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_KeyValue(<<48, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    d_field_KeyValue_lease(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_KeyValue(<<>>, 0, 0, F@_1, F@_2,
			    F@_3, F@_4, F@_5, F@_6, _) ->
    #{key => F@_1, create_revision => F@_2,
      mod_revision => F@_3, version => F@_4, value => F@_5,
      lease => F@_6};
dfp_read_field_def_KeyValue(Other, Z1, Z2, F@_1, F@_2,
			    F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dg_read_field_def_KeyValue(Other, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, TrUserData).

dg_read_field_def_KeyValue(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_KeyValue(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dg_read_field_def_KeyValue(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			   TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_KeyValue_key(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, TrUserData);
      16 ->
	  d_field_KeyValue_create_revision(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, F@_5, F@_6, TrUserData);
      24 ->
	  d_field_KeyValue_mod_revision(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, F@_6, TrUserData);
      32 ->
	  d_field_KeyValue_version(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, TrUserData);
      42 ->
	  d_field_KeyValue_value(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, F@_6, TrUserData);
      48 ->
	  d_field_KeyValue_lease(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, F@_6, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_KeyValue(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				     F@_5, F@_6, TrUserData);
	    1 ->
		skip_64_KeyValue(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				 F@_5, F@_6, TrUserData);
	    2 ->
		skip_length_delimited_KeyValue(Rest, 0, 0, F@_1, F@_2,
					       F@_3, F@_4, F@_5, F@_6,
					       TrUserData);
	    3 ->
		skip_group_KeyValue(Rest, Key bsr 3, 0, F@_1, F@_2,
				    F@_3, F@_4, F@_5, F@_6, TrUserData);
	    5 ->
		skip_32_KeyValue(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				 F@_5, F@_6, TrUserData)
	  end
    end;
dg_read_field_def_KeyValue(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, _) ->
    #{key => F@_1, create_revision => F@_2,
      mod_revision => F@_3, version => F@_4, value => F@_5,
      lease => F@_6}.

d_field_KeyValue_key(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_KeyValue_key(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_KeyValue_key(<<0:1, X:7, Rest/binary>>, N, Acc,
		     _, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_KeyValue(RestF, 0, 0, NewFValue,
				F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

d_field_KeyValue_create_revision(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 TrUserData)
    when N < 57 ->
    d_field_KeyValue_create_revision(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, F@_6, TrUserData);
d_field_KeyValue_create_revision(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6,
				 TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_KeyValue(RestF, 0, 0, F@_1,
				NewFValue, F@_3, F@_4, F@_5, F@_6, TrUserData).

d_field_KeyValue_mod_revision(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			      TrUserData)
    when N < 57 ->
    d_field_KeyValue_mod_revision(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, TrUserData);
d_field_KeyValue_mod_revision(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6,
			      TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_KeyValue(RestF, 0, 0, F@_1, F@_2,
				NewFValue, F@_4, F@_5, F@_6, TrUserData).

d_field_KeyValue_version(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_KeyValue_version(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_KeyValue_version(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_KeyValue(RestF, 0, 0, F@_1, F@_2,
				F@_3, NewFValue, F@_5, F@_6, TrUserData).

d_field_KeyValue_value(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_KeyValue_value(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_KeyValue_value(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_KeyValue(RestF, 0, 0, F@_1, F@_2,
				F@_3, F@_4, NewFValue, F@_6, TrUserData).

d_field_KeyValue_lease(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_KeyValue_lease(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_KeyValue_lease(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_KeyValue(RestF, 0, 0, F@_1, F@_2,
				F@_3, F@_4, F@_5, NewFValue, TrUserData).

skip_varint_KeyValue(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    skip_varint_KeyValue(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, TrUserData);
skip_varint_KeyValue(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_KeyValue(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_length_delimited_KeyValue(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			       TrUserData)
    when N < 57 ->
    skip_length_delimited_KeyValue(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   F@_6, TrUserData);
skip_length_delimited_KeyValue(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_KeyValue(Rest2, 0, 0, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_group_KeyValue(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		    F@_4, F@_5, F@_6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_KeyValue(Rest, 0, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_32_KeyValue(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_KeyValue(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_64_KeyValue(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_KeyValue(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, TrUserData).

decode_msg_Event(Bin, TrUserData) ->
    dfp_read_field_def_Event(Bin, 0, 0,
			     id('PUT', TrUserData), id(undefined, TrUserData),
			     id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Event(<<8, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, TrUserData) ->
    d_field_Event_type(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		       TrUserData);
dfp_read_field_def_Event(<<18, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, TrUserData) ->
    d_field_Event_kv(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		     TrUserData);
dfp_read_field_def_Event(<<26, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, TrUserData) ->
    d_field_Event_prev_kv(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  TrUserData);
dfp_read_field_def_Event(<<>>, 0, 0, F@_1, F@_2, F@_3,
			 _) ->
    S1 = #{type => F@_1},
    S2 = if F@_2 == '$undef' -> S1;
	    true -> S1#{kv => F@_2}
	 end,
    if F@_3 == '$undef' -> S2;
       true -> S2#{prev_kv => F@_3}
    end;
dfp_read_field_def_Event(Other, Z1, Z2, F@_1, F@_2,
			 F@_3, TrUserData) ->
    dg_read_field_def_Event(Other, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData).

dg_read_field_def_Event(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Event(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_Event(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_Event_type(Rest, 0, 0, F@_1, F@_2, F@_3,
			     TrUserData);
      18 ->
	  d_field_Event_kv(Rest, 0, 0, F@_1, F@_2, F@_3,
			   TrUserData);
      26 ->
	  d_field_Event_prev_kv(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Event(Rest, 0, 0, F@_1, F@_2, F@_3,
				  TrUserData);
	    1 ->
		skip_64_Event(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
	    2 ->
		skip_length_delimited_Event(Rest, 0, 0, F@_1, F@_2,
					    F@_3, TrUserData);
	    3 ->
		skip_group_Event(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				 TrUserData);
	    5 ->
		skip_32_Event(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
	  end
    end;
dg_read_field_def_Event(<<>>, 0, 0, F@_1, F@_2, F@_3,
			_) ->
    S1 = #{type => F@_1},
    S2 = if F@_2 == '$undef' -> S1;
	    true -> S1#{kv => F@_2}
	 end,
    if F@_3 == '$undef' -> S2;
       true -> S2#{prev_kv => F@_3}
    end.

d_field_Event_type(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_Event_type(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, F@_3, TrUserData);
d_field_Event_type(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		   F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_Event.EventType'(begin
							<<Res:32/signed-native>> =
							    <<(X bsl N +
								 Acc):32/unsigned-native>>,
							id(Res, TrUserData)
						      end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_Event(RestF, 0, 0, NewFValue, F@_2,
			     F@_3, TrUserData).

d_field_Event_kv(<<1:1, X:7, Rest/binary>>, N, Acc,
		 F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_Event_kv(Rest, N + 7, X bsl N + Acc, F@_1, F@_2,
		     F@_3, TrUserData);
d_field_Event_kv(<<0:1, X:7, Rest/binary>>, N, Acc,
		 F@_1, Prev, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_KeyValue(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Event(RestF, 0, 0, F@_1,
			     if Prev == '$undef' -> NewFValue;
				true ->
				    merge_msg_KeyValue(Prev, NewFValue,
						       TrUserData)
			     end,
			     F@_3, TrUserData).

d_field_Event_prev_kv(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_Event_prev_kv(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, TrUserData);
d_field_Event_prev_kv(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_KeyValue(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Event(RestF, 0, 0, F@_1, F@_2,
			     if Prev == '$undef' -> NewFValue;
				true ->
				    merge_msg_KeyValue(Prev, NewFValue,
						       TrUserData)
			     end,
			     TrUserData).

skip_varint_Event(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_Event(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		      TrUserData);
skip_varint_Event(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_Event(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     TrUserData).

skip_length_delimited_Event(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_Event(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_Event(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Event(Rest2, 0, 0, F@_1, F@_2, F@_3,
			     TrUserData).

skip_group_Event(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Event(Rest, 0, Z2, F@_1, F@_2, F@_3,
			     TrUserData).

skip_32_Event(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	      F@_3, TrUserData) ->
    dfp_read_field_def_Event(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     TrUserData).

skip_64_Event(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	      F@_3, TrUserData) ->
    dfp_read_field_def_Event(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     TrUserData).

decode_msg_User(Bin, TrUserData) ->
    dfp_read_field_def_User(Bin, 0, 0, id(<<>>, TrUserData),
			    id(<<>>, TrUserData), id([], TrUserData),
			    TrUserData).

dfp_read_field_def_User(<<10, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, TrUserData) ->
    d_field_User_name(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		      TrUserData);
dfp_read_field_def_User(<<18, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, TrUserData) ->
    d_field_User_password(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  TrUserData);
dfp_read_field_def_User(<<26, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, TrUserData) ->
    d_field_User_roles(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		       TrUserData);
dfp_read_field_def_User(<<>>, 0, 0, F@_1, F@_2, R1,
			TrUserData) ->
    #{name => F@_1, password => F@_2,
      roles => lists_reverse(R1, TrUserData)};
dfp_read_field_def_User(Other, Z1, Z2, F@_1, F@_2, F@_3,
			TrUserData) ->
    dg_read_field_def_User(Other, Z1, Z2, F@_1, F@_2, F@_3,
			   TrUserData).

dg_read_field_def_User(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_User(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, TrUserData);
dg_read_field_def_User(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_User_name(Rest, 0, 0, F@_1, F@_2, F@_3,
			    TrUserData);
      18 ->
	  d_field_User_password(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData);
      26 ->
	  d_field_User_roles(Rest, 0, 0, F@_1, F@_2, F@_3,
			     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_User(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData);
	    1 ->
		skip_64_User(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
	    2 ->
		skip_length_delimited_User(Rest, 0, 0, F@_1, F@_2, F@_3,
					   TrUserData);
	    3 ->
		skip_group_User(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				TrUserData);
	    5 ->
		skip_32_User(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
	  end
    end;
dg_read_field_def_User(<<>>, 0, 0, F@_1, F@_2, R1,
		       TrUserData) ->
    #{name => F@_1, password => F@_2,
      roles => lists_reverse(R1, TrUserData)}.

d_field_User_name(<<1:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_User_name(Rest, N + 7, X bsl N + Acc, F@_1,
		      F@_2, F@_3, TrUserData);
d_field_User_name(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		  F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_User(RestF, 0, 0, NewFValue, F@_2,
			    F@_3, TrUserData).

d_field_User_password(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_User_password(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, TrUserData);
d_field_User_password(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_User(RestF, 0, 0, F@_1, NewFValue,
			    F@_3, TrUserData).

d_field_User_roles(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_User_roles(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, F@_3, TrUserData);
d_field_User_roles(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_User(RestF, 0, 0, F@_1, F@_2,
			    cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_User(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		 F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_User(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		     TrUserData);
skip_varint_User(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		 F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_User(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData).

skip_length_delimited_User(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_User(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_User(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_User(Rest2, 0, 0, F@_1, F@_2, F@_3,
			    TrUserData).

skip_group_User(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_User(Rest, 0, Z2, F@_1, F@_2, F@_3,
			    TrUserData).

skip_32_User(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	     F@_3, TrUserData) ->
    dfp_read_field_def_User(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData).

skip_64_User(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	     F@_3, TrUserData) ->
    dfp_read_field_def_User(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData).

decode_msg_Permission(Bin, TrUserData) ->
    dfp_read_field_def_Permission(Bin, 0, 0,
				  id('READ', TrUserData), id(<<>>, TrUserData),
				  id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_Permission(<<8, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_Permission_permType(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData);
dfp_read_field_def_Permission(<<18, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_Permission_key(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   TrUserData);
dfp_read_field_def_Permission(<<26, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_Permission_range_end(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData);
dfp_read_field_def_Permission(<<>>, 0, 0, F@_1, F@_2,
			      F@_3, _) ->
    #{permType => F@_1, key => F@_2, range_end => F@_3};
dfp_read_field_def_Permission(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData) ->
    dg_read_field_def_Permission(Other, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData).

dg_read_field_def_Permission(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Permission(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_Permission(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_Permission_permType(Rest, 0, 0, F@_1, F@_2,
				      F@_3, TrUserData);
      18 ->
	  d_field_Permission_key(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData);
      26 ->
	  d_field_Permission_range_end(Rest, 0, 0, F@_1, F@_2,
				       F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Permission(Rest, 0, 0, F@_1, F@_2, F@_3,
				       TrUserData);
	    1 ->
		skip_64_Permission(Rest, 0, 0, F@_1, F@_2, F@_3,
				   TrUserData);
	    2 ->
		skip_length_delimited_Permission(Rest, 0, 0, F@_1, F@_2,
						 F@_3, TrUserData);
	    3 ->
		skip_group_Permission(Rest, Key bsr 3, 0, F@_1, F@_2,
				      F@_3, TrUserData);
	    5 ->
		skip_32_Permission(Rest, 0, 0, F@_1, F@_2, F@_3,
				   TrUserData)
	  end
    end;
dg_read_field_def_Permission(<<>>, 0, 0, F@_1, F@_2,
			     F@_3, _) ->
    #{permType => F@_1, key => F@_2, range_end => F@_3}.

d_field_Permission_permType(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_Permission_permType(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, TrUserData);
d_field_Permission_permType(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_Permission.Type'(begin
							<<Res:32/signed-native>> =
							    <<(X bsl N +
								 Acc):32/unsigned-native>>,
							id(Res, TrUserData)
						      end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_Permission(RestF, 0, 0, NewFValue,
				  F@_2, F@_3, TrUserData).

d_field_Permission_key(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_Permission_key(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, TrUserData);
d_field_Permission_key(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_Permission(RestF, 0, 0, F@_1,
				  NewFValue, F@_3, TrUserData).

d_field_Permission_range_end(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_Permission_range_end(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, TrUserData);
d_field_Permission_range_end(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_Permission(RestF, 0, 0, F@_1, F@_2,
				  NewFValue, TrUserData).

skip_varint_Permission(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_Permission(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   TrUserData);
skip_varint_Permission(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_Permission(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData).

skip_length_delimited_Permission(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_Permission(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3,
				     TrUserData);
skip_length_delimited_Permission(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Permission(Rest2, 0, 0, F@_1, F@_2,
				  F@_3, TrUserData).

skip_group_Permission(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Permission(Rest, 0, Z2, F@_1, F@_2,
				  F@_3, TrUserData).

skip_32_Permission(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_Permission(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData).

skip_64_Permission(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_Permission(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData).

decode_msg_Role(Bin, TrUserData) ->
    dfp_read_field_def_Role(Bin, 0, 0, id(<<>>, TrUserData),
			    id([], TrUserData), TrUserData).

dfp_read_field_def_Role(<<10, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, TrUserData) ->
    d_field_Role_name(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_Role(<<18, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, TrUserData) ->
    d_field_Role_keyPermission(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
dfp_read_field_def_Role(<<>>, 0, 0, F@_1, R1,
			TrUserData) ->
    S1 = #{name => F@_1},
    if R1 == '$undef' -> S1;
       true ->
	   S1#{keyPermission => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_Role(Other, Z1, Z2, F@_1, F@_2,
			TrUserData) ->
    dg_read_field_def_Role(Other, Z1, Z2, F@_1, F@_2,
			   TrUserData).

dg_read_field_def_Role(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Role(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, TrUserData);
dg_read_field_def_Role(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Role_name(Rest, 0, 0, F@_1, F@_2, TrUserData);
      18 ->
	  d_field_Role_keyPermission(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Role(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_Role(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_Role(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
	    3 ->
		skip_group_Role(Rest, Key bsr 3, 0, F@_1, F@_2,
				TrUserData);
	    5 -> skip_32_Role(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_Role(<<>>, 0, 0, F@_1, R1,
		       TrUserData) ->
    S1 = #{name => F@_1},
    if R1 == '$undef' -> S1;
       true ->
	   S1#{keyPermission => lists_reverse(R1, TrUserData)}
    end.

d_field_Role_name(<<1:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_Role_name(Rest, N + 7, X bsl N + Acc, F@_1,
		      F@_2, TrUserData);
d_field_Role_name(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		  F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_Role(RestF, 0, 0, NewFValue, F@_2,
			    TrUserData).

d_field_Role_keyPermission(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_Role_keyPermission(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
d_field_Role_keyPermission(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_Permission(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Role(RestF, 0, 0, F@_1,
			    cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_Role(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		 F@_1, F@_2, TrUserData) ->
    skip_varint_Role(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_Role(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		 F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_Role(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData).

skip_length_delimited_Role(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_Role(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
skip_length_delimited_Role(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Role(Rest2, 0, 0, F@_1, F@_2,
			    TrUserData).

skip_group_Role(Bin, FNum, Z2, F@_1, F@_2,
		TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Role(Rest, 0, Z2, F@_1, F@_2,
			    TrUserData).

skip_32_Role(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	     TrUserData) ->
    dfp_read_field_def_Role(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData).

skip_64_Role(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	     TrUserData) ->
    dfp_read_field_def_Role(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData).

'd_enum_RangeRequest.SortOrder'(0) -> 'NONE';
'd_enum_RangeRequest.SortOrder'(1) -> 'ASCEND';
'd_enum_RangeRequest.SortOrder'(2) -> 'DESCEND';
'd_enum_RangeRequest.SortOrder'(V) -> V.

'd_enum_RangeRequest.SortTarget'(0) -> 'KEY';
'd_enum_RangeRequest.SortTarget'(1) -> 'VERSION';
'd_enum_RangeRequest.SortTarget'(2) -> 'CREATE';
'd_enum_RangeRequest.SortTarget'(3) -> 'MOD';
'd_enum_RangeRequest.SortTarget'(4) -> 'VALUE';
'd_enum_RangeRequest.SortTarget'(V) -> V.

'd_enum_Compare.CompareResult'(0) -> 'EQUAL';
'd_enum_Compare.CompareResult'(1) -> 'GREATER';
'd_enum_Compare.CompareResult'(2) -> 'LESS';
'd_enum_Compare.CompareResult'(3) -> 'NOT_EQUAL';
'd_enum_Compare.CompareResult'(V) -> V.

'd_enum_Compare.CompareTarget'(0) -> 'VERSION';
'd_enum_Compare.CompareTarget'(1) -> 'CREATE';
'd_enum_Compare.CompareTarget'(2) -> 'MOD';
'd_enum_Compare.CompareTarget'(3) -> 'VALUE';
'd_enum_Compare.CompareTarget'(4) -> 'LEASE';
'd_enum_Compare.CompareTarget'(V) -> V.

'd_enum_WatchCreateRequest.FilterType'(0) -> 'NOPUT';
'd_enum_WatchCreateRequest.FilterType'(1) -> 'NODELETE';
'd_enum_WatchCreateRequest.FilterType'(V) -> V.

d_enum_AlarmType(0) -> 'NONE';
d_enum_AlarmType(1) -> 'NOSPACE';
d_enum_AlarmType(2) -> 'CORRUPT';
d_enum_AlarmType(V) -> V.

'd_enum_AlarmRequest.AlarmAction'(0) -> 'GET';
'd_enum_AlarmRequest.AlarmAction'(1) -> 'ACTIVATE';
'd_enum_AlarmRequest.AlarmAction'(2) -> 'DEACTIVATE';
'd_enum_AlarmRequest.AlarmAction'(V) -> V.

'd_enum_Event.EventType'(0) -> 'PUT';
'd_enum_Event.EventType'(1) -> 'DELETE';
'd_enum_Event.EventType'(V) -> V.

'd_enum_Permission.Type'(0) -> 'READ';
'd_enum_Permission.Type'(1) -> 'WRITE';
'd_enum_Permission.Type'(2) -> 'READWRITE';
'd_enum_Permission.Type'(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'ResponseHeader' ->
	  merge_msg_ResponseHeader(Prev, New, TrUserData);
      'RangeRequest' ->
	  merge_msg_RangeRequest(Prev, New, TrUserData);
      'RangeResponse' ->
	  merge_msg_RangeResponse(Prev, New, TrUserData);
      'PutRequest' ->
	  merge_msg_PutRequest(Prev, New, TrUserData);
      'PutResponse' ->
	  merge_msg_PutResponse(Prev, New, TrUserData);
      'DeleteRangeRequest' ->
	  merge_msg_DeleteRangeRequest(Prev, New, TrUserData);
      'DeleteRangeResponse' ->
	  merge_msg_DeleteRangeResponse(Prev, New, TrUserData);
      'RequestOp' ->
	  merge_msg_RequestOp(Prev, New, TrUserData);
      'ResponseOp' ->
	  merge_msg_ResponseOp(Prev, New, TrUserData);
      'Compare' -> merge_msg_Compare(Prev, New, TrUserData);
      'TxnRequest' ->
	  merge_msg_TxnRequest(Prev, New, TrUserData);
      'TxnResponse' ->
	  merge_msg_TxnResponse(Prev, New, TrUserData);
      'CompactionRequest' ->
	  merge_msg_CompactionRequest(Prev, New, TrUserData);
      'CompactionResponse' ->
	  merge_msg_CompactionResponse(Prev, New, TrUserData);
      'HashRequest' ->
	  merge_msg_HashRequest(Prev, New, TrUserData);
      'HashKVRequest' ->
	  merge_msg_HashKVRequest(Prev, New, TrUserData);
      'HashKVResponse' ->
	  merge_msg_HashKVResponse(Prev, New, TrUserData);
      'HashResponse' ->
	  merge_msg_HashResponse(Prev, New, TrUserData);
      'SnapshotRequest' ->
	  merge_msg_SnapshotRequest(Prev, New, TrUserData);
      'SnapshotResponse' ->
	  merge_msg_SnapshotResponse(Prev, New, TrUserData);
      'WatchRequest' ->
	  merge_msg_WatchRequest(Prev, New, TrUserData);
      'WatchCreateRequest' ->
	  merge_msg_WatchCreateRequest(Prev, New, TrUserData);
      'WatchCancelRequest' ->
	  merge_msg_WatchCancelRequest(Prev, New, TrUserData);
      'WatchProgressRequest' ->
	  merge_msg_WatchProgressRequest(Prev, New, TrUserData);
      'WatchResponse' ->
	  merge_msg_WatchResponse(Prev, New, TrUserData);
      'LeaseGrantRequest' ->
	  merge_msg_LeaseGrantRequest(Prev, New, TrUserData);
      'LeaseGrantResponse' ->
	  merge_msg_LeaseGrantResponse(Prev, New, TrUserData);
      'LeaseRevokeRequest' ->
	  merge_msg_LeaseRevokeRequest(Prev, New, TrUserData);
      'LeaseRevokeResponse' ->
	  merge_msg_LeaseRevokeResponse(Prev, New, TrUserData);
      'LeaseCheckpoint' ->
	  merge_msg_LeaseCheckpoint(Prev, New, TrUserData);
      'LeaseCheckpointRequest' ->
	  merge_msg_LeaseCheckpointRequest(Prev, New, TrUserData);
      'LeaseCheckpointResponse' ->
	  merge_msg_LeaseCheckpointResponse(Prev, New,
					    TrUserData);
      'LeaseKeepAliveRequest' ->
	  merge_msg_LeaseKeepAliveRequest(Prev, New, TrUserData);
      'LeaseKeepAliveResponse' ->
	  merge_msg_LeaseKeepAliveResponse(Prev, New, TrUserData);
      'LeaseTimeToLiveRequest' ->
	  merge_msg_LeaseTimeToLiveRequest(Prev, New, TrUserData);
      'LeaseTimeToLiveResponse' ->
	  merge_msg_LeaseTimeToLiveResponse(Prev, New,
					    TrUserData);
      'LeaseLeasesRequest' ->
	  merge_msg_LeaseLeasesRequest(Prev, New, TrUserData);
      'LeaseStatus' ->
	  merge_msg_LeaseStatus(Prev, New, TrUserData);
      'LeaseLeasesResponse' ->
	  merge_msg_LeaseLeasesResponse(Prev, New, TrUserData);
      'Member' -> merge_msg_Member(Prev, New, TrUserData);
      'MemberAddRequest' ->
	  merge_msg_MemberAddRequest(Prev, New, TrUserData);
      'MemberAddResponse' ->
	  merge_msg_MemberAddResponse(Prev, New, TrUserData);
      'MemberRemoveRequest' ->
	  merge_msg_MemberRemoveRequest(Prev, New, TrUserData);
      'MemberRemoveResponse' ->
	  merge_msg_MemberRemoveResponse(Prev, New, TrUserData);
      'MemberUpdateRequest' ->
	  merge_msg_MemberUpdateRequest(Prev, New, TrUserData);
      'MemberUpdateResponse' ->
	  merge_msg_MemberUpdateResponse(Prev, New, TrUserData);
      'MemberListRequest' ->
	  merge_msg_MemberListRequest(Prev, New, TrUserData);
      'MemberListResponse' ->
	  merge_msg_MemberListResponse(Prev, New, TrUserData);
      'DefragmentRequest' ->
	  merge_msg_DefragmentRequest(Prev, New, TrUserData);
      'DefragmentResponse' ->
	  merge_msg_DefragmentResponse(Prev, New, TrUserData);
      'MoveLeaderRequest' ->
	  merge_msg_MoveLeaderRequest(Prev, New, TrUserData);
      'MoveLeaderResponse' ->
	  merge_msg_MoveLeaderResponse(Prev, New, TrUserData);
      'AlarmRequest' ->
	  merge_msg_AlarmRequest(Prev, New, TrUserData);
      'AlarmMember' ->
	  merge_msg_AlarmMember(Prev, New, TrUserData);
      'AlarmResponse' ->
	  merge_msg_AlarmResponse(Prev, New, TrUserData);
      'StatusRequest' ->
	  merge_msg_StatusRequest(Prev, New, TrUserData);
      'StatusResponse' ->
	  merge_msg_StatusResponse(Prev, New, TrUserData);
      'AuthEnableRequest' ->
	  merge_msg_AuthEnableRequest(Prev, New, TrUserData);
      'AuthDisableRequest' ->
	  merge_msg_AuthDisableRequest(Prev, New, TrUserData);
      'AuthenticateRequest' ->
	  merge_msg_AuthenticateRequest(Prev, New, TrUserData);
      'AuthUserAddRequest' ->
	  merge_msg_AuthUserAddRequest(Prev, New, TrUserData);
      'AuthUserGetRequest' ->
	  merge_msg_AuthUserGetRequest(Prev, New, TrUserData);
      'AuthUserDeleteRequest' ->
	  merge_msg_AuthUserDeleteRequest(Prev, New, TrUserData);
      'AuthUserChangePasswordRequest' ->
	  merge_msg_AuthUserChangePasswordRequest(Prev, New,
						  TrUserData);
      'AuthUserGrantRoleRequest' ->
	  merge_msg_AuthUserGrantRoleRequest(Prev, New,
					     TrUserData);
      'AuthUserRevokeRoleRequest' ->
	  merge_msg_AuthUserRevokeRoleRequest(Prev, New,
					      TrUserData);
      'AuthRoleAddRequest' ->
	  merge_msg_AuthRoleAddRequest(Prev, New, TrUserData);
      'AuthRoleGetRequest' ->
	  merge_msg_AuthRoleGetRequest(Prev, New, TrUserData);
      'AuthUserListRequest' ->
	  merge_msg_AuthUserListRequest(Prev, New, TrUserData);
      'AuthRoleListRequest' ->
	  merge_msg_AuthRoleListRequest(Prev, New, TrUserData);
      'AuthRoleDeleteRequest' ->
	  merge_msg_AuthRoleDeleteRequest(Prev, New, TrUserData);
      'AuthRoleGrantPermissionRequest' ->
	  merge_msg_AuthRoleGrantPermissionRequest(Prev, New,
						   TrUserData);
      'AuthRoleRevokePermissionRequest' ->
	  merge_msg_AuthRoleRevokePermissionRequest(Prev, New,
						    TrUserData);
      'AuthEnableResponse' ->
	  merge_msg_AuthEnableResponse(Prev, New, TrUserData);
      'AuthDisableResponse' ->
	  merge_msg_AuthDisableResponse(Prev, New, TrUserData);
      'AuthenticateResponse' ->
	  merge_msg_AuthenticateResponse(Prev, New, TrUserData);
      'AuthUserAddResponse' ->
	  merge_msg_AuthUserAddResponse(Prev, New, TrUserData);
      'AuthUserGetResponse' ->
	  merge_msg_AuthUserGetResponse(Prev, New, TrUserData);
      'AuthUserDeleteResponse' ->
	  merge_msg_AuthUserDeleteResponse(Prev, New, TrUserData);
      'AuthUserChangePasswordResponse' ->
	  merge_msg_AuthUserChangePasswordResponse(Prev, New,
						   TrUserData);
      'AuthUserGrantRoleResponse' ->
	  merge_msg_AuthUserGrantRoleResponse(Prev, New,
					      TrUserData);
      'AuthUserRevokeRoleResponse' ->
	  merge_msg_AuthUserRevokeRoleResponse(Prev, New,
					       TrUserData);
      'AuthRoleAddResponse' ->
	  merge_msg_AuthRoleAddResponse(Prev, New, TrUserData);
      'AuthRoleGetResponse' ->
	  merge_msg_AuthRoleGetResponse(Prev, New, TrUserData);
      'AuthRoleListResponse' ->
	  merge_msg_AuthRoleListResponse(Prev, New, TrUserData);
      'AuthUserListResponse' ->
	  merge_msg_AuthUserListResponse(Prev, New, TrUserData);
      'AuthRoleDeleteResponse' ->
	  merge_msg_AuthRoleDeleteResponse(Prev, New, TrUserData);
      'AuthRoleGrantPermissionResponse' ->
	  merge_msg_AuthRoleGrantPermissionResponse(Prev, New,
						    TrUserData);
      'AuthRoleRevokePermissionResponse' ->
	  merge_msg_AuthRoleRevokePermissionResponse(Prev, New,
						     TrUserData);
      'KeyValue' -> merge_msg_KeyValue(Prev, New, TrUserData);
      'Event' -> merge_msg_Event(Prev, New, TrUserData);
      'User' -> merge_msg_User(Prev, New, TrUserData);
      'Permission' ->
	  merge_msg_Permission(Prev, New, TrUserData);
      'Role' -> merge_msg_Role(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_ResponseHeader/3}).
merge_msg_ResponseHeader(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{cluster_id := NFcluster_id}} ->
	       S1#{cluster_id => NFcluster_id};
	   {#{cluster_id := PFcluster_id}, _} ->
	       S1#{cluster_id => PFcluster_id};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{member_id := NFmember_id}} ->
	       S2#{member_id => NFmember_id};
	   {#{member_id := PFmember_id}, _} ->
	       S2#{member_id => PFmember_id};
	   _ -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {_, #{revision := NFrevision}} ->
	       S3#{revision => NFrevision};
	   {#{revision := PFrevision}, _} ->
	       S3#{revision => PFrevision};
	   _ -> S3
	 end,
    case {PMsg, NMsg} of
      {_, #{raft_term := NFraft_term}} ->
	  S4#{raft_term => NFraft_term};
      {#{raft_term := PFraft_term}, _} ->
	  S4#{raft_term => PFraft_term};
      _ -> S4
    end.

-compile({nowarn_unused_function,merge_msg_RangeRequest/3}).
merge_msg_RangeRequest(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{key := NFkey}} -> S1#{key => NFkey};
	   {#{key := PFkey}, _} -> S1#{key => PFkey};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{range_end := NFrange_end}} ->
	       S2#{range_end => NFrange_end};
	   {#{range_end := PFrange_end}, _} ->
	       S2#{range_end => PFrange_end};
	   _ -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {_, #{limit := NFlimit}} -> S3#{limit => NFlimit};
	   {#{limit := PFlimit}, _} -> S3#{limit => PFlimit};
	   _ -> S3
	 end,
    S5 = case {PMsg, NMsg} of
	   {_, #{revision := NFrevision}} ->
	       S4#{revision => NFrevision};
	   {#{revision := PFrevision}, _} ->
	       S4#{revision => PFrevision};
	   _ -> S4
	 end,
    S6 = case {PMsg, NMsg} of
	   {_, #{sort_order := NFsort_order}} ->
	       S5#{sort_order => NFsort_order};
	   {#{sort_order := PFsort_order}, _} ->
	       S5#{sort_order => PFsort_order};
	   _ -> S5
	 end,
    S7 = case {PMsg, NMsg} of
	   {_, #{sort_target := NFsort_target}} ->
	       S6#{sort_target => NFsort_target};
	   {#{sort_target := PFsort_target}, _} ->
	       S6#{sort_target => PFsort_target};
	   _ -> S6
	 end,
    S8 = case {PMsg, NMsg} of
	   {_, #{serializable := NFserializable}} ->
	       S7#{serializable => NFserializable};
	   {#{serializable := PFserializable}, _} ->
	       S7#{serializable => PFserializable};
	   _ -> S7
	 end,
    S9 = case {PMsg, NMsg} of
	   {_, #{keys_only := NFkeys_only}} ->
	       S8#{keys_only => NFkeys_only};
	   {#{keys_only := PFkeys_only}, _} ->
	       S8#{keys_only => PFkeys_only};
	   _ -> S8
	 end,
    S10 = case {PMsg, NMsg} of
	    {_, #{count_only := NFcount_only}} ->
		S9#{count_only => NFcount_only};
	    {#{count_only := PFcount_only}, _} ->
		S9#{count_only => PFcount_only};
	    _ -> S9
	  end,
    S11 = case {PMsg, NMsg} of
	    {_, #{min_mod_revision := NFmin_mod_revision}} ->
		S10#{min_mod_revision => NFmin_mod_revision};
	    {#{min_mod_revision := PFmin_mod_revision}, _} ->
		S10#{min_mod_revision => PFmin_mod_revision};
	    _ -> S10
	  end,
    S12 = case {PMsg, NMsg} of
	    {_, #{max_mod_revision := NFmax_mod_revision}} ->
		S11#{max_mod_revision => NFmax_mod_revision};
	    {#{max_mod_revision := PFmax_mod_revision}, _} ->
		S11#{max_mod_revision => PFmax_mod_revision};
	    _ -> S11
	  end,
    S13 = case {PMsg, NMsg} of
	    {_, #{min_create_revision := NFmin_create_revision}} ->
		S12#{min_create_revision => NFmin_create_revision};
	    {#{min_create_revision := PFmin_create_revision}, _} ->
		S12#{min_create_revision => PFmin_create_revision};
	    _ -> S12
	  end,
    case {PMsg, NMsg} of
      {_, #{max_create_revision := NFmax_create_revision}} ->
	  S13#{max_create_revision => NFmax_create_revision};
      {#{max_create_revision := PFmax_create_revision}, _} ->
	  S13#{max_create_revision => PFmax_create_revision};
      _ -> S13
    end.

-compile({nowarn_unused_function,merge_msg_RangeResponse/3}).
merge_msg_RangeResponse(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{header := PFheader}, #{header := NFheader}} ->
	       S1#{header =>
		       merge_msg_ResponseHeader(PFheader, NFheader,
						TrUserData)};
	   {_, #{header := NFheader}} -> S1#{header => NFheader};
	   {#{header := PFheader}, _} -> S1#{header => PFheader};
	   {_, _} -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {#{kvs := PFkvs}, #{kvs := NFkvs}} ->
	       S2#{kvs => 'erlang_++'(PFkvs, NFkvs, TrUserData)};
	   {_, #{kvs := NFkvs}} -> S2#{kvs => NFkvs};
	   {#{kvs := PFkvs}, _} -> S2#{kvs => PFkvs};
	   {_, _} -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {_, #{more := NFmore}} -> S3#{more => NFmore};
	   {#{more := PFmore}, _} -> S3#{more => PFmore};
	   _ -> S3
	 end,
    case {PMsg, NMsg} of
      {_, #{count := NFcount}} -> S4#{count => NFcount};
      {#{count := PFcount}, _} -> S4#{count => PFcount};
      _ -> S4
    end.

-compile({nowarn_unused_function,merge_msg_PutRequest/3}).
merge_msg_PutRequest(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{key := NFkey}} -> S1#{key => NFkey};
	   {#{key := PFkey}, _} -> S1#{key => PFkey};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{value := NFvalue}} -> S2#{value => NFvalue};
	   {#{value := PFvalue}, _} -> S2#{value => PFvalue};
	   _ -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {_, #{lease := NFlease}} -> S3#{lease => NFlease};
	   {#{lease := PFlease}, _} -> S3#{lease => PFlease};
	   _ -> S3
	 end,
    S5 = case {PMsg, NMsg} of
	   {_, #{prev_kv := NFprev_kv}} ->
	       S4#{prev_kv => NFprev_kv};
	   {#{prev_kv := PFprev_kv}, _} ->
	       S4#{prev_kv => PFprev_kv};
	   _ -> S4
	 end,
    S6 = case {PMsg, NMsg} of
	   {_, #{ignore_value := NFignore_value}} ->
	       S5#{ignore_value => NFignore_value};
	   {#{ignore_value := PFignore_value}, _} ->
	       S5#{ignore_value => PFignore_value};
	   _ -> S5
	 end,
    case {PMsg, NMsg} of
      {_, #{ignore_lease := NFignore_lease}} ->
	  S6#{ignore_lease => NFignore_lease};
      {#{ignore_lease := PFignore_lease}, _} ->
	  S6#{ignore_lease => PFignore_lease};
      _ -> S6
    end.

-compile({nowarn_unused_function,merge_msg_PutResponse/3}).
merge_msg_PutResponse(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{header := PFheader}, #{header := NFheader}} ->
	       S1#{header =>
		       merge_msg_ResponseHeader(PFheader, NFheader,
						TrUserData)};
	   {_, #{header := NFheader}} -> S1#{header => NFheader};
	   {#{header := PFheader}, _} -> S1#{header => PFheader};
	   {_, _} -> S1
	 end,
    case {PMsg, NMsg} of
      {#{prev_kv := PFprev_kv}, #{prev_kv := NFprev_kv}} ->
	  S2#{prev_kv =>
		  merge_msg_KeyValue(PFprev_kv, NFprev_kv, TrUserData)};
      {_, #{prev_kv := NFprev_kv}} ->
	  S2#{prev_kv => NFprev_kv};
      {#{prev_kv := PFprev_kv}, _} ->
	  S2#{prev_kv => PFprev_kv};
      {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_DeleteRangeRequest/3}).
merge_msg_DeleteRangeRequest(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{key := NFkey}} -> S1#{key => NFkey};
	   {#{key := PFkey}, _} -> S1#{key => PFkey};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{range_end := NFrange_end}} ->
	       S2#{range_end => NFrange_end};
	   {#{range_end := PFrange_end}, _} ->
	       S2#{range_end => PFrange_end};
	   _ -> S2
	 end,
    case {PMsg, NMsg} of
      {_, #{prev_kv := NFprev_kv}} ->
	  S3#{prev_kv => NFprev_kv};
      {#{prev_kv := PFprev_kv}, _} ->
	  S3#{prev_kv => PFprev_kv};
      _ -> S3
    end.

-compile({nowarn_unused_function,merge_msg_DeleteRangeResponse/3}).
merge_msg_DeleteRangeResponse(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{header := PFheader}, #{header := NFheader}} ->
	       S1#{header =>
		       merge_msg_ResponseHeader(PFheader, NFheader,
						TrUserData)};
	   {_, #{header := NFheader}} -> S1#{header => NFheader};
	   {#{header := PFheader}, _} -> S1#{header => PFheader};
	   {_, _} -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{deleted := NFdeleted}} ->
	       S2#{deleted => NFdeleted};
	   {#{deleted := PFdeleted}, _} ->
	       S2#{deleted => PFdeleted};
	   _ -> S2
	 end,
    case {PMsg, NMsg} of
      {#{prev_kvs := PFprev_kvs},
       #{prev_kvs := NFprev_kvs}} ->
	  S3#{prev_kvs =>
		  'erlang_++'(PFprev_kvs, NFprev_kvs, TrUserData)};
      {_, #{prev_kvs := NFprev_kvs}} ->
	  S3#{prev_kvs => NFprev_kvs};
      {#{prev_kvs := PFprev_kvs}, _} ->
	  S3#{prev_kvs => PFprev_kvs};
      {_, _} -> S3
    end.

-compile({nowarn_unused_function,merge_msg_RequestOp/3}).
merge_msg_RequestOp(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{request := {request_range, OPFrequest}},
       #{request := {request_range, ONFrequest}}} ->
	  S1#{request =>
		  {request_range,
		   merge_msg_RangeRequest(OPFrequest, ONFrequest,
					  TrUserData)}};
      {#{request := {request_put, OPFrequest}},
       #{request := {request_put, ONFrequest}}} ->
	  S1#{request =>
		  {request_put,
		   merge_msg_PutRequest(OPFrequest, ONFrequest,
					TrUserData)}};
      {#{request := {request_delete_range, OPFrequest}},
       #{request := {request_delete_range, ONFrequest}}} ->
	  S1#{request =>
		  {request_delete_range,
		   merge_msg_DeleteRangeRequest(OPFrequest, ONFrequest,
						TrUserData)}};
      {#{request := {request_txn, OPFrequest}},
       #{request := {request_txn, ONFrequest}}} ->
	  S1#{request =>
		  {request_txn,
		   merge_msg_TxnRequest(OPFrequest, ONFrequest,
					TrUserData)}};
      {_, #{request := NFrequest}} ->
	  S1#{request => NFrequest};
      {#{request := PFrequest}, _} ->
	  S1#{request => PFrequest};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_ResponseOp/3}).
merge_msg_ResponseOp(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{response := {response_range, OPFresponse}},
       #{response := {response_range, ONFresponse}}} ->
	  S1#{response =>
		  {response_range,
		   merge_msg_RangeResponse(OPFresponse, ONFresponse,
					   TrUserData)}};
      {#{response := {response_put, OPFresponse}},
       #{response := {response_put, ONFresponse}}} ->
	  S1#{response =>
		  {response_put,
		   merge_msg_PutResponse(OPFresponse, ONFresponse,
					 TrUserData)}};
      {#{response := {response_delete_range, OPFresponse}},
       #{response := {response_delete_range, ONFresponse}}} ->
	  S1#{response =>
		  {response_delete_range,
		   merge_msg_DeleteRangeResponse(OPFresponse, ONFresponse,
						 TrUserData)}};
      {#{response := {response_txn, OPFresponse}},
       #{response := {response_txn, ONFresponse}}} ->
	  S1#{response =>
		  {response_txn,
		   merge_msg_TxnResponse(OPFresponse, ONFresponse,
					 TrUserData)}};
      {_, #{response := NFresponse}} ->
	  S1#{response => NFresponse};
      {#{response := PFresponse}, _} ->
	  S1#{response => PFresponse};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_Compare/3}).
merge_msg_Compare(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{result := NFresult}} -> S1#{result => NFresult};
	   {#{result := PFresult}, _} -> S1#{result => PFresult};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{target := NFtarget}} -> S2#{target => NFtarget};
	   {#{target := PFtarget}, _} -> S2#{target => PFtarget};
	   _ -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {_, #{key := NFkey}} -> S3#{key => NFkey};
	   {#{key := PFkey}, _} -> S3#{key => PFkey};
	   _ -> S3
	 end,
    S5 = case {PMsg, NMsg} of
	   {_, #{target_union := NFtarget_union}} ->
	       S4#{target_union => NFtarget_union};
	   {#{target_union := PFtarget_union}, _} ->
	       S4#{target_union => PFtarget_union};
	   _ -> S4
	 end,
    case {PMsg, NMsg} of
      {_, #{range_end := NFrange_end}} ->
	  S5#{range_end => NFrange_end};
      {#{range_end := PFrange_end}, _} ->
	  S5#{range_end => PFrange_end};
      _ -> S5
    end.

-compile({nowarn_unused_function,merge_msg_TxnRequest/3}).
merge_msg_TxnRequest(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{compare := PFcompare}, #{compare := NFcompare}} ->
	       S1#{compare =>
		       'erlang_++'(PFcompare, NFcompare, TrUserData)};
	   {_, #{compare := NFcompare}} ->
	       S1#{compare => NFcompare};
	   {#{compare := PFcompare}, _} ->
	       S1#{compare => PFcompare};
	   {_, _} -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {#{success := PFsuccess}, #{success := NFsuccess}} ->
	       S2#{success =>
		       'erlang_++'(PFsuccess, NFsuccess, TrUserData)};
	   {_, #{success := NFsuccess}} ->
	       S2#{success => NFsuccess};
	   {#{success := PFsuccess}, _} ->
	       S2#{success => PFsuccess};
	   {_, _} -> S2
	 end,
    case {PMsg, NMsg} of
      {#{failure := PFfailure}, #{failure := NFfailure}} ->
	  S3#{failure =>
		  'erlang_++'(PFfailure, NFfailure, TrUserData)};
      {_, #{failure := NFfailure}} ->
	  S3#{failure => NFfailure};
      {#{failure := PFfailure}, _} ->
	  S3#{failure => PFfailure};
      {_, _} -> S3
    end.

-compile({nowarn_unused_function,merge_msg_TxnResponse/3}).
merge_msg_TxnResponse(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{header := PFheader}, #{header := NFheader}} ->
	       S1#{header =>
		       merge_msg_ResponseHeader(PFheader, NFheader,
						TrUserData)};
	   {_, #{header := NFheader}} -> S1#{header => NFheader};
	   {#{header := PFheader}, _} -> S1#{header => PFheader};
	   {_, _} -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{succeeded := NFsucceeded}} ->
	       S2#{succeeded => NFsucceeded};
	   {#{succeeded := PFsucceeded}, _} ->
	       S2#{succeeded => PFsucceeded};
	   _ -> S2
	 end,
    case {PMsg, NMsg} of
      {#{responses := PFresponses},
       #{responses := NFresponses}} ->
	  S3#{responses =>
		  'erlang_++'(PFresponses, NFresponses, TrUserData)};
      {_, #{responses := NFresponses}} ->
	  S3#{responses => NFresponses};
      {#{responses := PFresponses}, _} ->
	  S3#{responses => PFresponses};
      {_, _} -> S3
    end.

-compile({nowarn_unused_function,merge_msg_CompactionRequest/3}).
merge_msg_CompactionRequest(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{revision := NFrevision}} ->
	       S1#{revision => NFrevision};
	   {#{revision := PFrevision}, _} ->
	       S1#{revision => PFrevision};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{physical := NFphysical}} ->
	  S2#{physical => NFphysical};
      {#{physical := PFphysical}, _} ->
	  S2#{physical => PFphysical};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_CompactionResponse/3}).
merge_msg_CompactionResponse(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{header := PFheader}, #{header := NFheader}} ->
	  S1#{header =>
		  merge_msg_ResponseHeader(PFheader, NFheader,
					   TrUserData)};
      {_, #{header := NFheader}} -> S1#{header => NFheader};
      {#{header := PFheader}, _} -> S1#{header => PFheader};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_HashRequest/3}).
merge_msg_HashRequest(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_HashKVRequest/3}).
merge_msg_HashKVRequest(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{revision := NFrevision}} ->
	  S1#{revision => NFrevision};
      {#{revision := PFrevision}, _} ->
	  S1#{revision => PFrevision};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_HashKVResponse/3}).
merge_msg_HashKVResponse(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{header := PFheader}, #{header := NFheader}} ->
	       S1#{header =>
		       merge_msg_ResponseHeader(PFheader, NFheader,
						TrUserData)};
	   {_, #{header := NFheader}} -> S1#{header => NFheader};
	   {#{header := PFheader}, _} -> S1#{header => PFheader};
	   {_, _} -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{hash := NFhash}} -> S2#{hash => NFhash};
	   {#{hash := PFhash}, _} -> S2#{hash => PFhash};
	   _ -> S2
	 end,
    case {PMsg, NMsg} of
      {_, #{compact_revision := NFcompact_revision}} ->
	  S3#{compact_revision => NFcompact_revision};
      {#{compact_revision := PFcompact_revision}, _} ->
	  S3#{compact_revision => PFcompact_revision};
      _ -> S3
    end.

-compile({nowarn_unused_function,merge_msg_HashResponse/3}).
merge_msg_HashResponse(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{header := PFheader}, #{header := NFheader}} ->
	       S1#{header =>
		       merge_msg_ResponseHeader(PFheader, NFheader,
						TrUserData)};
	   {_, #{header := NFheader}} -> S1#{header => NFheader};
	   {#{header := PFheader}, _} -> S1#{header => PFheader};
	   {_, _} -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{hash := NFhash}} -> S2#{hash => NFhash};
      {#{hash := PFhash}, _} -> S2#{hash => PFhash};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_SnapshotRequest/3}).
merge_msg_SnapshotRequest(_Prev, New, _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_SnapshotResponse/3}).
merge_msg_SnapshotResponse(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{header := PFheader}, #{header := NFheader}} ->
	       S1#{header =>
		       merge_msg_ResponseHeader(PFheader, NFheader,
						TrUserData)};
	   {_, #{header := NFheader}} -> S1#{header => NFheader};
	   {#{header := PFheader}, _} -> S1#{header => PFheader};
	   {_, _} -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{remaining_bytes := NFremaining_bytes}} ->
	       S2#{remaining_bytes => NFremaining_bytes};
	   {#{remaining_bytes := PFremaining_bytes}, _} ->
	       S2#{remaining_bytes => PFremaining_bytes};
	   _ -> S2
	 end,
    case {PMsg, NMsg} of
      {_, #{blob := NFblob}} -> S3#{blob => NFblob};
      {#{blob := PFblob}, _} -> S3#{blob => PFblob};
      _ -> S3
    end.

-compile({nowarn_unused_function,merge_msg_WatchRequest/3}).
merge_msg_WatchRequest(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{request_union := {create_request, OPFrequest_union}},
       #{request_union :=
	     {create_request, ONFrequest_union}}} ->
	  S1#{request_union =>
		  {create_request,
		   merge_msg_WatchCreateRequest(OPFrequest_union,
						ONFrequest_union, TrUserData)}};
      {#{request_union := {cancel_request, OPFrequest_union}},
       #{request_union :=
	     {cancel_request, ONFrequest_union}}} ->
	  S1#{request_union =>
		  {cancel_request,
		   merge_msg_WatchCancelRequest(OPFrequest_union,
						ONFrequest_union, TrUserData)}};
      {#{request_union :=
	     {progress_request, OPFrequest_union}},
       #{request_union :=
	     {progress_request, ONFrequest_union}}} ->
	  S1#{request_union =>
		  {progress_request,
		   merge_msg_WatchProgressRequest(OPFrequest_union,
						  ONFrequest_union,
						  TrUserData)}};
      {_, #{request_union := NFrequest_union}} ->
	  S1#{request_union => NFrequest_union};
      {#{request_union := PFrequest_union}, _} ->
	  S1#{request_union => PFrequest_union};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_WatchCreateRequest/3}).
merge_msg_WatchCreateRequest(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{key := NFkey}} -> S1#{key => NFkey};
	   {#{key := PFkey}, _} -> S1#{key => PFkey};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{range_end := NFrange_end}} ->
	       S2#{range_end => NFrange_end};
	   {#{range_end := PFrange_end}, _} ->
	       S2#{range_end => PFrange_end};
	   _ -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {_, #{start_revision := NFstart_revision}} ->
	       S3#{start_revision => NFstart_revision};
	   {#{start_revision := PFstart_revision}, _} ->
	       S3#{start_revision => PFstart_revision};
	   _ -> S3
	 end,
    S5 = case {PMsg, NMsg} of
	   {_, #{progress_notify := NFprogress_notify}} ->
	       S4#{progress_notify => NFprogress_notify};
	   {#{progress_notify := PFprogress_notify}, _} ->
	       S4#{progress_notify => PFprogress_notify};
	   _ -> S4
	 end,
    S6 = case {PMsg, NMsg} of
	   {#{filters := PFfilters}, #{filters := NFfilters}} ->
	       S5#{filters =>
		       'erlang_++'(PFfilters, NFfilters, TrUserData)};
	   {_, #{filters := NFfilters}} ->
	       S5#{filters => NFfilters};
	   {#{filters := PFfilters}, _} ->
	       S5#{filters => PFfilters};
	   {_, _} -> S5
	 end,
    S7 = case {PMsg, NMsg} of
	   {_, #{prev_kv := NFprev_kv}} ->
	       S6#{prev_kv => NFprev_kv};
	   {#{prev_kv := PFprev_kv}, _} ->
	       S6#{prev_kv => PFprev_kv};
	   _ -> S6
	 end,
    S8 = case {PMsg, NMsg} of
	   {_, #{watch_id := NFwatch_id}} ->
	       S7#{watch_id => NFwatch_id};
	   {#{watch_id := PFwatch_id}, _} ->
	       S7#{watch_id => PFwatch_id};
	   _ -> S7
	 end,
    case {PMsg, NMsg} of
      {_, #{fragment := NFfragment}} ->
	  S8#{fragment => NFfragment};
      {#{fragment := PFfragment}, _} ->
	  S8#{fragment => PFfragment};
      _ -> S8
    end.

-compile({nowarn_unused_function,merge_msg_WatchCancelRequest/3}).
merge_msg_WatchCancelRequest(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{watch_id := NFwatch_id}} ->
	  S1#{watch_id => NFwatch_id};
      {#{watch_id := PFwatch_id}, _} ->
	  S1#{watch_id => PFwatch_id};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_WatchProgressRequest/3}).
merge_msg_WatchProgressRequest(_Prev, New,
			       _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_WatchResponse/3}).
merge_msg_WatchResponse(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{header := PFheader}, #{header := NFheader}} ->
	       S1#{header =>
		       merge_msg_ResponseHeader(PFheader, NFheader,
						TrUserData)};
	   {_, #{header := NFheader}} -> S1#{header => NFheader};
	   {#{header := PFheader}, _} -> S1#{header => PFheader};
	   {_, _} -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{watch_id := NFwatch_id}} ->
	       S2#{watch_id => NFwatch_id};
	   {#{watch_id := PFwatch_id}, _} ->
	       S2#{watch_id => PFwatch_id};
	   _ -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {_, #{created := NFcreated}} ->
	       S3#{created => NFcreated};
	   {#{created := PFcreated}, _} ->
	       S3#{created => PFcreated};
	   _ -> S3
	 end,
    S5 = case {PMsg, NMsg} of
	   {_, #{canceled := NFcanceled}} ->
	       S4#{canceled => NFcanceled};
	   {#{canceled := PFcanceled}, _} ->
	       S4#{canceled => PFcanceled};
	   _ -> S4
	 end,
    S6 = case {PMsg, NMsg} of
	   {_, #{compact_revision := NFcompact_revision}} ->
	       S5#{compact_revision => NFcompact_revision};
	   {#{compact_revision := PFcompact_revision}, _} ->
	       S5#{compact_revision => PFcompact_revision};
	   _ -> S5
	 end,
    S7 = case {PMsg, NMsg} of
	   {_, #{cancel_reason := NFcancel_reason}} ->
	       S6#{cancel_reason => NFcancel_reason};
	   {#{cancel_reason := PFcancel_reason}, _} ->
	       S6#{cancel_reason => PFcancel_reason};
	   _ -> S6
	 end,
    S8 = case {PMsg, NMsg} of
	   {_, #{fragment := NFfragment}} ->
	       S7#{fragment => NFfragment};
	   {#{fragment := PFfragment}, _} ->
	       S7#{fragment => PFfragment};
	   _ -> S7
	 end,
    case {PMsg, NMsg} of
      {#{events := PFevents}, #{events := NFevents}} ->
	  S8#{events =>
		  'erlang_++'(PFevents, NFevents, TrUserData)};
      {_, #{events := NFevents}} -> S8#{events => NFevents};
      {#{events := PFevents}, _} -> S8#{events => PFevents};
      {_, _} -> S8
    end.

-compile({nowarn_unused_function,merge_msg_LeaseGrantRequest/3}).
merge_msg_LeaseGrantRequest(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{'TTL' := NFTTL}} -> S1#{'TTL' => NFTTL};
	   {#{'TTL' := PFTTL}, _} -> S1#{'TTL' => PFTTL};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{'ID' := NFID}} -> S2#{'ID' => NFID};
      {#{'ID' := PFID}, _} -> S2#{'ID' => PFID};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_LeaseGrantResponse/3}).
merge_msg_LeaseGrantResponse(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{header := PFheader}, #{header := NFheader}} ->
	       S1#{header =>
		       merge_msg_ResponseHeader(PFheader, NFheader,
						TrUserData)};
	   {_, #{header := NFheader}} -> S1#{header => NFheader};
	   {#{header := PFheader}, _} -> S1#{header => PFheader};
	   {_, _} -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{'ID' := NFID}} -> S2#{'ID' => NFID};
	   {#{'ID' := PFID}, _} -> S2#{'ID' => PFID};
	   _ -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {_, #{'TTL' := NFTTL}} -> S3#{'TTL' => NFTTL};
	   {#{'TTL' := PFTTL}, _} -> S3#{'TTL' => PFTTL};
	   _ -> S3
	 end,
    case {PMsg, NMsg} of
      {_, #{error := NFerror}} -> S4#{error => NFerror};
      {#{error := PFerror}, _} -> S4#{error => PFerror};
      _ -> S4
    end.

-compile({nowarn_unused_function,merge_msg_LeaseRevokeRequest/3}).
merge_msg_LeaseRevokeRequest(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{'ID' := NFID}} -> S1#{'ID' => NFID};
      {#{'ID' := PFID}, _} -> S1#{'ID' => PFID};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_LeaseRevokeResponse/3}).
merge_msg_LeaseRevokeResponse(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{header := PFheader}, #{header := NFheader}} ->
	  S1#{header =>
		  merge_msg_ResponseHeader(PFheader, NFheader,
					   TrUserData)};
      {_, #{header := NFheader}} -> S1#{header => NFheader};
      {#{header := PFheader}, _} -> S1#{header => PFheader};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_LeaseCheckpoint/3}).
merge_msg_LeaseCheckpoint(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{'ID' := NFID}} -> S1#{'ID' => NFID};
	   {#{'ID' := PFID}, _} -> S1#{'ID' => PFID};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{remaining_TTL := NFremaining_TTL}} ->
	  S2#{remaining_TTL => NFremaining_TTL};
      {#{remaining_TTL := PFremaining_TTL}, _} ->
	  S2#{remaining_TTL => PFremaining_TTL};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_LeaseCheckpointRequest/3}).
merge_msg_LeaseCheckpointRequest(PMsg, NMsg,
				 TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{checkpoints := PFcheckpoints},
       #{checkpoints := NFcheckpoints}} ->
	  S1#{checkpoints =>
		  'erlang_++'(PFcheckpoints, NFcheckpoints, TrUserData)};
      {_, #{checkpoints := NFcheckpoints}} ->
	  S1#{checkpoints => NFcheckpoints};
      {#{checkpoints := PFcheckpoints}, _} ->
	  S1#{checkpoints => PFcheckpoints};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_LeaseCheckpointResponse/3}).
merge_msg_LeaseCheckpointResponse(PMsg, NMsg,
				  TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{header := PFheader}, #{header := NFheader}} ->
	  S1#{header =>
		  merge_msg_ResponseHeader(PFheader, NFheader,
					   TrUserData)};
      {_, #{header := NFheader}} -> S1#{header => NFheader};
      {#{header := PFheader}, _} -> S1#{header => PFheader};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_LeaseKeepAliveRequest/3}).
merge_msg_LeaseKeepAliveRequest(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{'ID' := NFID}} -> S1#{'ID' => NFID};
      {#{'ID' := PFID}, _} -> S1#{'ID' => PFID};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_LeaseKeepAliveResponse/3}).
merge_msg_LeaseKeepAliveResponse(PMsg, NMsg,
				 TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{header := PFheader}, #{header := NFheader}} ->
	       S1#{header =>
		       merge_msg_ResponseHeader(PFheader, NFheader,
						TrUserData)};
	   {_, #{header := NFheader}} -> S1#{header => NFheader};
	   {#{header := PFheader}, _} -> S1#{header => PFheader};
	   {_, _} -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{'ID' := NFID}} -> S2#{'ID' => NFID};
	   {#{'ID' := PFID}, _} -> S2#{'ID' => PFID};
	   _ -> S2
	 end,
    case {PMsg, NMsg} of
      {_, #{'TTL' := NFTTL}} -> S3#{'TTL' => NFTTL};
      {#{'TTL' := PFTTL}, _} -> S3#{'TTL' => PFTTL};
      _ -> S3
    end.

-compile({nowarn_unused_function,merge_msg_LeaseTimeToLiveRequest/3}).
merge_msg_LeaseTimeToLiveRequest(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{'ID' := NFID}} -> S1#{'ID' => NFID};
	   {#{'ID' := PFID}, _} -> S1#{'ID' => PFID};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{keys := NFkeys}} -> S2#{keys => NFkeys};
      {#{keys := PFkeys}, _} -> S2#{keys => PFkeys};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_LeaseTimeToLiveResponse/3}).
merge_msg_LeaseTimeToLiveResponse(PMsg, NMsg,
				  TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{header := PFheader}, #{header := NFheader}} ->
	       S1#{header =>
		       merge_msg_ResponseHeader(PFheader, NFheader,
						TrUserData)};
	   {_, #{header := NFheader}} -> S1#{header => NFheader};
	   {#{header := PFheader}, _} -> S1#{header => PFheader};
	   {_, _} -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{'ID' := NFID}} -> S2#{'ID' => NFID};
	   {#{'ID' := PFID}, _} -> S2#{'ID' => PFID};
	   _ -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {_, #{'TTL' := NFTTL}} -> S3#{'TTL' => NFTTL};
	   {#{'TTL' := PFTTL}, _} -> S3#{'TTL' => PFTTL};
	   _ -> S3
	 end,
    S5 = case {PMsg, NMsg} of
	   {_, #{grantedTTL := NFgrantedTTL}} ->
	       S4#{grantedTTL => NFgrantedTTL};
	   {#{grantedTTL := PFgrantedTTL}, _} ->
	       S4#{grantedTTL => PFgrantedTTL};
	   _ -> S4
	 end,
    case {PMsg, NMsg} of
      {#{keys := PFkeys}, #{keys := NFkeys}} ->
	  S5#{keys => 'erlang_++'(PFkeys, NFkeys, TrUserData)};
      {_, #{keys := NFkeys}} -> S5#{keys => NFkeys};
      {#{keys := PFkeys}, _} -> S5#{keys => PFkeys};
      {_, _} -> S5
    end.

-compile({nowarn_unused_function,merge_msg_LeaseLeasesRequest/3}).
merge_msg_LeaseLeasesRequest(_Prev, New, _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_LeaseStatus/3}).
merge_msg_LeaseStatus(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{'ID' := NFID}} -> S1#{'ID' => NFID};
      {#{'ID' := PFID}, _} -> S1#{'ID' => PFID};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_LeaseLeasesResponse/3}).
merge_msg_LeaseLeasesResponse(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{header := PFheader}, #{header := NFheader}} ->
	       S1#{header =>
		       merge_msg_ResponseHeader(PFheader, NFheader,
						TrUserData)};
	   {_, #{header := NFheader}} -> S1#{header => NFheader};
	   {#{header := PFheader}, _} -> S1#{header => PFheader};
	   {_, _} -> S1
	 end,
    case {PMsg, NMsg} of
      {#{leases := PFleases}, #{leases := NFleases}} ->
	  S2#{leases =>
		  'erlang_++'(PFleases, NFleases, TrUserData)};
      {_, #{leases := NFleases}} -> S2#{leases => NFleases};
      {#{leases := PFleases}, _} -> S2#{leases => PFleases};
      {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_Member/3}).
merge_msg_Member(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{'ID' := NFID}} -> S1#{'ID' => NFID};
	   {#{'ID' := PFID}, _} -> S1#{'ID' => PFID};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{name := NFname}} -> S2#{name => NFname};
	   {#{name := PFname}, _} -> S2#{name => PFname};
	   _ -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {#{peerURLs := PFpeerURLs},
	    #{peerURLs := NFpeerURLs}} ->
	       S3#{peerURLs =>
		       'erlang_++'(PFpeerURLs, NFpeerURLs, TrUserData)};
	   {_, #{peerURLs := NFpeerURLs}} ->
	       S3#{peerURLs => NFpeerURLs};
	   {#{peerURLs := PFpeerURLs}, _} ->
	       S3#{peerURLs => PFpeerURLs};
	   {_, _} -> S3
	 end,
    case {PMsg, NMsg} of
      {#{clientURLs := PFclientURLs},
       #{clientURLs := NFclientURLs}} ->
	  S4#{clientURLs =>
		  'erlang_++'(PFclientURLs, NFclientURLs, TrUserData)};
      {_, #{clientURLs := NFclientURLs}} ->
	  S4#{clientURLs => NFclientURLs};
      {#{clientURLs := PFclientURLs}, _} ->
	  S4#{clientURLs => PFclientURLs};
      {_, _} -> S4
    end.

-compile({nowarn_unused_function,merge_msg_MemberAddRequest/3}).
merge_msg_MemberAddRequest(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{peerURLs := PFpeerURLs},
       #{peerURLs := NFpeerURLs}} ->
	  S1#{peerURLs =>
		  'erlang_++'(PFpeerURLs, NFpeerURLs, TrUserData)};
      {_, #{peerURLs := NFpeerURLs}} ->
	  S1#{peerURLs => NFpeerURLs};
      {#{peerURLs := PFpeerURLs}, _} ->
	  S1#{peerURLs => PFpeerURLs};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_MemberAddResponse/3}).
merge_msg_MemberAddResponse(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{header := PFheader}, #{header := NFheader}} ->
	       S1#{header =>
		       merge_msg_ResponseHeader(PFheader, NFheader,
						TrUserData)};
	   {_, #{header := NFheader}} -> S1#{header => NFheader};
	   {#{header := PFheader}, _} -> S1#{header => PFheader};
	   {_, _} -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {#{member := PFmember}, #{member := NFmember}} ->
	       S2#{member =>
		       merge_msg_Member(PFmember, NFmember, TrUserData)};
	   {_, #{member := NFmember}} -> S2#{member => NFmember};
	   {#{member := PFmember}, _} -> S2#{member => PFmember};
	   {_, _} -> S2
	 end,
    case {PMsg, NMsg} of
      {#{members := PFmembers}, #{members := NFmembers}} ->
	  S3#{members =>
		  'erlang_++'(PFmembers, NFmembers, TrUserData)};
      {_, #{members := NFmembers}} ->
	  S3#{members => NFmembers};
      {#{members := PFmembers}, _} ->
	  S3#{members => PFmembers};
      {_, _} -> S3
    end.

-compile({nowarn_unused_function,merge_msg_MemberRemoveRequest/3}).
merge_msg_MemberRemoveRequest(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{'ID' := NFID}} -> S1#{'ID' => NFID};
      {#{'ID' := PFID}, _} -> S1#{'ID' => PFID};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_MemberRemoveResponse/3}).
merge_msg_MemberRemoveResponse(PMsg, NMsg,
			       TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{header := PFheader}, #{header := NFheader}} ->
	       S1#{header =>
		       merge_msg_ResponseHeader(PFheader, NFheader,
						TrUserData)};
	   {_, #{header := NFheader}} -> S1#{header => NFheader};
	   {#{header := PFheader}, _} -> S1#{header => PFheader};
	   {_, _} -> S1
	 end,
    case {PMsg, NMsg} of
      {#{members := PFmembers}, #{members := NFmembers}} ->
	  S2#{members =>
		  'erlang_++'(PFmembers, NFmembers, TrUserData)};
      {_, #{members := NFmembers}} ->
	  S2#{members => NFmembers};
      {#{members := PFmembers}, _} ->
	  S2#{members => PFmembers};
      {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_MemberUpdateRequest/3}).
merge_msg_MemberUpdateRequest(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{'ID' := NFID}} -> S1#{'ID' => NFID};
	   {#{'ID' := PFID}, _} -> S1#{'ID' => PFID};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {#{peerURLs := PFpeerURLs},
       #{peerURLs := NFpeerURLs}} ->
	  S2#{peerURLs =>
		  'erlang_++'(PFpeerURLs, NFpeerURLs, TrUserData)};
      {_, #{peerURLs := NFpeerURLs}} ->
	  S2#{peerURLs => NFpeerURLs};
      {#{peerURLs := PFpeerURLs}, _} ->
	  S2#{peerURLs => PFpeerURLs};
      {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_MemberUpdateResponse/3}).
merge_msg_MemberUpdateResponse(PMsg, NMsg,
			       TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{header := PFheader}, #{header := NFheader}} ->
	       S1#{header =>
		       merge_msg_ResponseHeader(PFheader, NFheader,
						TrUserData)};
	   {_, #{header := NFheader}} -> S1#{header => NFheader};
	   {#{header := PFheader}, _} -> S1#{header => PFheader};
	   {_, _} -> S1
	 end,
    case {PMsg, NMsg} of
      {#{members := PFmembers}, #{members := NFmembers}} ->
	  S2#{members =>
		  'erlang_++'(PFmembers, NFmembers, TrUserData)};
      {_, #{members := NFmembers}} ->
	  S2#{members => NFmembers};
      {#{members := PFmembers}, _} ->
	  S2#{members => PFmembers};
      {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_MemberListRequest/3}).
merge_msg_MemberListRequest(_Prev, New, _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_MemberListResponse/3}).
merge_msg_MemberListResponse(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{header := PFheader}, #{header := NFheader}} ->
	       S1#{header =>
		       merge_msg_ResponseHeader(PFheader, NFheader,
						TrUserData)};
	   {_, #{header := NFheader}} -> S1#{header => NFheader};
	   {#{header := PFheader}, _} -> S1#{header => PFheader};
	   {_, _} -> S1
	 end,
    case {PMsg, NMsg} of
      {#{members := PFmembers}, #{members := NFmembers}} ->
	  S2#{members =>
		  'erlang_++'(PFmembers, NFmembers, TrUserData)};
      {_, #{members := NFmembers}} ->
	  S2#{members => NFmembers};
      {#{members := PFmembers}, _} ->
	  S2#{members => PFmembers};
      {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_DefragmentRequest/3}).
merge_msg_DefragmentRequest(_Prev, New, _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_DefragmentResponse/3}).
merge_msg_DefragmentResponse(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{header := PFheader}, #{header := NFheader}} ->
	  S1#{header =>
		  merge_msg_ResponseHeader(PFheader, NFheader,
					   TrUserData)};
      {_, #{header := NFheader}} -> S1#{header => NFheader};
      {#{header := PFheader}, _} -> S1#{header => PFheader};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_MoveLeaderRequest/3}).
merge_msg_MoveLeaderRequest(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{targetID := NFtargetID}} ->
	  S1#{targetID => NFtargetID};
      {#{targetID := PFtargetID}, _} ->
	  S1#{targetID => PFtargetID};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_MoveLeaderResponse/3}).
merge_msg_MoveLeaderResponse(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{header := PFheader}, #{header := NFheader}} ->
	  S1#{header =>
		  merge_msg_ResponseHeader(PFheader, NFheader,
					   TrUserData)};
      {_, #{header := NFheader}} -> S1#{header => NFheader};
      {#{header := PFheader}, _} -> S1#{header => PFheader};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_AlarmRequest/3}).
merge_msg_AlarmRequest(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{action := NFaction}} -> S1#{action => NFaction};
	   {#{action := PFaction}, _} -> S1#{action => PFaction};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{memberID := NFmemberID}} ->
	       S2#{memberID => NFmemberID};
	   {#{memberID := PFmemberID}, _} ->
	       S2#{memberID => PFmemberID};
	   _ -> S2
	 end,
    case {PMsg, NMsg} of
      {_, #{alarm := NFalarm}} -> S3#{alarm => NFalarm};
      {#{alarm := PFalarm}, _} -> S3#{alarm => PFalarm};
      _ -> S3
    end.

-compile({nowarn_unused_function,merge_msg_AlarmMember/3}).
merge_msg_AlarmMember(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{memberID := NFmemberID}} ->
	       S1#{memberID => NFmemberID};
	   {#{memberID := PFmemberID}, _} ->
	       S1#{memberID => PFmemberID};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{alarm := NFalarm}} -> S2#{alarm => NFalarm};
      {#{alarm := PFalarm}, _} -> S2#{alarm => PFalarm};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_AlarmResponse/3}).
merge_msg_AlarmResponse(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{header := PFheader}, #{header := NFheader}} ->
	       S1#{header =>
		       merge_msg_ResponseHeader(PFheader, NFheader,
						TrUserData)};
	   {_, #{header := NFheader}} -> S1#{header => NFheader};
	   {#{header := PFheader}, _} -> S1#{header => PFheader};
	   {_, _} -> S1
	 end,
    case {PMsg, NMsg} of
      {#{alarms := PFalarms}, #{alarms := NFalarms}} ->
	  S2#{alarms =>
		  'erlang_++'(PFalarms, NFalarms, TrUserData)};
      {_, #{alarms := NFalarms}} -> S2#{alarms => NFalarms};
      {#{alarms := PFalarms}, _} -> S2#{alarms => PFalarms};
      {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_StatusRequest/3}).
merge_msg_StatusRequest(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_StatusResponse/3}).
merge_msg_StatusResponse(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{header := PFheader}, #{header := NFheader}} ->
	       S1#{header =>
		       merge_msg_ResponseHeader(PFheader, NFheader,
						TrUserData)};
	   {_, #{header := NFheader}} -> S1#{header => NFheader};
	   {#{header := PFheader}, _} -> S1#{header => PFheader};
	   {_, _} -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{version := NFversion}} ->
	       S2#{version => NFversion};
	   {#{version := PFversion}, _} ->
	       S2#{version => PFversion};
	   _ -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {_, #{dbSize := NFdbSize}} -> S3#{dbSize => NFdbSize};
	   {#{dbSize := PFdbSize}, _} -> S3#{dbSize => PFdbSize};
	   _ -> S3
	 end,
    S5 = case {PMsg, NMsg} of
	   {_, #{leader := NFleader}} -> S4#{leader => NFleader};
	   {#{leader := PFleader}, _} -> S4#{leader => PFleader};
	   _ -> S4
	 end,
    S6 = case {PMsg, NMsg} of
	   {_, #{raftIndex := NFraftIndex}} ->
	       S5#{raftIndex => NFraftIndex};
	   {#{raftIndex := PFraftIndex}, _} ->
	       S5#{raftIndex => PFraftIndex};
	   _ -> S5
	 end,
    S7 = case {PMsg, NMsg} of
	   {_, #{raftTerm := NFraftTerm}} ->
	       S6#{raftTerm => NFraftTerm};
	   {#{raftTerm := PFraftTerm}, _} ->
	       S6#{raftTerm => PFraftTerm};
	   _ -> S6
	 end,
    S8 = case {PMsg, NMsg} of
	   {_, #{raftAppliedIndex := NFraftAppliedIndex}} ->
	       S7#{raftAppliedIndex => NFraftAppliedIndex};
	   {#{raftAppliedIndex := PFraftAppliedIndex}, _} ->
	       S7#{raftAppliedIndex => PFraftAppliedIndex};
	   _ -> S7
	 end,
    S9 = case {PMsg, NMsg} of
	   {#{errors := PFerrors}, #{errors := NFerrors}} ->
	       S8#{errors =>
		       'erlang_++'(PFerrors, NFerrors, TrUserData)};
	   {_, #{errors := NFerrors}} -> S8#{errors => NFerrors};
	   {#{errors := PFerrors}, _} -> S8#{errors => PFerrors};
	   {_, _} -> S8
	 end,
    case {PMsg, NMsg} of
      {_, #{dbSizeInUse := NFdbSizeInUse}} ->
	  S9#{dbSizeInUse => NFdbSizeInUse};
      {#{dbSizeInUse := PFdbSizeInUse}, _} ->
	  S9#{dbSizeInUse => PFdbSizeInUse};
      _ -> S9
    end.

-compile({nowarn_unused_function,merge_msg_AuthEnableRequest/3}).
merge_msg_AuthEnableRequest(_Prev, New, _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_AuthDisableRequest/3}).
merge_msg_AuthDisableRequest(_Prev, New, _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_AuthenticateRequest/3}).
merge_msg_AuthenticateRequest(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{name := NFname}} -> S1#{name => NFname};
	   {#{name := PFname}, _} -> S1#{name => PFname};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{password := NFpassword}} ->
	  S2#{password => NFpassword};
      {#{password := PFpassword}, _} ->
	  S2#{password => PFpassword};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_AuthUserAddRequest/3}).
merge_msg_AuthUserAddRequest(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{name := NFname}} -> S1#{name => NFname};
	   {#{name := PFname}, _} -> S1#{name => PFname};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{password := NFpassword}} ->
	  S2#{password => NFpassword};
      {#{password := PFpassword}, _} ->
	  S2#{password => PFpassword};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_AuthUserGetRequest/3}).
merge_msg_AuthUserGetRequest(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{name := NFname}} -> S1#{name => NFname};
      {#{name := PFname}, _} -> S1#{name => PFname};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_AuthUserDeleteRequest/3}).
merge_msg_AuthUserDeleteRequest(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{name := NFname}} -> S1#{name => NFname};
      {#{name := PFname}, _} -> S1#{name => PFname};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_AuthUserChangePasswordRequest/3}).
merge_msg_AuthUserChangePasswordRequest(PMsg, NMsg,
					_) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{name := NFname}} -> S1#{name => NFname};
	   {#{name := PFname}, _} -> S1#{name => PFname};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{password := NFpassword}} ->
	  S2#{password => NFpassword};
      {#{password := PFpassword}, _} ->
	  S2#{password => PFpassword};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_AuthUserGrantRoleRequest/3}).
merge_msg_AuthUserGrantRoleRequest(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{user := NFuser}} -> S1#{user => NFuser};
	   {#{user := PFuser}, _} -> S1#{user => PFuser};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{role := NFrole}} -> S2#{role => NFrole};
      {#{role := PFrole}, _} -> S2#{role => PFrole};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_AuthUserRevokeRoleRequest/3}).
merge_msg_AuthUserRevokeRoleRequest(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{name := NFname}} -> S1#{name => NFname};
	   {#{name := PFname}, _} -> S1#{name => PFname};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{role := NFrole}} -> S2#{role => NFrole};
      {#{role := PFrole}, _} -> S2#{role => PFrole};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_AuthRoleAddRequest/3}).
merge_msg_AuthRoleAddRequest(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{name := NFname}} -> S1#{name => NFname};
      {#{name := PFname}, _} -> S1#{name => PFname};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_AuthRoleGetRequest/3}).
merge_msg_AuthRoleGetRequest(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{role := NFrole}} -> S1#{role => NFrole};
      {#{role := PFrole}, _} -> S1#{role => PFrole};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_AuthUserListRequest/3}).
merge_msg_AuthUserListRequest(_Prev, New,
			      _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_AuthRoleListRequest/3}).
merge_msg_AuthRoleListRequest(_Prev, New,
			      _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_AuthRoleDeleteRequest/3}).
merge_msg_AuthRoleDeleteRequest(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{role := NFrole}} -> S1#{role => NFrole};
      {#{role := PFrole}, _} -> S1#{role => PFrole};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_AuthRoleGrantPermissionRequest/3}).
merge_msg_AuthRoleGrantPermissionRequest(PMsg, NMsg,
					 TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{name := NFname}} -> S1#{name => NFname};
	   {#{name := PFname}, _} -> S1#{name => PFname};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {#{perm := PFperm}, #{perm := NFperm}} ->
	  S2#{perm =>
		  merge_msg_Permission(PFperm, NFperm, TrUserData)};
      {_, #{perm := NFperm}} -> S2#{perm => NFperm};
      {#{perm := PFperm}, _} -> S2#{perm => PFperm};
      {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_AuthRoleRevokePermissionRequest/3}).
merge_msg_AuthRoleRevokePermissionRequest(PMsg, NMsg,
					  _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{role := NFrole}} -> S1#{role => NFrole};
	   {#{role := PFrole}, _} -> S1#{role => PFrole};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{key := NFkey}} -> S2#{key => NFkey};
	   {#{key := PFkey}, _} -> S2#{key => PFkey};
	   _ -> S2
	 end,
    case {PMsg, NMsg} of
      {_, #{range_end := NFrange_end}} ->
	  S3#{range_end => NFrange_end};
      {#{range_end := PFrange_end}, _} ->
	  S3#{range_end => PFrange_end};
      _ -> S3
    end.

-compile({nowarn_unused_function,merge_msg_AuthEnableResponse/3}).
merge_msg_AuthEnableResponse(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{header := PFheader}, #{header := NFheader}} ->
	  S1#{header =>
		  merge_msg_ResponseHeader(PFheader, NFheader,
					   TrUserData)};
      {_, #{header := NFheader}} -> S1#{header => NFheader};
      {#{header := PFheader}, _} -> S1#{header => PFheader};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_AuthDisableResponse/3}).
merge_msg_AuthDisableResponse(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{header := PFheader}, #{header := NFheader}} ->
	  S1#{header =>
		  merge_msg_ResponseHeader(PFheader, NFheader,
					   TrUserData)};
      {_, #{header := NFheader}} -> S1#{header => NFheader};
      {#{header := PFheader}, _} -> S1#{header => PFheader};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_AuthenticateResponse/3}).
merge_msg_AuthenticateResponse(PMsg, NMsg,
			       TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{header := PFheader}, #{header := NFheader}} ->
	       S1#{header =>
		       merge_msg_ResponseHeader(PFheader, NFheader,
						TrUserData)};
	   {_, #{header := NFheader}} -> S1#{header => NFheader};
	   {#{header := PFheader}, _} -> S1#{header => PFheader};
	   {_, _} -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{token := NFtoken}} -> S2#{token => NFtoken};
      {#{token := PFtoken}, _} -> S2#{token => PFtoken};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_AuthUserAddResponse/3}).
merge_msg_AuthUserAddResponse(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{header := PFheader}, #{header := NFheader}} ->
	  S1#{header =>
		  merge_msg_ResponseHeader(PFheader, NFheader,
					   TrUserData)};
      {_, #{header := NFheader}} -> S1#{header => NFheader};
      {#{header := PFheader}, _} -> S1#{header => PFheader};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_AuthUserGetResponse/3}).
merge_msg_AuthUserGetResponse(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{header := PFheader}, #{header := NFheader}} ->
	       S1#{header =>
		       merge_msg_ResponseHeader(PFheader, NFheader,
						TrUserData)};
	   {_, #{header := NFheader}} -> S1#{header => NFheader};
	   {#{header := PFheader}, _} -> S1#{header => PFheader};
	   {_, _} -> S1
	 end,
    case {PMsg, NMsg} of
      {#{roles := PFroles}, #{roles := NFroles}} ->
	  S2#{roles => 'erlang_++'(PFroles, NFroles, TrUserData)};
      {_, #{roles := NFroles}} -> S2#{roles => NFroles};
      {#{roles := PFroles}, _} -> S2#{roles => PFroles};
      {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_AuthUserDeleteResponse/3}).
merge_msg_AuthUserDeleteResponse(PMsg, NMsg,
				 TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{header := PFheader}, #{header := NFheader}} ->
	  S1#{header =>
		  merge_msg_ResponseHeader(PFheader, NFheader,
					   TrUserData)};
      {_, #{header := NFheader}} -> S1#{header => NFheader};
      {#{header := PFheader}, _} -> S1#{header => PFheader};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_AuthUserChangePasswordResponse/3}).
merge_msg_AuthUserChangePasswordResponse(PMsg, NMsg,
					 TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{header := PFheader}, #{header := NFheader}} ->
	  S1#{header =>
		  merge_msg_ResponseHeader(PFheader, NFheader,
					   TrUserData)};
      {_, #{header := NFheader}} -> S1#{header => NFheader};
      {#{header := PFheader}, _} -> S1#{header => PFheader};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_AuthUserGrantRoleResponse/3}).
merge_msg_AuthUserGrantRoleResponse(PMsg, NMsg,
				    TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{header := PFheader}, #{header := NFheader}} ->
	  S1#{header =>
		  merge_msg_ResponseHeader(PFheader, NFheader,
					   TrUserData)};
      {_, #{header := NFheader}} -> S1#{header => NFheader};
      {#{header := PFheader}, _} -> S1#{header => PFheader};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_AuthUserRevokeRoleResponse/3}).
merge_msg_AuthUserRevokeRoleResponse(PMsg, NMsg,
				     TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{header := PFheader}, #{header := NFheader}} ->
	  S1#{header =>
		  merge_msg_ResponseHeader(PFheader, NFheader,
					   TrUserData)};
      {_, #{header := NFheader}} -> S1#{header => NFheader};
      {#{header := PFheader}, _} -> S1#{header => PFheader};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_AuthRoleAddResponse/3}).
merge_msg_AuthRoleAddResponse(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{header := PFheader}, #{header := NFheader}} ->
	  S1#{header =>
		  merge_msg_ResponseHeader(PFheader, NFheader,
					   TrUserData)};
      {_, #{header := NFheader}} -> S1#{header => NFheader};
      {#{header := PFheader}, _} -> S1#{header => PFheader};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_AuthRoleGetResponse/3}).
merge_msg_AuthRoleGetResponse(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{header := PFheader}, #{header := NFheader}} ->
	       S1#{header =>
		       merge_msg_ResponseHeader(PFheader, NFheader,
						TrUserData)};
	   {_, #{header := NFheader}} -> S1#{header => NFheader};
	   {#{header := PFheader}, _} -> S1#{header => PFheader};
	   {_, _} -> S1
	 end,
    case {PMsg, NMsg} of
      {#{perm := PFperm}, #{perm := NFperm}} ->
	  S2#{perm => 'erlang_++'(PFperm, NFperm, TrUserData)};
      {_, #{perm := NFperm}} -> S2#{perm => NFperm};
      {#{perm := PFperm}, _} -> S2#{perm => PFperm};
      {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_AuthRoleListResponse/3}).
merge_msg_AuthRoleListResponse(PMsg, NMsg,
			       TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{header := PFheader}, #{header := NFheader}} ->
	       S1#{header =>
		       merge_msg_ResponseHeader(PFheader, NFheader,
						TrUserData)};
	   {_, #{header := NFheader}} -> S1#{header => NFheader};
	   {#{header := PFheader}, _} -> S1#{header => PFheader};
	   {_, _} -> S1
	 end,
    case {PMsg, NMsg} of
      {#{roles := PFroles}, #{roles := NFroles}} ->
	  S2#{roles => 'erlang_++'(PFroles, NFroles, TrUserData)};
      {_, #{roles := NFroles}} -> S2#{roles => NFroles};
      {#{roles := PFroles}, _} -> S2#{roles => PFroles};
      {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_AuthUserListResponse/3}).
merge_msg_AuthUserListResponse(PMsg, NMsg,
			       TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{header := PFheader}, #{header := NFheader}} ->
	       S1#{header =>
		       merge_msg_ResponseHeader(PFheader, NFheader,
						TrUserData)};
	   {_, #{header := NFheader}} -> S1#{header => NFheader};
	   {#{header := PFheader}, _} -> S1#{header => PFheader};
	   {_, _} -> S1
	 end,
    case {PMsg, NMsg} of
      {#{users := PFusers}, #{users := NFusers}} ->
	  S2#{users => 'erlang_++'(PFusers, NFusers, TrUserData)};
      {_, #{users := NFusers}} -> S2#{users => NFusers};
      {#{users := PFusers}, _} -> S2#{users => PFusers};
      {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_AuthRoleDeleteResponse/3}).
merge_msg_AuthRoleDeleteResponse(PMsg, NMsg,
				 TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{header := PFheader}, #{header := NFheader}} ->
	  S1#{header =>
		  merge_msg_ResponseHeader(PFheader, NFheader,
					   TrUserData)};
      {_, #{header := NFheader}} -> S1#{header => NFheader};
      {#{header := PFheader}, _} -> S1#{header => PFheader};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_AuthRoleGrantPermissionResponse/3}).
merge_msg_AuthRoleGrantPermissionResponse(PMsg, NMsg,
					  TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{header := PFheader}, #{header := NFheader}} ->
	  S1#{header =>
		  merge_msg_ResponseHeader(PFheader, NFheader,
					   TrUserData)};
      {_, #{header := NFheader}} -> S1#{header => NFheader};
      {#{header := PFheader}, _} -> S1#{header => PFheader};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_AuthRoleRevokePermissionResponse/3}).
merge_msg_AuthRoleRevokePermissionResponse(PMsg, NMsg,
					   TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{header := PFheader}, #{header := NFheader}} ->
	  S1#{header =>
		  merge_msg_ResponseHeader(PFheader, NFheader,
					   TrUserData)};
      {_, #{header := NFheader}} -> S1#{header => NFheader};
      {#{header := PFheader}, _} -> S1#{header => PFheader};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_KeyValue/3}).
merge_msg_KeyValue(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{key := NFkey}} -> S1#{key => NFkey};
	   {#{key := PFkey}, _} -> S1#{key => PFkey};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{create_revision := NFcreate_revision}} ->
	       S2#{create_revision => NFcreate_revision};
	   {#{create_revision := PFcreate_revision}, _} ->
	       S2#{create_revision => PFcreate_revision};
	   _ -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {_, #{mod_revision := NFmod_revision}} ->
	       S3#{mod_revision => NFmod_revision};
	   {#{mod_revision := PFmod_revision}, _} ->
	       S3#{mod_revision => PFmod_revision};
	   _ -> S3
	 end,
    S5 = case {PMsg, NMsg} of
	   {_, #{version := NFversion}} ->
	       S4#{version => NFversion};
	   {#{version := PFversion}, _} ->
	       S4#{version => PFversion};
	   _ -> S4
	 end,
    S6 = case {PMsg, NMsg} of
	   {_, #{value := NFvalue}} -> S5#{value => NFvalue};
	   {#{value := PFvalue}, _} -> S5#{value => PFvalue};
	   _ -> S5
	 end,
    case {PMsg, NMsg} of
      {_, #{lease := NFlease}} -> S6#{lease => NFlease};
      {#{lease := PFlease}, _} -> S6#{lease => PFlease};
      _ -> S6
    end.

-compile({nowarn_unused_function,merge_msg_Event/3}).
merge_msg_Event(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{type := NFtype}} -> S1#{type => NFtype};
	   {#{type := PFtype}, _} -> S1#{type => PFtype};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {#{kv := PFkv}, #{kv := NFkv}} ->
	       S2#{kv => merge_msg_KeyValue(PFkv, NFkv, TrUserData)};
	   {_, #{kv := NFkv}} -> S2#{kv => NFkv};
	   {#{kv := PFkv}, _} -> S2#{kv => PFkv};
	   {_, _} -> S2
	 end,
    case {PMsg, NMsg} of
      {#{prev_kv := PFprev_kv}, #{prev_kv := NFprev_kv}} ->
	  S3#{prev_kv =>
		  merge_msg_KeyValue(PFprev_kv, NFprev_kv, TrUserData)};
      {_, #{prev_kv := NFprev_kv}} ->
	  S3#{prev_kv => NFprev_kv};
      {#{prev_kv := PFprev_kv}, _} ->
	  S3#{prev_kv => PFprev_kv};
      {_, _} -> S3
    end.

-compile({nowarn_unused_function,merge_msg_User/3}).
merge_msg_User(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{name := NFname}} -> S1#{name => NFname};
	   {#{name := PFname}, _} -> S1#{name => PFname};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{password := NFpassword}} ->
	       S2#{password => NFpassword};
	   {#{password := PFpassword}, _} ->
	       S2#{password => PFpassword};
	   _ -> S2
	 end,
    case {PMsg, NMsg} of
      {#{roles := PFroles}, #{roles := NFroles}} ->
	  S3#{roles => 'erlang_++'(PFroles, NFroles, TrUserData)};
      {_, #{roles := NFroles}} -> S3#{roles => NFroles};
      {#{roles := PFroles}, _} -> S3#{roles => PFroles};
      {_, _} -> S3
    end.

-compile({nowarn_unused_function,merge_msg_Permission/3}).
merge_msg_Permission(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{permType := NFpermType}} ->
	       S1#{permType => NFpermType};
	   {#{permType := PFpermType}, _} ->
	       S1#{permType => PFpermType};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{key := NFkey}} -> S2#{key => NFkey};
	   {#{key := PFkey}, _} -> S2#{key => PFkey};
	   _ -> S2
	 end,
    case {PMsg, NMsg} of
      {_, #{range_end := NFrange_end}} ->
	  S3#{range_end => NFrange_end};
      {#{range_end := PFrange_end}, _} ->
	  S3#{range_end => PFrange_end};
      _ -> S3
    end.

-compile({nowarn_unused_function,merge_msg_Role/3}).
merge_msg_Role(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{name := NFname}} -> S1#{name => NFname};
	   {#{name := PFname}, _} -> S1#{name => PFname};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {#{keyPermission := PFkeyPermission},
       #{keyPermission := NFkeyPermission}} ->
	  S2#{keyPermission =>
		  'erlang_++'(PFkeyPermission, NFkeyPermission,
			      TrUserData)};
      {_, #{keyPermission := NFkeyPermission}} ->
	  S2#{keyPermission => NFkeyPermission};
      {#{keyPermission := PFkeyPermission}, _} ->
	  S2#{keyPermission => PFkeyPermission};
      {_, _} -> S2
    end.


verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'ResponseHeader' ->
	  v_msg_ResponseHeader(Msg, [MsgName], TrUserData);
      'RangeRequest' ->
	  v_msg_RangeRequest(Msg, [MsgName], TrUserData);
      'RangeResponse' ->
	  v_msg_RangeResponse(Msg, [MsgName], TrUserData);
      'PutRequest' ->
	  v_msg_PutRequest(Msg, [MsgName], TrUserData);
      'PutResponse' ->
	  v_msg_PutResponse(Msg, [MsgName], TrUserData);
      'DeleteRangeRequest' ->
	  v_msg_DeleteRangeRequest(Msg, [MsgName], TrUserData);
      'DeleteRangeResponse' ->
	  v_msg_DeleteRangeResponse(Msg, [MsgName], TrUserData);
      'RequestOp' ->
	  v_msg_RequestOp(Msg, [MsgName], TrUserData);
      'ResponseOp' ->
	  v_msg_ResponseOp(Msg, [MsgName], TrUserData);
      'Compare' -> v_msg_Compare(Msg, [MsgName], TrUserData);
      'TxnRequest' ->
	  v_msg_TxnRequest(Msg, [MsgName], TrUserData);
      'TxnResponse' ->
	  v_msg_TxnResponse(Msg, [MsgName], TrUserData);
      'CompactionRequest' ->
	  v_msg_CompactionRequest(Msg, [MsgName], TrUserData);
      'CompactionResponse' ->
	  v_msg_CompactionResponse(Msg, [MsgName], TrUserData);
      'HashRequest' ->
	  v_msg_HashRequest(Msg, [MsgName], TrUserData);
      'HashKVRequest' ->
	  v_msg_HashKVRequest(Msg, [MsgName], TrUserData);
      'HashKVResponse' ->
	  v_msg_HashKVResponse(Msg, [MsgName], TrUserData);
      'HashResponse' ->
	  v_msg_HashResponse(Msg, [MsgName], TrUserData);
      'SnapshotRequest' ->
	  v_msg_SnapshotRequest(Msg, [MsgName], TrUserData);
      'SnapshotResponse' ->
	  v_msg_SnapshotResponse(Msg, [MsgName], TrUserData);
      'WatchRequest' ->
	  v_msg_WatchRequest(Msg, [MsgName], TrUserData);
      'WatchCreateRequest' ->
	  v_msg_WatchCreateRequest(Msg, [MsgName], TrUserData);
      'WatchCancelRequest' ->
	  v_msg_WatchCancelRequest(Msg, [MsgName], TrUserData);
      'WatchProgressRequest' ->
	  v_msg_WatchProgressRequest(Msg, [MsgName], TrUserData);
      'WatchResponse' ->
	  v_msg_WatchResponse(Msg, [MsgName], TrUserData);
      'LeaseGrantRequest' ->
	  v_msg_LeaseGrantRequest(Msg, [MsgName], TrUserData);
      'LeaseGrantResponse' ->
	  v_msg_LeaseGrantResponse(Msg, [MsgName], TrUserData);
      'LeaseRevokeRequest' ->
	  v_msg_LeaseRevokeRequest(Msg, [MsgName], TrUserData);
      'LeaseRevokeResponse' ->
	  v_msg_LeaseRevokeResponse(Msg, [MsgName], TrUserData);
      'LeaseCheckpoint' ->
	  v_msg_LeaseCheckpoint(Msg, [MsgName], TrUserData);
      'LeaseCheckpointRequest' ->
	  v_msg_LeaseCheckpointRequest(Msg, [MsgName],
				       TrUserData);
      'LeaseCheckpointResponse' ->
	  v_msg_LeaseCheckpointResponse(Msg, [MsgName],
					TrUserData);
      'LeaseKeepAliveRequest' ->
	  v_msg_LeaseKeepAliveRequest(Msg, [MsgName], TrUserData);
      'LeaseKeepAliveResponse' ->
	  v_msg_LeaseKeepAliveResponse(Msg, [MsgName],
				       TrUserData);
      'LeaseTimeToLiveRequest' ->
	  v_msg_LeaseTimeToLiveRequest(Msg, [MsgName],
				       TrUserData);
      'LeaseTimeToLiveResponse' ->
	  v_msg_LeaseTimeToLiveResponse(Msg, [MsgName],
					TrUserData);
      'LeaseLeasesRequest' ->
	  v_msg_LeaseLeasesRequest(Msg, [MsgName], TrUserData);
      'LeaseStatus' ->
	  v_msg_LeaseStatus(Msg, [MsgName], TrUserData);
      'LeaseLeasesResponse' ->
	  v_msg_LeaseLeasesResponse(Msg, [MsgName], TrUserData);
      'Member' -> v_msg_Member(Msg, [MsgName], TrUserData);
      'MemberAddRequest' ->
	  v_msg_MemberAddRequest(Msg, [MsgName], TrUserData);
      'MemberAddResponse' ->
	  v_msg_MemberAddResponse(Msg, [MsgName], TrUserData);
      'MemberRemoveRequest' ->
	  v_msg_MemberRemoveRequest(Msg, [MsgName], TrUserData);
      'MemberRemoveResponse' ->
	  v_msg_MemberRemoveResponse(Msg, [MsgName], TrUserData);
      'MemberUpdateRequest' ->
	  v_msg_MemberUpdateRequest(Msg, [MsgName], TrUserData);
      'MemberUpdateResponse' ->
	  v_msg_MemberUpdateResponse(Msg, [MsgName], TrUserData);
      'MemberListRequest' ->
	  v_msg_MemberListRequest(Msg, [MsgName], TrUserData);
      'MemberListResponse' ->
	  v_msg_MemberListResponse(Msg, [MsgName], TrUserData);
      'DefragmentRequest' ->
	  v_msg_DefragmentRequest(Msg, [MsgName], TrUserData);
      'DefragmentResponse' ->
	  v_msg_DefragmentResponse(Msg, [MsgName], TrUserData);
      'MoveLeaderRequest' ->
	  v_msg_MoveLeaderRequest(Msg, [MsgName], TrUserData);
      'MoveLeaderResponse' ->
	  v_msg_MoveLeaderResponse(Msg, [MsgName], TrUserData);
      'AlarmRequest' ->
	  v_msg_AlarmRequest(Msg, [MsgName], TrUserData);
      'AlarmMember' ->
	  v_msg_AlarmMember(Msg, [MsgName], TrUserData);
      'AlarmResponse' ->
	  v_msg_AlarmResponse(Msg, [MsgName], TrUserData);
      'StatusRequest' ->
	  v_msg_StatusRequest(Msg, [MsgName], TrUserData);
      'StatusResponse' ->
	  v_msg_StatusResponse(Msg, [MsgName], TrUserData);
      'AuthEnableRequest' ->
	  v_msg_AuthEnableRequest(Msg, [MsgName], TrUserData);
      'AuthDisableRequest' ->
	  v_msg_AuthDisableRequest(Msg, [MsgName], TrUserData);
      'AuthenticateRequest' ->
	  v_msg_AuthenticateRequest(Msg, [MsgName], TrUserData);
      'AuthUserAddRequest' ->
	  v_msg_AuthUserAddRequest(Msg, [MsgName], TrUserData);
      'AuthUserGetRequest' ->
	  v_msg_AuthUserGetRequest(Msg, [MsgName], TrUserData);
      'AuthUserDeleteRequest' ->
	  v_msg_AuthUserDeleteRequest(Msg, [MsgName], TrUserData);
      'AuthUserChangePasswordRequest' ->
	  v_msg_AuthUserChangePasswordRequest(Msg, [MsgName],
					      TrUserData);
      'AuthUserGrantRoleRequest' ->
	  v_msg_AuthUserGrantRoleRequest(Msg, [MsgName],
					 TrUserData);
      'AuthUserRevokeRoleRequest' ->
	  v_msg_AuthUserRevokeRoleRequest(Msg, [MsgName],
					  TrUserData);
      'AuthRoleAddRequest' ->
	  v_msg_AuthRoleAddRequest(Msg, [MsgName], TrUserData);
      'AuthRoleGetRequest' ->
	  v_msg_AuthRoleGetRequest(Msg, [MsgName], TrUserData);
      'AuthUserListRequest' ->
	  v_msg_AuthUserListRequest(Msg, [MsgName], TrUserData);
      'AuthRoleListRequest' ->
	  v_msg_AuthRoleListRequest(Msg, [MsgName], TrUserData);
      'AuthRoleDeleteRequest' ->
	  v_msg_AuthRoleDeleteRequest(Msg, [MsgName], TrUserData);
      'AuthRoleGrantPermissionRequest' ->
	  v_msg_AuthRoleGrantPermissionRequest(Msg, [MsgName],
					       TrUserData);
      'AuthRoleRevokePermissionRequest' ->
	  v_msg_AuthRoleRevokePermissionRequest(Msg, [MsgName],
						TrUserData);
      'AuthEnableResponse' ->
	  v_msg_AuthEnableResponse(Msg, [MsgName], TrUserData);
      'AuthDisableResponse' ->
	  v_msg_AuthDisableResponse(Msg, [MsgName], TrUserData);
      'AuthenticateResponse' ->
	  v_msg_AuthenticateResponse(Msg, [MsgName], TrUserData);
      'AuthUserAddResponse' ->
	  v_msg_AuthUserAddResponse(Msg, [MsgName], TrUserData);
      'AuthUserGetResponse' ->
	  v_msg_AuthUserGetResponse(Msg, [MsgName], TrUserData);
      'AuthUserDeleteResponse' ->
	  v_msg_AuthUserDeleteResponse(Msg, [MsgName],
				       TrUserData);
      'AuthUserChangePasswordResponse' ->
	  v_msg_AuthUserChangePasswordResponse(Msg, [MsgName],
					       TrUserData);
      'AuthUserGrantRoleResponse' ->
	  v_msg_AuthUserGrantRoleResponse(Msg, [MsgName],
					  TrUserData);
      'AuthUserRevokeRoleResponse' ->
	  v_msg_AuthUserRevokeRoleResponse(Msg, [MsgName],
					   TrUserData);
      'AuthRoleAddResponse' ->
	  v_msg_AuthRoleAddResponse(Msg, [MsgName], TrUserData);
      'AuthRoleGetResponse' ->
	  v_msg_AuthRoleGetResponse(Msg, [MsgName], TrUserData);
      'AuthRoleListResponse' ->
	  v_msg_AuthRoleListResponse(Msg, [MsgName], TrUserData);
      'AuthUserListResponse' ->
	  v_msg_AuthUserListResponse(Msg, [MsgName], TrUserData);
      'AuthRoleDeleteResponse' ->
	  v_msg_AuthRoleDeleteResponse(Msg, [MsgName],
				       TrUserData);
      'AuthRoleGrantPermissionResponse' ->
	  v_msg_AuthRoleGrantPermissionResponse(Msg, [MsgName],
						TrUserData);
      'AuthRoleRevokePermissionResponse' ->
	  v_msg_AuthRoleRevokePermissionResponse(Msg, [MsgName],
						 TrUserData);
      'KeyValue' ->
	  v_msg_KeyValue(Msg, [MsgName], TrUserData);
      'Event' -> v_msg_Event(Msg, [MsgName], TrUserData);
      'User' -> v_msg_User(Msg, [MsgName], TrUserData);
      'Permission' ->
	  v_msg_Permission(Msg, [MsgName], TrUserData);
      'Role' -> v_msg_Role(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_ResponseHeader/3}).
-dialyzer({nowarn_function,v_msg_ResponseHeader/3}).
v_msg_ResponseHeader(#{} = M, Path, TrUserData) ->
    case M of
      #{cluster_id := F1} ->
	  v_type_uint64(F1, [cluster_id | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{member_id := F2} ->
	  v_type_uint64(F2, [member_id | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{revision := F3} ->
	  v_type_int64(F3, [revision | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{raft_term := F4} ->
	  v_type_uint64(F4, [raft_term | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (cluster_id) -> ok;
		      (member_id) -> ok;
		      (revision) -> ok;
		      (raft_term) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_ResponseHeader(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'ResponseHeader'},
		  M, Path);
v_msg_ResponseHeader(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ResponseHeader'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_RangeRequest/3}).
-dialyzer({nowarn_function,v_msg_RangeRequest/3}).
v_msg_RangeRequest(#{} = M, Path, TrUserData) ->
    case M of
      #{key := F1} ->
	  v_type_bytes(F1, [key | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{range_end := F2} ->
	  v_type_bytes(F2, [range_end | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{limit := F3} ->
	  v_type_int64(F3, [limit | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{revision := F4} ->
	  v_type_int64(F4, [revision | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{sort_order := F5} ->
	  'v_enum_RangeRequest.SortOrder'(F5, [sort_order | Path],
					  TrUserData);
      _ -> ok
    end,
    case M of
      #{sort_target := F6} ->
	  'v_enum_RangeRequest.SortTarget'(F6,
					   [sort_target | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{serializable := F7} ->
	  v_type_bool(F7, [serializable | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{keys_only := F8} ->
	  v_type_bool(F8, [keys_only | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{count_only := F9} ->
	  v_type_bool(F9, [count_only | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{min_mod_revision := F10} ->
	  v_type_int64(F10, [min_mod_revision | Path],
		       TrUserData);
      _ -> ok
    end,
    case M of
      #{max_mod_revision := F11} ->
	  v_type_int64(F11, [max_mod_revision | Path],
		       TrUserData);
      _ -> ok
    end,
    case M of
      #{min_create_revision := F12} ->
	  v_type_int64(F12, [min_create_revision | Path],
		       TrUserData);
      _ -> ok
    end,
    case M of
      #{max_create_revision := F13} ->
	  v_type_int64(F13, [max_create_revision | Path],
		       TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (key) -> ok;
		      (range_end) -> ok;
		      (limit) -> ok;
		      (revision) -> ok;
		      (sort_order) -> ok;
		      (sort_target) -> ok;
		      (serializable) -> ok;
		      (keys_only) -> ok;
		      (count_only) -> ok;
		      (min_mod_revision) -> ok;
		      (max_mod_revision) -> ok;
		      (min_create_revision) -> ok;
		      (max_create_revision) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_RangeRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'RangeRequest'},
		  M, Path);
v_msg_RangeRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'RangeRequest'}, X, Path).

-compile({nowarn_unused_function,v_msg_RangeResponse/3}).
-dialyzer({nowarn_function,v_msg_RangeResponse/3}).
v_msg_RangeResponse(#{} = M, Path, TrUserData) ->
    case M of
      #{header := F1} ->
	  v_msg_ResponseHeader(F1, [header | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{kvs := F2} ->
	  if is_list(F2) ->
		 _ = [v_msg_KeyValue(Elem, [kvs | Path], TrUserData)
		      || Elem <- F2],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, 'KeyValue'}}, F2,
			       [kvs | Path])
	  end;
      _ -> ok
    end,
    case M of
      #{more := F3} ->
	  v_type_bool(F3, [more | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{count := F4} ->
	  v_type_int64(F4, [count | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (header) -> ok;
		      (kvs) -> ok;
		      (more) -> ok;
		      (count) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_RangeResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'RangeResponse'},
		  M, Path);
v_msg_RangeResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'RangeResponse'}, X, Path).

-compile({nowarn_unused_function,v_msg_PutRequest/3}).
-dialyzer({nowarn_function,v_msg_PutRequest/3}).
v_msg_PutRequest(#{} = M, Path, TrUserData) ->
    case M of
      #{key := F1} ->
	  v_type_bytes(F1, [key | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{value := F2} ->
	  v_type_bytes(F2, [value | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{lease := F3} ->
	  v_type_int64(F3, [lease | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{prev_kv := F4} ->
	  v_type_bool(F4, [prev_kv | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{ignore_value := F5} ->
	  v_type_bool(F5, [ignore_value | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{ignore_lease := F6} ->
	  v_type_bool(F6, [ignore_lease | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (key) -> ok;
		      (value) -> ok;
		      (lease) -> ok;
		      (prev_kv) -> ok;
		      (ignore_value) -> ok;
		      (ignore_lease) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_PutRequest(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'PutRequest'},
		  M, Path);
v_msg_PutRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'PutRequest'}, X, Path).

-compile({nowarn_unused_function,v_msg_PutResponse/3}).
-dialyzer({nowarn_function,v_msg_PutResponse/3}).
v_msg_PutResponse(#{} = M, Path, TrUserData) ->
    case M of
      #{header := F1} ->
	  v_msg_ResponseHeader(F1, [header | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{prev_kv := F2} ->
	  v_msg_KeyValue(F2, [prev_kv | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (header) -> ok;
		      (prev_kv) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_PutResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'PutResponse'},
		  M, Path);
v_msg_PutResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'PutResponse'}, X, Path).

-compile({nowarn_unused_function,v_msg_DeleteRangeRequest/3}).
-dialyzer({nowarn_function,v_msg_DeleteRangeRequest/3}).
v_msg_DeleteRangeRequest(#{} = M, Path, TrUserData) ->
    case M of
      #{key := F1} ->
	  v_type_bytes(F1, [key | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{range_end := F2} ->
	  v_type_bytes(F2, [range_end | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{prev_kv := F3} ->
	  v_type_bool(F3, [prev_kv | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (key) -> ok;
		      (range_end) -> ok;
		      (prev_kv) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_DeleteRangeRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'DeleteRangeRequest'},
		  M, Path);
v_msg_DeleteRangeRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'DeleteRangeRequest'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_DeleteRangeResponse/3}).
-dialyzer({nowarn_function,v_msg_DeleteRangeResponse/3}).
v_msg_DeleteRangeResponse(#{} = M, Path, TrUserData) ->
    case M of
      #{header := F1} ->
	  v_msg_ResponseHeader(F1, [header | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{deleted := F2} ->
	  v_type_int64(F2, [deleted | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{prev_kvs := F3} ->
	  if is_list(F3) ->
		 _ = [v_msg_KeyValue(Elem, [prev_kvs | Path], TrUserData)
		      || Elem <- F3],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, 'KeyValue'}}, F3,
			       [prev_kvs | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (header) -> ok;
		      (deleted) -> ok;
		      (prev_kvs) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_DeleteRangeResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'DeleteRangeResponse'},
		  M, Path);
v_msg_DeleteRangeResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'DeleteRangeResponse'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_RequestOp/3}).
-dialyzer({nowarn_function,v_msg_RequestOp/3}).
v_msg_RequestOp(#{} = M, Path, TrUserData) ->
    case M of
      #{request := {request_range, OF1}} ->
	  v_msg_RangeRequest(OF1, [request_range, request | Path],
			     TrUserData);
      #{request := {request_put, OF1}} ->
	  v_msg_PutRequest(OF1, [request_put, request | Path],
			   TrUserData);
      #{request := {request_delete_range, OF1}} ->
	  v_msg_DeleteRangeRequest(OF1,
				   [request_delete_range, request | Path],
				   TrUserData);
      #{request := {request_txn, OF1}} ->
	  v_msg_TxnRequest(OF1, [request_txn, request | Path],
			   TrUserData);
      #{request := F1} ->
	  mk_type_error(invalid_oneof, F1, [request | Path]);
      _ -> ok
    end,
    lists:foreach(fun (request) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_RequestOp(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'RequestOp'},
		  M, Path);
v_msg_RequestOp(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'RequestOp'}, X, Path).

-compile({nowarn_unused_function,v_msg_ResponseOp/3}).
-dialyzer({nowarn_function,v_msg_ResponseOp/3}).
v_msg_ResponseOp(#{} = M, Path, TrUserData) ->
    case M of
      #{response := {response_range, OF1}} ->
	  v_msg_RangeResponse(OF1,
			      [response_range, response | Path], TrUserData);
      #{response := {response_put, OF1}} ->
	  v_msg_PutResponse(OF1, [response_put, response | Path],
			    TrUserData);
      #{response := {response_delete_range, OF1}} ->
	  v_msg_DeleteRangeResponse(OF1,
				    [response_delete_range, response | Path],
				    TrUserData);
      #{response := {response_txn, OF1}} ->
	  v_msg_TxnResponse(OF1, [response_txn, response | Path],
			    TrUserData);
      #{response := F1} ->
	  mk_type_error(invalid_oneof, F1, [response | Path]);
      _ -> ok
    end,
    lists:foreach(fun (response) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_ResponseOp(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'ResponseOp'},
		  M, Path);
v_msg_ResponseOp(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ResponseOp'}, X, Path).

-compile({nowarn_unused_function,v_msg_Compare/3}).
-dialyzer({nowarn_function,v_msg_Compare/3}).
v_msg_Compare(#{} = M, Path, TrUserData) ->
    case M of
      #{result := F1} ->
	  'v_enum_Compare.CompareResult'(F1, [result | Path],
					 TrUserData);
      _ -> ok
    end,
    case M of
      #{target := F2} ->
	  'v_enum_Compare.CompareTarget'(F2, [target | Path],
					 TrUserData);
      _ -> ok
    end,
    case M of
      #{key := F3} ->
	  v_type_bytes(F3, [key | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{target_union := {version, OF4}} ->
	  v_type_int64(OF4, [version, target_union | Path],
		       TrUserData);
      #{target_union := {create_revision, OF4}} ->
	  v_type_int64(OF4,
		       [create_revision, target_union | Path], TrUserData);
      #{target_union := {mod_revision, OF4}} ->
	  v_type_int64(OF4, [mod_revision, target_union | Path],
		       TrUserData);
      #{target_union := {value, OF4}} ->
	  v_type_bytes(OF4, [value, target_union | Path],
		       TrUserData);
      #{target_union := {lease, OF4}} ->
	  v_type_int64(OF4, [lease, target_union | Path],
		       TrUserData);
      #{target_union := F4} ->
	  mk_type_error(invalid_oneof, F4, [target_union | Path]);
      _ -> ok
    end,
    case M of
      #{range_end := F5} ->
	  v_type_bytes(F5, [range_end | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (result) -> ok;
		      (target) -> ok;
		      (key) -> ok;
		      (target_union) -> ok;
		      (range_end) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_Compare(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'Compare'},
		  M, Path);
v_msg_Compare(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Compare'}, X, Path).

-compile({nowarn_unused_function,v_msg_TxnRequest/3}).
-dialyzer({nowarn_function,v_msg_TxnRequest/3}).
v_msg_TxnRequest(#{} = M, Path, TrUserData) ->
    case M of
      #{compare := F1} ->
	  if is_list(F1) ->
		 _ = [v_msg_Compare(Elem, [compare | Path], TrUserData)
		      || Elem <- F1],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, 'Compare'}}, F1,
			       [compare | Path])
	  end;
      _ -> ok
    end,
    case M of
      #{success := F2} ->
	  if is_list(F2) ->
		 _ = [v_msg_RequestOp(Elem, [success | Path], TrUserData)
		      || Elem <- F2],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, 'RequestOp'}}, F2,
			       [success | Path])
	  end;
      _ -> ok
    end,
    case M of
      #{failure := F3} ->
	  if is_list(F3) ->
		 _ = [v_msg_RequestOp(Elem, [failure | Path], TrUserData)
		      || Elem <- F3],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, 'RequestOp'}}, F3,
			       [failure | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (compare) -> ok;
		      (success) -> ok;
		      (failure) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_TxnRequest(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'TxnRequest'},
		  M, Path);
v_msg_TxnRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'TxnRequest'}, X, Path).

-compile({nowarn_unused_function,v_msg_TxnResponse/3}).
-dialyzer({nowarn_function,v_msg_TxnResponse/3}).
v_msg_TxnResponse(#{} = M, Path, TrUserData) ->
    case M of
      #{header := F1} ->
	  v_msg_ResponseHeader(F1, [header | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{succeeded := F2} ->
	  v_type_bool(F2, [succeeded | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{responses := F3} ->
	  if is_list(F3) ->
		 _ = [v_msg_ResponseOp(Elem, [responses | Path],
				       TrUserData)
		      || Elem <- F3],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, 'ResponseOp'}},
			       F3, [responses | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (header) -> ok;
		      (succeeded) -> ok;
		      (responses) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_TxnResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'TxnResponse'},
		  M, Path);
v_msg_TxnResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'TxnResponse'}, X, Path).

-compile({nowarn_unused_function,v_msg_CompactionRequest/3}).
-dialyzer({nowarn_function,v_msg_CompactionRequest/3}).
v_msg_CompactionRequest(#{} = M, Path, TrUserData) ->
    case M of
      #{revision := F1} ->
	  v_type_int64(F1, [revision | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{physical := F2} ->
	  v_type_bool(F2, [physical | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (revision) -> ok;
		      (physical) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_CompactionRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'CompactionRequest'},
		  M, Path);
v_msg_CompactionRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'CompactionRequest'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_CompactionResponse/3}).
-dialyzer({nowarn_function,v_msg_CompactionResponse/3}).
v_msg_CompactionResponse(#{} = M, Path, TrUserData) ->
    case M of
      #{header := F1} ->
	  v_msg_ResponseHeader(F1, [header | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (header) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_CompactionResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'CompactionResponse'},
		  M, Path);
v_msg_CompactionResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'CompactionResponse'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_HashRequest/3}).
-dialyzer({nowarn_function,v_msg_HashRequest/3}).
v_msg_HashRequest(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_HashRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'HashRequest'},
		  M, Path);
v_msg_HashRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'HashRequest'}, X, Path).

-compile({nowarn_unused_function,v_msg_HashKVRequest/3}).
-dialyzer({nowarn_function,v_msg_HashKVRequest/3}).
v_msg_HashKVRequest(#{} = M, Path, TrUserData) ->
    case M of
      #{revision := F1} ->
	  v_type_int64(F1, [revision | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (revision) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_HashKVRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'HashKVRequest'},
		  M, Path);
v_msg_HashKVRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'HashKVRequest'}, X, Path).

-compile({nowarn_unused_function,v_msg_HashKVResponse/3}).
-dialyzer({nowarn_function,v_msg_HashKVResponse/3}).
v_msg_HashKVResponse(#{} = M, Path, TrUserData) ->
    case M of
      #{header := F1} ->
	  v_msg_ResponseHeader(F1, [header | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{hash := F2} ->
	  v_type_uint32(F2, [hash | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{compact_revision := F3} ->
	  v_type_int64(F3, [compact_revision | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (header) -> ok;
		      (hash) -> ok;
		      (compact_revision) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_HashKVResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'HashKVResponse'},
		  M, Path);
v_msg_HashKVResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'HashKVResponse'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_HashResponse/3}).
-dialyzer({nowarn_function,v_msg_HashResponse/3}).
v_msg_HashResponse(#{} = M, Path, TrUserData) ->
    case M of
      #{header := F1} ->
	  v_msg_ResponseHeader(F1, [header | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{hash := F2} ->
	  v_type_uint32(F2, [hash | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (header) -> ok;
		      (hash) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_HashResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'HashResponse'},
		  M, Path);
v_msg_HashResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'HashResponse'}, X, Path).

-compile({nowarn_unused_function,v_msg_SnapshotRequest/3}).
-dialyzer({nowarn_function,v_msg_SnapshotRequest/3}).
v_msg_SnapshotRequest(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_SnapshotRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'SnapshotRequest'},
		  M, Path);
v_msg_SnapshotRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'SnapshotRequest'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_SnapshotResponse/3}).
-dialyzer({nowarn_function,v_msg_SnapshotResponse/3}).
v_msg_SnapshotResponse(#{} = M, Path, TrUserData) ->
    case M of
      #{header := F1} ->
	  v_msg_ResponseHeader(F1, [header | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{remaining_bytes := F2} ->
	  v_type_uint64(F2, [remaining_bytes | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{blob := F3} ->
	  v_type_bytes(F3, [blob | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (header) -> ok;
		      (remaining_bytes) -> ok;
		      (blob) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_SnapshotResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'SnapshotResponse'},
		  M, Path);
v_msg_SnapshotResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'SnapshotResponse'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_WatchRequest/3}).
-dialyzer({nowarn_function,v_msg_WatchRequest/3}).
v_msg_WatchRequest(#{} = M, Path, TrUserData) ->
    case M of
      #{request_union := {create_request, OF1}} ->
	  v_msg_WatchCreateRequest(OF1,
				   [create_request, request_union | Path],
				   TrUserData);
      #{request_union := {cancel_request, OF1}} ->
	  v_msg_WatchCancelRequest(OF1,
				   [cancel_request, request_union | Path],
				   TrUserData);
      #{request_union := {progress_request, OF1}} ->
	  v_msg_WatchProgressRequest(OF1,
				     [progress_request, request_union | Path],
				     TrUserData);
      #{request_union := F1} ->
	  mk_type_error(invalid_oneof, F1,
			[request_union | Path]);
      _ -> ok
    end,
    lists:foreach(fun (request_union) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_WatchRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'WatchRequest'},
		  M, Path);
v_msg_WatchRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'WatchRequest'}, X, Path).

-compile({nowarn_unused_function,v_msg_WatchCreateRequest/3}).
-dialyzer({nowarn_function,v_msg_WatchCreateRequest/3}).
v_msg_WatchCreateRequest(#{} = M, Path, TrUserData) ->
    case M of
      #{key := F1} ->
	  v_type_bytes(F1, [key | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{range_end := F2} ->
	  v_type_bytes(F2, [range_end | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{start_revision := F3} ->
	  v_type_int64(F3, [start_revision | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{progress_notify := F4} ->
	  v_type_bool(F4, [progress_notify | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{filters := F5} ->
	  if is_list(F5) ->
		 _ = ['v_enum_WatchCreateRequest.FilterType'(Elem,
							     [filters | Path],
							     TrUserData)
		      || Elem <- F5],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of,
				{enum, 'WatchCreateRequest.FilterType'}},
			       F5, [filters | Path])
	  end;
      _ -> ok
    end,
    case M of
      #{prev_kv := F6} ->
	  v_type_bool(F6, [prev_kv | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{watch_id := F7} ->
	  v_type_int64(F7, [watch_id | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{fragment := F8} ->
	  v_type_bool(F8, [fragment | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (key) -> ok;
		      (range_end) -> ok;
		      (start_revision) -> ok;
		      (progress_notify) -> ok;
		      (filters) -> ok;
		      (prev_kv) -> ok;
		      (watch_id) -> ok;
		      (fragment) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_WatchCreateRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'WatchCreateRequest'},
		  M, Path);
v_msg_WatchCreateRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'WatchCreateRequest'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_WatchCancelRequest/3}).
-dialyzer({nowarn_function,v_msg_WatchCancelRequest/3}).
v_msg_WatchCancelRequest(#{} = M, Path, TrUserData) ->
    case M of
      #{watch_id := F1} ->
	  v_type_int64(F1, [watch_id | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (watch_id) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_WatchCancelRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'WatchCancelRequest'},
		  M, Path);
v_msg_WatchCancelRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'WatchCancelRequest'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_WatchProgressRequest/3}).
-dialyzer({nowarn_function,v_msg_WatchProgressRequest/3}).
v_msg_WatchProgressRequest(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_WatchProgressRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'WatchProgressRequest'},
		  M, Path);
v_msg_WatchProgressRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'WatchProgressRequest'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_WatchResponse/3}).
-dialyzer({nowarn_function,v_msg_WatchResponse/3}).
v_msg_WatchResponse(#{} = M, Path, TrUserData) ->
    case M of
      #{header := F1} ->
	  v_msg_ResponseHeader(F1, [header | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{watch_id := F2} ->
	  v_type_int64(F2, [watch_id | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{created := F3} ->
	  v_type_bool(F3, [created | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{canceled := F4} ->
	  v_type_bool(F4, [canceled | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{compact_revision := F5} ->
	  v_type_int64(F5, [compact_revision | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{cancel_reason := F6} ->
	  v_type_string(F6, [cancel_reason | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{fragment := F7} ->
	  v_type_bool(F7, [fragment | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{events := F8} ->
	  if is_list(F8) ->
		 _ = [v_msg_Event(Elem, [events | Path], TrUserData)
		      || Elem <- F8],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, 'Event'}}, F8,
			       [events | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (header) -> ok;
		      (watch_id) -> ok;
		      (created) -> ok;
		      (canceled) -> ok;
		      (compact_revision) -> ok;
		      (cancel_reason) -> ok;
		      (fragment) -> ok;
		      (events) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_WatchResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'WatchResponse'},
		  M, Path);
v_msg_WatchResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'WatchResponse'}, X, Path).

-compile({nowarn_unused_function,v_msg_LeaseGrantRequest/3}).
-dialyzer({nowarn_function,v_msg_LeaseGrantRequest/3}).
v_msg_LeaseGrantRequest(#{} = M, Path, TrUserData) ->
    case M of
      #{'TTL' := F1} ->
	  v_type_int64(F1, ['TTL' | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{'ID' := F2} ->
	  v_type_int64(F2, ['ID' | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun ('TTL') -> ok;
		      ('ID') -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_LeaseGrantRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'LeaseGrantRequest'},
		  M, Path);
v_msg_LeaseGrantRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'LeaseGrantRequest'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_LeaseGrantResponse/3}).
-dialyzer({nowarn_function,v_msg_LeaseGrantResponse/3}).
v_msg_LeaseGrantResponse(#{} = M, Path, TrUserData) ->
    case M of
      #{header := F1} ->
	  v_msg_ResponseHeader(F1, [header | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{'ID' := F2} ->
	  v_type_int64(F2, ['ID' | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{'TTL' := F3} ->
	  v_type_int64(F3, ['TTL' | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{error := F4} ->
	  v_type_string(F4, [error | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (header) -> ok;
		      ('ID') -> ok;
		      ('TTL') -> ok;
		      (error) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_LeaseGrantResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'LeaseGrantResponse'},
		  M, Path);
v_msg_LeaseGrantResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'LeaseGrantResponse'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_LeaseRevokeRequest/3}).
-dialyzer({nowarn_function,v_msg_LeaseRevokeRequest/3}).
v_msg_LeaseRevokeRequest(#{} = M, Path, TrUserData) ->
    case M of
      #{'ID' := F1} ->
	  v_type_int64(F1, ['ID' | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun ('ID') -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_LeaseRevokeRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'LeaseRevokeRequest'},
		  M, Path);
v_msg_LeaseRevokeRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'LeaseRevokeRequest'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_LeaseRevokeResponse/3}).
-dialyzer({nowarn_function,v_msg_LeaseRevokeResponse/3}).
v_msg_LeaseRevokeResponse(#{} = M, Path, TrUserData) ->
    case M of
      #{header := F1} ->
	  v_msg_ResponseHeader(F1, [header | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (header) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_LeaseRevokeResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'LeaseRevokeResponse'},
		  M, Path);
v_msg_LeaseRevokeResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'LeaseRevokeResponse'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_LeaseCheckpoint/3}).
-dialyzer({nowarn_function,v_msg_LeaseCheckpoint/3}).
v_msg_LeaseCheckpoint(#{} = M, Path, TrUserData) ->
    case M of
      #{'ID' := F1} ->
	  v_type_int64(F1, ['ID' | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{remaining_TTL := F2} ->
	  v_type_int64(F2, [remaining_TTL | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun ('ID') -> ok;
		      (remaining_TTL) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_LeaseCheckpoint(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'LeaseCheckpoint'},
		  M, Path);
v_msg_LeaseCheckpoint(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'LeaseCheckpoint'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_LeaseCheckpointRequest/3}).
-dialyzer({nowarn_function,v_msg_LeaseCheckpointRequest/3}).
v_msg_LeaseCheckpointRequest(#{} = M, Path,
			     TrUserData) ->
    case M of
      #{checkpoints := F1} ->
	  if is_list(F1) ->
		 _ = [v_msg_LeaseCheckpoint(Elem, [checkpoints | Path],
					    TrUserData)
		      || Elem <- F1],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of,
				{msg, 'LeaseCheckpoint'}},
			       F1, [checkpoints | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (checkpoints) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_LeaseCheckpointRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'LeaseCheckpointRequest'},
		  M, Path);
v_msg_LeaseCheckpointRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'LeaseCheckpointRequest'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_LeaseCheckpointResponse/3}).
-dialyzer({nowarn_function,v_msg_LeaseCheckpointResponse/3}).
v_msg_LeaseCheckpointResponse(#{} = M, Path,
			      TrUserData) ->
    case M of
      #{header := F1} ->
	  v_msg_ResponseHeader(F1, [header | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (header) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_LeaseCheckpointResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'LeaseCheckpointResponse'},
		  M, Path);
v_msg_LeaseCheckpointResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'LeaseCheckpointResponse'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_LeaseKeepAliveRequest/3}).
-dialyzer({nowarn_function,v_msg_LeaseKeepAliveRequest/3}).
v_msg_LeaseKeepAliveRequest(#{} = M, Path,
			    TrUserData) ->
    case M of
      #{'ID' := F1} ->
	  v_type_int64(F1, ['ID' | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun ('ID') -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_LeaseKeepAliveRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'LeaseKeepAliveRequest'},
		  M, Path);
v_msg_LeaseKeepAliveRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'LeaseKeepAliveRequest'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_LeaseKeepAliveResponse/3}).
-dialyzer({nowarn_function,v_msg_LeaseKeepAliveResponse/3}).
v_msg_LeaseKeepAliveResponse(#{} = M, Path,
			     TrUserData) ->
    case M of
      #{header := F1} ->
	  v_msg_ResponseHeader(F1, [header | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{'ID' := F2} ->
	  v_type_int64(F2, ['ID' | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{'TTL' := F3} ->
	  v_type_int64(F3, ['TTL' | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (header) -> ok;
		      ('ID') -> ok;
		      ('TTL') -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_LeaseKeepAliveResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'LeaseKeepAliveResponse'},
		  M, Path);
v_msg_LeaseKeepAliveResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'LeaseKeepAliveResponse'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_LeaseTimeToLiveRequest/3}).
-dialyzer({nowarn_function,v_msg_LeaseTimeToLiveRequest/3}).
v_msg_LeaseTimeToLiveRequest(#{} = M, Path,
			     TrUserData) ->
    case M of
      #{'ID' := F1} ->
	  v_type_int64(F1, ['ID' | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{keys := F2} ->
	  v_type_bool(F2, [keys | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun ('ID') -> ok;
		      (keys) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_LeaseTimeToLiveRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'LeaseTimeToLiveRequest'},
		  M, Path);
v_msg_LeaseTimeToLiveRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'LeaseTimeToLiveRequest'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_LeaseTimeToLiveResponse/3}).
-dialyzer({nowarn_function,v_msg_LeaseTimeToLiveResponse/3}).
v_msg_LeaseTimeToLiveResponse(#{} = M, Path,
			      TrUserData) ->
    case M of
      #{header := F1} ->
	  v_msg_ResponseHeader(F1, [header | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{'ID' := F2} ->
	  v_type_int64(F2, ['ID' | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{'TTL' := F3} ->
	  v_type_int64(F3, ['TTL' | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{grantedTTL := F4} ->
	  v_type_int64(F4, [grantedTTL | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{keys := F5} ->
	  if is_list(F5) ->
		 _ = [v_type_bytes(Elem, [keys | Path], TrUserData)
		      || Elem <- F5],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, bytes}, F5,
			       [keys | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (header) -> ok;
		      ('ID') -> ok;
		      ('TTL') -> ok;
		      (grantedTTL) -> ok;
		      (keys) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_LeaseTimeToLiveResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'LeaseTimeToLiveResponse'},
		  M, Path);
v_msg_LeaseTimeToLiveResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'LeaseTimeToLiveResponse'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_LeaseLeasesRequest/3}).
-dialyzer({nowarn_function,v_msg_LeaseLeasesRequest/3}).
v_msg_LeaseLeasesRequest(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_LeaseLeasesRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'LeaseLeasesRequest'},
		  M, Path);
v_msg_LeaseLeasesRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'LeaseLeasesRequest'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_LeaseStatus/3}).
-dialyzer({nowarn_function,v_msg_LeaseStatus/3}).
v_msg_LeaseStatus(#{} = M, Path, TrUserData) ->
    case M of
      #{'ID' := F1} ->
	  v_type_int64(F1, ['ID' | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun ('ID') -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_LeaseStatus(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'LeaseStatus'},
		  M, Path);
v_msg_LeaseStatus(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'LeaseStatus'}, X, Path).

-compile({nowarn_unused_function,v_msg_LeaseLeasesResponse/3}).
-dialyzer({nowarn_function,v_msg_LeaseLeasesResponse/3}).
v_msg_LeaseLeasesResponse(#{} = M, Path, TrUserData) ->
    case M of
      #{header := F1} ->
	  v_msg_ResponseHeader(F1, [header | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{leases := F2} ->
	  if is_list(F2) ->
		 _ = [v_msg_LeaseStatus(Elem, [leases | Path],
					TrUserData)
		      || Elem <- F2],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, 'LeaseStatus'}},
			       F2, [leases | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (header) -> ok;
		      (leases) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_LeaseLeasesResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'LeaseLeasesResponse'},
		  M, Path);
v_msg_LeaseLeasesResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'LeaseLeasesResponse'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_Member/3}).
-dialyzer({nowarn_function,v_msg_Member/3}).
v_msg_Member(#{} = M, Path, TrUserData) ->
    case M of
      #{'ID' := F1} ->
	  v_type_uint64(F1, ['ID' | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{name := F2} ->
	  v_type_string(F2, [name | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{peerURLs := F3} ->
	  if is_list(F3) ->
		 _ = [v_type_string(Elem, [peerURLs | Path], TrUserData)
		      || Elem <- F3],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, string}, F3,
			       [peerURLs | Path])
	  end;
      _ -> ok
    end,
    case M of
      #{clientURLs := F4} ->
	  if is_list(F4) ->
		 _ = [v_type_string(Elem, [clientURLs | Path],
				    TrUserData)
		      || Elem <- F4],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, string}, F4,
			       [clientURLs | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun ('ID') -> ok;
		      (name) -> ok;
		      (peerURLs) -> ok;
		      (clientURLs) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_Member(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'Member'},
		  M, Path);
v_msg_Member(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Member'}, X, Path).

-compile({nowarn_unused_function,v_msg_MemberAddRequest/3}).
-dialyzer({nowarn_function,v_msg_MemberAddRequest/3}).
v_msg_MemberAddRequest(#{} = M, Path, TrUserData) ->
    case M of
      #{peerURLs := F1} ->
	  if is_list(F1) ->
		 _ = [v_type_string(Elem, [peerURLs | Path], TrUserData)
		      || Elem <- F1],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, string}, F1,
			       [peerURLs | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (peerURLs) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_MemberAddRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'MemberAddRequest'},
		  M, Path);
v_msg_MemberAddRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'MemberAddRequest'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_MemberAddResponse/3}).
-dialyzer({nowarn_function,v_msg_MemberAddResponse/3}).
v_msg_MemberAddResponse(#{} = M, Path, TrUserData) ->
    case M of
      #{header := F1} ->
	  v_msg_ResponseHeader(F1, [header | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{member := F2} ->
	  v_msg_Member(F2, [member | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{members := F3} ->
	  if is_list(F3) ->
		 _ = [v_msg_Member(Elem, [members | Path], TrUserData)
		      || Elem <- F3],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, 'Member'}}, F3,
			       [members | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (header) -> ok;
		      (member) -> ok;
		      (members) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_MemberAddResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'MemberAddResponse'},
		  M, Path);
v_msg_MemberAddResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'MemberAddResponse'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_MemberRemoveRequest/3}).
-dialyzer({nowarn_function,v_msg_MemberRemoveRequest/3}).
v_msg_MemberRemoveRequest(#{} = M, Path, TrUserData) ->
    case M of
      #{'ID' := F1} ->
	  v_type_uint64(F1, ['ID' | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun ('ID') -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_MemberRemoveRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'MemberRemoveRequest'},
		  M, Path);
v_msg_MemberRemoveRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'MemberRemoveRequest'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_MemberRemoveResponse/3}).
-dialyzer({nowarn_function,v_msg_MemberRemoveResponse/3}).
v_msg_MemberRemoveResponse(#{} = M, Path, TrUserData) ->
    case M of
      #{header := F1} ->
	  v_msg_ResponseHeader(F1, [header | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{members := F2} ->
	  if is_list(F2) ->
		 _ = [v_msg_Member(Elem, [members | Path], TrUserData)
		      || Elem <- F2],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, 'Member'}}, F2,
			       [members | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (header) -> ok;
		      (members) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_MemberRemoveResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'MemberRemoveResponse'},
		  M, Path);
v_msg_MemberRemoveResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'MemberRemoveResponse'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_MemberUpdateRequest/3}).
-dialyzer({nowarn_function,v_msg_MemberUpdateRequest/3}).
v_msg_MemberUpdateRequest(#{} = M, Path, TrUserData) ->
    case M of
      #{'ID' := F1} ->
	  v_type_uint64(F1, ['ID' | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{peerURLs := F2} ->
	  if is_list(F2) ->
		 _ = [v_type_string(Elem, [peerURLs | Path], TrUserData)
		      || Elem <- F2],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, string}, F2,
			       [peerURLs | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun ('ID') -> ok;
		      (peerURLs) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_MemberUpdateRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'MemberUpdateRequest'},
		  M, Path);
v_msg_MemberUpdateRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'MemberUpdateRequest'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_MemberUpdateResponse/3}).
-dialyzer({nowarn_function,v_msg_MemberUpdateResponse/3}).
v_msg_MemberUpdateResponse(#{} = M, Path, TrUserData) ->
    case M of
      #{header := F1} ->
	  v_msg_ResponseHeader(F1, [header | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{members := F2} ->
	  if is_list(F2) ->
		 _ = [v_msg_Member(Elem, [members | Path], TrUserData)
		      || Elem <- F2],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, 'Member'}}, F2,
			       [members | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (header) -> ok;
		      (members) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_MemberUpdateResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'MemberUpdateResponse'},
		  M, Path);
v_msg_MemberUpdateResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'MemberUpdateResponse'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_MemberListRequest/3}).
-dialyzer({nowarn_function,v_msg_MemberListRequest/3}).
v_msg_MemberListRequest(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_MemberListRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'MemberListRequest'},
		  M, Path);
v_msg_MemberListRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'MemberListRequest'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_MemberListResponse/3}).
-dialyzer({nowarn_function,v_msg_MemberListResponse/3}).
v_msg_MemberListResponse(#{} = M, Path, TrUserData) ->
    case M of
      #{header := F1} ->
	  v_msg_ResponseHeader(F1, [header | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{members := F2} ->
	  if is_list(F2) ->
		 _ = [v_msg_Member(Elem, [members | Path], TrUserData)
		      || Elem <- F2],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, 'Member'}}, F2,
			       [members | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (header) -> ok;
		      (members) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_MemberListResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'MemberListResponse'},
		  M, Path);
v_msg_MemberListResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'MemberListResponse'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_DefragmentRequest/3}).
-dialyzer({nowarn_function,v_msg_DefragmentRequest/3}).
v_msg_DefragmentRequest(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_DefragmentRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'DefragmentRequest'},
		  M, Path);
v_msg_DefragmentRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'DefragmentRequest'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_DefragmentResponse/3}).
-dialyzer({nowarn_function,v_msg_DefragmentResponse/3}).
v_msg_DefragmentResponse(#{} = M, Path, TrUserData) ->
    case M of
      #{header := F1} ->
	  v_msg_ResponseHeader(F1, [header | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (header) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_DefragmentResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'DefragmentResponse'},
		  M, Path);
v_msg_DefragmentResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'DefragmentResponse'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_MoveLeaderRequest/3}).
-dialyzer({nowarn_function,v_msg_MoveLeaderRequest/3}).
v_msg_MoveLeaderRequest(#{} = M, Path, TrUserData) ->
    case M of
      #{targetID := F1} ->
	  v_type_uint64(F1, [targetID | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (targetID) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_MoveLeaderRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'MoveLeaderRequest'},
		  M, Path);
v_msg_MoveLeaderRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'MoveLeaderRequest'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_MoveLeaderResponse/3}).
-dialyzer({nowarn_function,v_msg_MoveLeaderResponse/3}).
v_msg_MoveLeaderResponse(#{} = M, Path, TrUserData) ->
    case M of
      #{header := F1} ->
	  v_msg_ResponseHeader(F1, [header | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (header) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_MoveLeaderResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'MoveLeaderResponse'},
		  M, Path);
v_msg_MoveLeaderResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'MoveLeaderResponse'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_AlarmRequest/3}).
-dialyzer({nowarn_function,v_msg_AlarmRequest/3}).
v_msg_AlarmRequest(#{} = M, Path, TrUserData) ->
    case M of
      #{action := F1} ->
	  'v_enum_AlarmRequest.AlarmAction'(F1, [action | Path],
					    TrUserData);
      _ -> ok
    end,
    case M of
      #{memberID := F2} ->
	  v_type_uint64(F2, [memberID | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{alarm := F3} ->
	  v_enum_AlarmType(F3, [alarm | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (action) -> ok;
		      (memberID) -> ok;
		      (alarm) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_AlarmRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'AlarmRequest'},
		  M, Path);
v_msg_AlarmRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AlarmRequest'}, X, Path).

-compile({nowarn_unused_function,v_msg_AlarmMember/3}).
-dialyzer({nowarn_function,v_msg_AlarmMember/3}).
v_msg_AlarmMember(#{} = M, Path, TrUserData) ->
    case M of
      #{memberID := F1} ->
	  v_type_uint64(F1, [memberID | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{alarm := F2} ->
	  v_enum_AlarmType(F2, [alarm | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (memberID) -> ok;
		      (alarm) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_AlarmMember(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'AlarmMember'},
		  M, Path);
v_msg_AlarmMember(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AlarmMember'}, X, Path).

-compile({nowarn_unused_function,v_msg_AlarmResponse/3}).
-dialyzer({nowarn_function,v_msg_AlarmResponse/3}).
v_msg_AlarmResponse(#{} = M, Path, TrUserData) ->
    case M of
      #{header := F1} ->
	  v_msg_ResponseHeader(F1, [header | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{alarms := F2} ->
	  if is_list(F2) ->
		 _ = [v_msg_AlarmMember(Elem, [alarms | Path],
					TrUserData)
		      || Elem <- F2],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, 'AlarmMember'}},
			       F2, [alarms | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (header) -> ok;
		      (alarms) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_AlarmResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'AlarmResponse'},
		  M, Path);
v_msg_AlarmResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AlarmResponse'}, X, Path).

-compile({nowarn_unused_function,v_msg_StatusRequest/3}).
-dialyzer({nowarn_function,v_msg_StatusRequest/3}).
v_msg_StatusRequest(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_StatusRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'StatusRequest'},
		  M, Path);
v_msg_StatusRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'StatusRequest'}, X, Path).

-compile({nowarn_unused_function,v_msg_StatusResponse/3}).
-dialyzer({nowarn_function,v_msg_StatusResponse/3}).
v_msg_StatusResponse(#{} = M, Path, TrUserData) ->
    case M of
      #{header := F1} ->
	  v_msg_ResponseHeader(F1, [header | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{version := F2} ->
	  v_type_string(F2, [version | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{dbSize := F3} ->
	  v_type_int64(F3, [dbSize | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{leader := F4} ->
	  v_type_uint64(F4, [leader | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{raftIndex := F5} ->
	  v_type_uint64(F5, [raftIndex | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{raftTerm := F6} ->
	  v_type_uint64(F6, [raftTerm | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{raftAppliedIndex := F7} ->
	  v_type_uint64(F7, [raftAppliedIndex | Path],
			TrUserData);
      _ -> ok
    end,
    case M of
      #{errors := F8} ->
	  if is_list(F8) ->
		 _ = [v_type_string(Elem, [errors | Path], TrUserData)
		      || Elem <- F8],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, string}, F8,
			       [errors | Path])
	  end;
      _ -> ok
    end,
    case M of
      #{dbSizeInUse := F9} ->
	  v_type_int64(F9, [dbSizeInUse | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (header) -> ok;
		      (version) -> ok;
		      (dbSize) -> ok;
		      (leader) -> ok;
		      (raftIndex) -> ok;
		      (raftTerm) -> ok;
		      (raftAppliedIndex) -> ok;
		      (errors) -> ok;
		      (dbSizeInUse) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_StatusResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'StatusResponse'},
		  M, Path);
v_msg_StatusResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'StatusResponse'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_AuthEnableRequest/3}).
-dialyzer({nowarn_function,v_msg_AuthEnableRequest/3}).
v_msg_AuthEnableRequest(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_AuthEnableRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'AuthEnableRequest'},
		  M, Path);
v_msg_AuthEnableRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AuthEnableRequest'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_AuthDisableRequest/3}).
-dialyzer({nowarn_function,v_msg_AuthDisableRequest/3}).
v_msg_AuthDisableRequest(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_AuthDisableRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'AuthDisableRequest'},
		  M, Path);
v_msg_AuthDisableRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AuthDisableRequest'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_AuthenticateRequest/3}).
-dialyzer({nowarn_function,v_msg_AuthenticateRequest/3}).
v_msg_AuthenticateRequest(#{} = M, Path, TrUserData) ->
    case M of
      #{name := F1} ->
	  v_type_string(F1, [name | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{password := F2} ->
	  v_type_string(F2, [password | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (name) -> ok;
		      (password) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_AuthenticateRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'AuthenticateRequest'},
		  M, Path);
v_msg_AuthenticateRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AuthenticateRequest'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_AuthUserAddRequest/3}).
-dialyzer({nowarn_function,v_msg_AuthUserAddRequest/3}).
v_msg_AuthUserAddRequest(#{} = M, Path, TrUserData) ->
    case M of
      #{name := F1} ->
	  v_type_string(F1, [name | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{password := F2} ->
	  v_type_string(F2, [password | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (name) -> ok;
		      (password) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_AuthUserAddRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'AuthUserAddRequest'},
		  M, Path);
v_msg_AuthUserAddRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AuthUserAddRequest'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_AuthUserGetRequest/3}).
-dialyzer({nowarn_function,v_msg_AuthUserGetRequest/3}).
v_msg_AuthUserGetRequest(#{} = M, Path, TrUserData) ->
    case M of
      #{name := F1} ->
	  v_type_string(F1, [name | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (name) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_AuthUserGetRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'AuthUserGetRequest'},
		  M, Path);
v_msg_AuthUserGetRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AuthUserGetRequest'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_AuthUserDeleteRequest/3}).
-dialyzer({nowarn_function,v_msg_AuthUserDeleteRequest/3}).
v_msg_AuthUserDeleteRequest(#{} = M, Path,
			    TrUserData) ->
    case M of
      #{name := F1} ->
	  v_type_string(F1, [name | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (name) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_AuthUserDeleteRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'AuthUserDeleteRequest'},
		  M, Path);
v_msg_AuthUserDeleteRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AuthUserDeleteRequest'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_AuthUserChangePasswordRequest/3}).
-dialyzer({nowarn_function,v_msg_AuthUserChangePasswordRequest/3}).
v_msg_AuthUserChangePasswordRequest(#{} = M, Path,
				    TrUserData) ->
    case M of
      #{name := F1} ->
	  v_type_string(F1, [name | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{password := F2} ->
	  v_type_string(F2, [password | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (name) -> ok;
		      (password) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_AuthUserChangePasswordRequest(M, Path,
				    _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'AuthUserChangePasswordRequest'},
		  M, Path);
v_msg_AuthUserChangePasswordRequest(X, Path,
				    _TrUserData) ->
    mk_type_error({expected_msg,
		   'AuthUserChangePasswordRequest'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_AuthUserGrantRoleRequest/3}).
-dialyzer({nowarn_function,v_msg_AuthUserGrantRoleRequest/3}).
v_msg_AuthUserGrantRoleRequest(#{} = M, Path,
			       TrUserData) ->
    case M of
      #{user := F1} ->
	  v_type_string(F1, [user | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{role := F2} ->
	  v_type_string(F2, [role | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (user) -> ok;
		      (role) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_AuthUserGrantRoleRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'AuthUserGrantRoleRequest'},
		  M, Path);
v_msg_AuthUserGrantRoleRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'AuthUserGrantRoleRequest'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_AuthUserRevokeRoleRequest/3}).
-dialyzer({nowarn_function,v_msg_AuthUserRevokeRoleRequest/3}).
v_msg_AuthUserRevokeRoleRequest(#{} = M, Path,
				TrUserData) ->
    case M of
      #{name := F1} ->
	  v_type_string(F1, [name | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{role := F2} ->
	  v_type_string(F2, [role | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (name) -> ok;
		      (role) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_AuthUserRevokeRoleRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'AuthUserRevokeRoleRequest'},
		  M, Path);
v_msg_AuthUserRevokeRoleRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'AuthUserRevokeRoleRequest'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_AuthRoleAddRequest/3}).
-dialyzer({nowarn_function,v_msg_AuthRoleAddRequest/3}).
v_msg_AuthRoleAddRequest(#{} = M, Path, TrUserData) ->
    case M of
      #{name := F1} ->
	  v_type_string(F1, [name | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (name) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_AuthRoleAddRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'AuthRoleAddRequest'},
		  M, Path);
v_msg_AuthRoleAddRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AuthRoleAddRequest'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_AuthRoleGetRequest/3}).
-dialyzer({nowarn_function,v_msg_AuthRoleGetRequest/3}).
v_msg_AuthRoleGetRequest(#{} = M, Path, TrUserData) ->
    case M of
      #{role := F1} ->
	  v_type_string(F1, [role | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (role) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_AuthRoleGetRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'AuthRoleGetRequest'},
		  M, Path);
v_msg_AuthRoleGetRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AuthRoleGetRequest'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_AuthUserListRequest/3}).
-dialyzer({nowarn_function,v_msg_AuthUserListRequest/3}).
v_msg_AuthUserListRequest(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_AuthUserListRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'AuthUserListRequest'},
		  M, Path);
v_msg_AuthUserListRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AuthUserListRequest'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_AuthRoleListRequest/3}).
-dialyzer({nowarn_function,v_msg_AuthRoleListRequest/3}).
v_msg_AuthRoleListRequest(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_AuthRoleListRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'AuthRoleListRequest'},
		  M, Path);
v_msg_AuthRoleListRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AuthRoleListRequest'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_AuthRoleDeleteRequest/3}).
-dialyzer({nowarn_function,v_msg_AuthRoleDeleteRequest/3}).
v_msg_AuthRoleDeleteRequest(#{} = M, Path,
			    TrUserData) ->
    case M of
      #{role := F1} ->
	  v_type_string(F1, [role | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (role) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_AuthRoleDeleteRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'AuthRoleDeleteRequest'},
		  M, Path);
v_msg_AuthRoleDeleteRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AuthRoleDeleteRequest'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_AuthRoleGrantPermissionRequest/3}).
-dialyzer({nowarn_function,v_msg_AuthRoleGrantPermissionRequest/3}).
v_msg_AuthRoleGrantPermissionRequest(#{} = M, Path,
				     TrUserData) ->
    case M of
      #{name := F1} ->
	  v_type_string(F1, [name | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{perm := F2} ->
	  v_msg_Permission(F2, [perm | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (name) -> ok;
		      (perm) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_AuthRoleGrantPermissionRequest(M, Path,
				     _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'AuthRoleGrantPermissionRequest'},
		  M, Path);
v_msg_AuthRoleGrantPermissionRequest(X, Path,
				     _TrUserData) ->
    mk_type_error({expected_msg,
		   'AuthRoleGrantPermissionRequest'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_AuthRoleRevokePermissionRequest/3}).
-dialyzer({nowarn_function,v_msg_AuthRoleRevokePermissionRequest/3}).
v_msg_AuthRoleRevokePermissionRequest(#{} = M, Path,
				      TrUserData) ->
    case M of
      #{role := F1} ->
	  v_type_string(F1, [role | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{key := F2} ->
	  v_type_bytes(F2, [key | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{range_end := F3} ->
	  v_type_bytes(F3, [range_end | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (role) -> ok;
		      (key) -> ok;
		      (range_end) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_AuthRoleRevokePermissionRequest(M, Path,
				      _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'AuthRoleRevokePermissionRequest'},
		  M, Path);
v_msg_AuthRoleRevokePermissionRequest(X, Path,
				      _TrUserData) ->
    mk_type_error({expected_msg,
		   'AuthRoleRevokePermissionRequest'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_AuthEnableResponse/3}).
-dialyzer({nowarn_function,v_msg_AuthEnableResponse/3}).
v_msg_AuthEnableResponse(#{} = M, Path, TrUserData) ->
    case M of
      #{header := F1} ->
	  v_msg_ResponseHeader(F1, [header | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (header) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_AuthEnableResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'AuthEnableResponse'},
		  M, Path);
v_msg_AuthEnableResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AuthEnableResponse'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_AuthDisableResponse/3}).
-dialyzer({nowarn_function,v_msg_AuthDisableResponse/3}).
v_msg_AuthDisableResponse(#{} = M, Path, TrUserData) ->
    case M of
      #{header := F1} ->
	  v_msg_ResponseHeader(F1, [header | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (header) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_AuthDisableResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'AuthDisableResponse'},
		  M, Path);
v_msg_AuthDisableResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AuthDisableResponse'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_AuthenticateResponse/3}).
-dialyzer({nowarn_function,v_msg_AuthenticateResponse/3}).
v_msg_AuthenticateResponse(#{} = M, Path, TrUserData) ->
    case M of
      #{header := F1} ->
	  v_msg_ResponseHeader(F1, [header | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{token := F2} ->
	  v_type_string(F2, [token | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (header) -> ok;
		      (token) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_AuthenticateResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'AuthenticateResponse'},
		  M, Path);
v_msg_AuthenticateResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AuthenticateResponse'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_AuthUserAddResponse/3}).
-dialyzer({nowarn_function,v_msg_AuthUserAddResponse/3}).
v_msg_AuthUserAddResponse(#{} = M, Path, TrUserData) ->
    case M of
      #{header := F1} ->
	  v_msg_ResponseHeader(F1, [header | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (header) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_AuthUserAddResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'AuthUserAddResponse'},
		  M, Path);
v_msg_AuthUserAddResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AuthUserAddResponse'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_AuthUserGetResponse/3}).
-dialyzer({nowarn_function,v_msg_AuthUserGetResponse/3}).
v_msg_AuthUserGetResponse(#{} = M, Path, TrUserData) ->
    case M of
      #{header := F1} ->
	  v_msg_ResponseHeader(F1, [header | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{roles := F2} ->
	  if is_list(F2) ->
		 _ = [v_type_string(Elem, [roles | Path], TrUserData)
		      || Elem <- F2],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, string}, F2,
			       [roles | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (header) -> ok;
		      (roles) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_AuthUserGetResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'AuthUserGetResponse'},
		  M, Path);
v_msg_AuthUserGetResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AuthUserGetResponse'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_AuthUserDeleteResponse/3}).
-dialyzer({nowarn_function,v_msg_AuthUserDeleteResponse/3}).
v_msg_AuthUserDeleteResponse(#{} = M, Path,
			     TrUserData) ->
    case M of
      #{header := F1} ->
	  v_msg_ResponseHeader(F1, [header | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (header) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_AuthUserDeleteResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'AuthUserDeleteResponse'},
		  M, Path);
v_msg_AuthUserDeleteResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AuthUserDeleteResponse'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_AuthUserChangePasswordResponse/3}).
-dialyzer({nowarn_function,v_msg_AuthUserChangePasswordResponse/3}).
v_msg_AuthUserChangePasswordResponse(#{} = M, Path,
				     TrUserData) ->
    case M of
      #{header := F1} ->
	  v_msg_ResponseHeader(F1, [header | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (header) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_AuthUserChangePasswordResponse(M, Path,
				     _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'AuthUserChangePasswordResponse'},
		  M, Path);
v_msg_AuthUserChangePasswordResponse(X, Path,
				     _TrUserData) ->
    mk_type_error({expected_msg,
		   'AuthUserChangePasswordResponse'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_AuthUserGrantRoleResponse/3}).
-dialyzer({nowarn_function,v_msg_AuthUserGrantRoleResponse/3}).
v_msg_AuthUserGrantRoleResponse(#{} = M, Path,
				TrUserData) ->
    case M of
      #{header := F1} ->
	  v_msg_ResponseHeader(F1, [header | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (header) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_AuthUserGrantRoleResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'AuthUserGrantRoleResponse'},
		  M, Path);
v_msg_AuthUserGrantRoleResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'AuthUserGrantRoleResponse'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_AuthUserRevokeRoleResponse/3}).
-dialyzer({nowarn_function,v_msg_AuthUserRevokeRoleResponse/3}).
v_msg_AuthUserRevokeRoleResponse(#{} = M, Path,
				 TrUserData) ->
    case M of
      #{header := F1} ->
	  v_msg_ResponseHeader(F1, [header | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (header) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_AuthUserRevokeRoleResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'AuthUserRevokeRoleResponse'},
		  M, Path);
v_msg_AuthUserRevokeRoleResponse(X, Path,
				 _TrUserData) ->
    mk_type_error({expected_msg,
		   'AuthUserRevokeRoleResponse'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_AuthRoleAddResponse/3}).
-dialyzer({nowarn_function,v_msg_AuthRoleAddResponse/3}).
v_msg_AuthRoleAddResponse(#{} = M, Path, TrUserData) ->
    case M of
      #{header := F1} ->
	  v_msg_ResponseHeader(F1, [header | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (header) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_AuthRoleAddResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'AuthRoleAddResponse'},
		  M, Path);
v_msg_AuthRoleAddResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AuthRoleAddResponse'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_AuthRoleGetResponse/3}).
-dialyzer({nowarn_function,v_msg_AuthRoleGetResponse/3}).
v_msg_AuthRoleGetResponse(#{} = M, Path, TrUserData) ->
    case M of
      #{header := F1} ->
	  v_msg_ResponseHeader(F1, [header | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{perm := F2} ->
	  if is_list(F2) ->
		 _ = [v_msg_Permission(Elem, [perm | Path], TrUserData)
		      || Elem <- F2],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, 'Permission'}},
			       F2, [perm | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (header) -> ok;
		      (perm) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_AuthRoleGetResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'AuthRoleGetResponse'},
		  M, Path);
v_msg_AuthRoleGetResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AuthRoleGetResponse'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_AuthRoleListResponse/3}).
-dialyzer({nowarn_function,v_msg_AuthRoleListResponse/3}).
v_msg_AuthRoleListResponse(#{} = M, Path, TrUserData) ->
    case M of
      #{header := F1} ->
	  v_msg_ResponseHeader(F1, [header | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{roles := F2} ->
	  if is_list(F2) ->
		 _ = [v_type_string(Elem, [roles | Path], TrUserData)
		      || Elem <- F2],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, string}, F2,
			       [roles | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (header) -> ok;
		      (roles) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_AuthRoleListResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'AuthRoleListResponse'},
		  M, Path);
v_msg_AuthRoleListResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AuthRoleListResponse'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_AuthUserListResponse/3}).
-dialyzer({nowarn_function,v_msg_AuthUserListResponse/3}).
v_msg_AuthUserListResponse(#{} = M, Path, TrUserData) ->
    case M of
      #{header := F1} ->
	  v_msg_ResponseHeader(F1, [header | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{users := F2} ->
	  if is_list(F2) ->
		 _ = [v_type_string(Elem, [users | Path], TrUserData)
		      || Elem <- F2],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, string}, F2,
			       [users | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (header) -> ok;
		      (users) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_AuthUserListResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'AuthUserListResponse'},
		  M, Path);
v_msg_AuthUserListResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AuthUserListResponse'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_AuthRoleDeleteResponse/3}).
-dialyzer({nowarn_function,v_msg_AuthRoleDeleteResponse/3}).
v_msg_AuthRoleDeleteResponse(#{} = M, Path,
			     TrUserData) ->
    case M of
      #{header := F1} ->
	  v_msg_ResponseHeader(F1, [header | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (header) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_AuthRoleDeleteResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'AuthRoleDeleteResponse'},
		  M, Path);
v_msg_AuthRoleDeleteResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AuthRoleDeleteResponse'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_AuthRoleGrantPermissionResponse/3}).
-dialyzer({nowarn_function,v_msg_AuthRoleGrantPermissionResponse/3}).
v_msg_AuthRoleGrantPermissionResponse(#{} = M, Path,
				      TrUserData) ->
    case M of
      #{header := F1} ->
	  v_msg_ResponseHeader(F1, [header | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (header) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_AuthRoleGrantPermissionResponse(M, Path,
				      _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'AuthRoleGrantPermissionResponse'},
		  M, Path);
v_msg_AuthRoleGrantPermissionResponse(X, Path,
				      _TrUserData) ->
    mk_type_error({expected_msg,
		   'AuthRoleGrantPermissionResponse'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_AuthRoleRevokePermissionResponse/3}).
-dialyzer({nowarn_function,v_msg_AuthRoleRevokePermissionResponse/3}).
v_msg_AuthRoleRevokePermissionResponse(#{} = M, Path,
				       TrUserData) ->
    case M of
      #{header := F1} ->
	  v_msg_ResponseHeader(F1, [header | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (header) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_AuthRoleRevokePermissionResponse(M, Path,
				       _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'AuthRoleRevokePermissionResponse'},
		  M, Path);
v_msg_AuthRoleRevokePermissionResponse(X, Path,
				       _TrUserData) ->
    mk_type_error({expected_msg,
		   'AuthRoleRevokePermissionResponse'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_KeyValue/3}).
-dialyzer({nowarn_function,v_msg_KeyValue/3}).
v_msg_KeyValue(#{} = M, Path, TrUserData) ->
    case M of
      #{key := F1} ->
	  v_type_bytes(F1, [key | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{create_revision := F2} ->
	  v_type_int64(F2, [create_revision | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{mod_revision := F3} ->
	  v_type_int64(F3, [mod_revision | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{version := F4} ->
	  v_type_int64(F4, [version | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{value := F5} ->
	  v_type_bytes(F5, [value | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{lease := F6} ->
	  v_type_int64(F6, [lease | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (key) -> ok;
		      (create_revision) -> ok;
		      (mod_revision) -> ok;
		      (version) -> ok;
		      (value) -> ok;
		      (lease) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_KeyValue(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'KeyValue'},
		  M, Path);
v_msg_KeyValue(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'KeyValue'}, X, Path).

-compile({nowarn_unused_function,v_msg_Event/3}).
-dialyzer({nowarn_function,v_msg_Event/3}).
v_msg_Event(#{} = M, Path, TrUserData) ->
    case M of
      #{type := F1} ->
	  'v_enum_Event.EventType'(F1, [type | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{kv := F2} ->
	  v_msg_KeyValue(F2, [kv | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{prev_kv := F3} ->
	  v_msg_KeyValue(F3, [prev_kv | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (type) -> ok;
		      (kv) -> ok;
		      (prev_kv) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_Event(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'Event'},
		  M, Path);
v_msg_Event(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Event'}, X, Path).

-compile({nowarn_unused_function,v_msg_User/3}).
-dialyzer({nowarn_function,v_msg_User/3}).
v_msg_User(#{} = M, Path, TrUserData) ->
    case M of
      #{name := F1} ->
	  v_type_bytes(F1, [name | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{password := F2} ->
	  v_type_bytes(F2, [password | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{roles := F3} ->
	  if is_list(F3) ->
		 _ = [v_type_string(Elem, [roles | Path], TrUserData)
		      || Elem <- F3],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, string}, F3,
			       [roles | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (name) -> ok;
		      (password) -> ok;
		      (roles) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_User(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'User'},
		  M, Path);
v_msg_User(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'User'}, X, Path).

-compile({nowarn_unused_function,v_msg_Permission/3}).
-dialyzer({nowarn_function,v_msg_Permission/3}).
v_msg_Permission(#{} = M, Path, TrUserData) ->
    case M of
      #{permType := F1} ->
	  'v_enum_Permission.Type'(F1, [permType | Path],
				   TrUserData);
      _ -> ok
    end,
    case M of
      #{key := F2} ->
	  v_type_bytes(F2, [key | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{range_end := F3} ->
	  v_type_bytes(F3, [range_end | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (permType) -> ok;
		      (key) -> ok;
		      (range_end) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_Permission(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'Permission'},
		  M, Path);
v_msg_Permission(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Permission'}, X, Path).

-compile({nowarn_unused_function,v_msg_Role/3}).
-dialyzer({nowarn_function,v_msg_Role/3}).
v_msg_Role(#{} = M, Path, TrUserData) ->
    case M of
      #{name := F1} ->
	  v_type_bytes(F1, [name | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{keyPermission := F2} ->
	  if is_list(F2) ->
		 _ = [v_msg_Permission(Elem, [keyPermission | Path],
				       TrUserData)
		      || Elem <- F2],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, 'Permission'}},
			       F2, [keyPermission | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (name) -> ok;
		      (keyPermission) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_Role(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'Role'},
		  M, Path);
v_msg_Role(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Role'}, X, Path).

-compile({nowarn_unused_function,'v_enum_RangeRequest.SortOrder'/3}).
-dialyzer({nowarn_function,'v_enum_RangeRequest.SortOrder'/3}).
'v_enum_RangeRequest.SortOrder'('NONE', _Path,
				_TrUserData) ->
    ok;
'v_enum_RangeRequest.SortOrder'('ASCEND', _Path,
				_TrUserData) ->
    ok;
'v_enum_RangeRequest.SortOrder'('DESCEND', _Path,
				_TrUserData) ->
    ok;
'v_enum_RangeRequest.SortOrder'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_RangeRequest.SortOrder'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'RangeRequest.SortOrder'},
		  X, Path).

-compile({nowarn_unused_function,'v_enum_RangeRequest.SortTarget'/3}).
-dialyzer({nowarn_function,'v_enum_RangeRequest.SortTarget'/3}).
'v_enum_RangeRequest.SortTarget'('KEY', _Path,
				 _TrUserData) ->
    ok;
'v_enum_RangeRequest.SortTarget'('VERSION', _Path,
				 _TrUserData) ->
    ok;
'v_enum_RangeRequest.SortTarget'('CREATE', _Path,
				 _TrUserData) ->
    ok;
'v_enum_RangeRequest.SortTarget'('MOD', _Path,
				 _TrUserData) ->
    ok;
'v_enum_RangeRequest.SortTarget'('VALUE', _Path,
				 _TrUserData) ->
    ok;
'v_enum_RangeRequest.SortTarget'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_RangeRequest.SortTarget'(X, Path,
				 _TrUserData) ->
    mk_type_error({invalid_enum, 'RangeRequest.SortTarget'},
		  X, Path).

-compile({nowarn_unused_function,'v_enum_Compare.CompareResult'/3}).
-dialyzer({nowarn_function,'v_enum_Compare.CompareResult'/3}).
'v_enum_Compare.CompareResult'('EQUAL', _Path,
			       _TrUserData) ->
    ok;
'v_enum_Compare.CompareResult'('GREATER', _Path,
			       _TrUserData) ->
    ok;
'v_enum_Compare.CompareResult'('LESS', _Path,
			       _TrUserData) ->
    ok;
'v_enum_Compare.CompareResult'('NOT_EQUAL', _Path,
			       _TrUserData) ->
    ok;
'v_enum_Compare.CompareResult'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_Compare.CompareResult'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'Compare.CompareResult'},
		  X, Path).

-compile({nowarn_unused_function,'v_enum_Compare.CompareTarget'/3}).
-dialyzer({nowarn_function,'v_enum_Compare.CompareTarget'/3}).
'v_enum_Compare.CompareTarget'('VERSION', _Path,
			       _TrUserData) ->
    ok;
'v_enum_Compare.CompareTarget'('CREATE', _Path,
			       _TrUserData) ->
    ok;
'v_enum_Compare.CompareTarget'('MOD', _Path,
			       _TrUserData) ->
    ok;
'v_enum_Compare.CompareTarget'('VALUE', _Path,
			       _TrUserData) ->
    ok;
'v_enum_Compare.CompareTarget'('LEASE', _Path,
			       _TrUserData) ->
    ok;
'v_enum_Compare.CompareTarget'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_Compare.CompareTarget'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'Compare.CompareTarget'},
		  X, Path).

-compile({nowarn_unused_function,'v_enum_WatchCreateRequest.FilterType'/3}).
-dialyzer({nowarn_function,'v_enum_WatchCreateRequest.FilterType'/3}).
'v_enum_WatchCreateRequest.FilterType'('NOPUT', _Path,
				       _TrUserData) ->
    ok;
'v_enum_WatchCreateRequest.FilterType'('NODELETE',
				       _Path, _TrUserData) ->
    ok;
'v_enum_WatchCreateRequest.FilterType'(V, Path,
				       TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_WatchCreateRequest.FilterType'(X, Path,
				       _TrUserData) ->
    mk_type_error({invalid_enum,
		   'WatchCreateRequest.FilterType'},
		  X, Path).

-compile({nowarn_unused_function,v_enum_AlarmType/3}).
-dialyzer({nowarn_function,v_enum_AlarmType/3}).
v_enum_AlarmType('NONE', _Path, _TrUserData) -> ok;
v_enum_AlarmType('NOSPACE', _Path, _TrUserData) -> ok;
v_enum_AlarmType('CORRUPT', _Path, _TrUserData) -> ok;
v_enum_AlarmType(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
v_enum_AlarmType(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'AlarmType'}, X, Path).

-compile({nowarn_unused_function,'v_enum_AlarmRequest.AlarmAction'/3}).
-dialyzer({nowarn_function,'v_enum_AlarmRequest.AlarmAction'/3}).
'v_enum_AlarmRequest.AlarmAction'('GET', _Path,
				  _TrUserData) ->
    ok;
'v_enum_AlarmRequest.AlarmAction'('ACTIVATE', _Path,
				  _TrUserData) ->
    ok;
'v_enum_AlarmRequest.AlarmAction'('DEACTIVATE', _Path,
				  _TrUserData) ->
    ok;
'v_enum_AlarmRequest.AlarmAction'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_AlarmRequest.AlarmAction'(X, Path,
				  _TrUserData) ->
    mk_type_error({invalid_enum,
		   'AlarmRequest.AlarmAction'},
		  X, Path).

-compile({nowarn_unused_function,'v_enum_Event.EventType'/3}).
-dialyzer({nowarn_function,'v_enum_Event.EventType'/3}).
'v_enum_Event.EventType'('PUT', _Path, _TrUserData) ->
    ok;
'v_enum_Event.EventType'('DELETE', _Path,
			 _TrUserData) ->
    ok;
'v_enum_Event.EventType'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_Event.EventType'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'Event.EventType'}, X,
		  Path).

-compile({nowarn_unused_function,'v_enum_Permission.Type'/3}).
-dialyzer({nowarn_function,'v_enum_Permission.Type'/3}).
'v_enum_Permission.Type'('READ', _Path, _TrUserData) ->
    ok;
'v_enum_Permission.Type'('WRITE', _Path, _TrUserData) ->
    ok;
'v_enum_Permission.Type'('READWRITE', _Path,
			 _TrUserData) ->
    ok;
'v_enum_Permission.Type'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_Permission.Type'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'Permission.Type'}, X,
		  Path).

-compile({nowarn_unused_function,v_type_sint32/3}).
-dialyzer({nowarn_function,v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_int64/3}).
-dialyzer({nowarn_function,v_type_int64/3}).
v_type_int64(N, _Path, _TrUserData)
    when -9223372036854775808 =< N,
	 N =< 9223372036854775807 ->
    ok;
v_type_int64(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int64, signed, 64},
		  N, Path);
v_type_int64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int64, signed, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_uint32/3}).
-dialyzer({nowarn_function,v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData)
    when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, uint32, unsigned,
		   32},
		  N, Path);
v_type_uint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint32, unsigned, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_uint64/3}).
-dialyzer({nowarn_function,v_type_uint64/3}).
v_type_uint64(N, _Path, _TrUserData)
    when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_uint64(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, uint64, unsigned,
		   64},
		  N, Path);
v_type_uint64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint64, unsigned, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) ->
    mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,v_type_bytes/3}).
-dialyzer({nowarn_function,v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) ->
    ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) ->
    ok;
v_type_bytes(X, Path, _TrUserData) ->
    mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{enum, 'RangeRequest.SortOrder'},
      [{'NONE', 0}, {'ASCEND', 1}, {'DESCEND', 2}]},
     {{enum, 'RangeRequest.SortTarget'},
      [{'KEY', 0}, {'VERSION', 1}, {'CREATE', 2}, {'MOD', 3},
       {'VALUE', 4}]},
     {{enum, 'Compare.CompareResult'},
      [{'EQUAL', 0}, {'GREATER', 1}, {'LESS', 2},
       {'NOT_EQUAL', 3}]},
     {{enum, 'Compare.CompareTarget'},
      [{'VERSION', 0}, {'CREATE', 1}, {'MOD', 2},
       {'VALUE', 3}, {'LEASE', 4}]},
     {{enum, 'WatchCreateRequest.FilterType'},
      [{'NOPUT', 0}, {'NODELETE', 1}]},
     {{enum, 'AlarmType'},
      [{'NONE', 0}, {'NOSPACE', 1}, {'CORRUPT', 2}]},
     {{enum, 'AlarmRequest.AlarmAction'},
      [{'GET', 0}, {'ACTIVATE', 1}, {'DEACTIVATE', 2}]},
     {{enum, 'Event.EventType'},
      [{'PUT', 0}, {'DELETE', 1}]},
     {{enum, 'Permission.Type'},
      [{'READ', 0}, {'WRITE', 1}, {'READWRITE', 2}]},
     {{msg, 'ResponseHeader'},
      [#{name => cluster_id, fnum => 1, rnum => 2,
	 type => uint64, occurrence => optional, opts => []},
       #{name => member_id, fnum => 2, rnum => 3,
	 type => uint64, occurrence => optional, opts => []},
       #{name => revision, fnum => 3, rnum => 4, type => int64,
	 occurrence => optional, opts => []},
       #{name => raft_term, fnum => 4, rnum => 5,
	 type => uint64, occurrence => optional, opts => []}]},
     {{msg, 'RangeRequest'},
      [#{name => key, fnum => 1, rnum => 2, type => bytes,
	 occurrence => optional, opts => []},
       #{name => range_end, fnum => 2, rnum => 3,
	 type => bytes, occurrence => optional, opts => []},
       #{name => limit, fnum => 3, rnum => 4, type => int64,
	 occurrence => optional, opts => []},
       #{name => revision, fnum => 4, rnum => 5, type => int64,
	 occurrence => optional, opts => []},
       #{name => sort_order, fnum => 5, rnum => 6,
	 type => {enum, 'RangeRequest.SortOrder'},
	 occurrence => optional, opts => []},
       #{name => sort_target, fnum => 6, rnum => 7,
	 type => {enum, 'RangeRequest.SortTarget'},
	 occurrence => optional, opts => []},
       #{name => serializable, fnum => 7, rnum => 8,
	 type => bool, occurrence => optional, opts => []},
       #{name => keys_only, fnum => 8, rnum => 9, type => bool,
	 occurrence => optional, opts => []},
       #{name => count_only, fnum => 9, rnum => 10,
	 type => bool, occurrence => optional, opts => []},
       #{name => min_mod_revision, fnum => 10, rnum => 11,
	 type => int64, occurrence => optional, opts => []},
       #{name => max_mod_revision, fnum => 11, rnum => 12,
	 type => int64, occurrence => optional, opts => []},
       #{name => min_create_revision, fnum => 12, rnum => 13,
	 type => int64, occurrence => optional, opts => []},
       #{name => max_create_revision, fnum => 13, rnum => 14,
	 type => int64, occurrence => optional, opts => []}]},
     {{msg, 'RangeResponse'},
      [#{name => header, fnum => 1, rnum => 2,
	 type => {msg, 'ResponseHeader'}, occurrence => optional,
	 opts => []},
       #{name => kvs, fnum => 2, rnum => 3,
	 type => {msg, 'KeyValue'}, occurrence => repeated,
	 opts => []},
       #{name => more, fnum => 3, rnum => 4, type => bool,
	 occurrence => optional, opts => []},
       #{name => count, fnum => 4, rnum => 5, type => int64,
	 occurrence => optional, opts => []}]},
     {{msg, 'PutRequest'},
      [#{name => key, fnum => 1, rnum => 2, type => bytes,
	 occurrence => optional, opts => []},
       #{name => value, fnum => 2, rnum => 3, type => bytes,
	 occurrence => optional, opts => []},
       #{name => lease, fnum => 3, rnum => 4, type => int64,
	 occurrence => optional, opts => []},
       #{name => prev_kv, fnum => 4, rnum => 5, type => bool,
	 occurrence => optional, opts => []},
       #{name => ignore_value, fnum => 5, rnum => 6,
	 type => bool, occurrence => optional, opts => []},
       #{name => ignore_lease, fnum => 6, rnum => 7,
	 type => bool, occurrence => optional, opts => []}]},
     {{msg, 'PutResponse'},
      [#{name => header, fnum => 1, rnum => 2,
	 type => {msg, 'ResponseHeader'}, occurrence => optional,
	 opts => []},
       #{name => prev_kv, fnum => 2, rnum => 3,
	 type => {msg, 'KeyValue'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'DeleteRangeRequest'},
      [#{name => key, fnum => 1, rnum => 2, type => bytes,
	 occurrence => optional, opts => []},
       #{name => range_end, fnum => 2, rnum => 3,
	 type => bytes, occurrence => optional, opts => []},
       #{name => prev_kv, fnum => 3, rnum => 4, type => bool,
	 occurrence => optional, opts => []}]},
     {{msg, 'DeleteRangeResponse'},
      [#{name => header, fnum => 1, rnum => 2,
	 type => {msg, 'ResponseHeader'}, occurrence => optional,
	 opts => []},
       #{name => deleted, fnum => 2, rnum => 3, type => int64,
	 occurrence => optional, opts => []},
       #{name => prev_kvs, fnum => 3, rnum => 4,
	 type => {msg, 'KeyValue'}, occurrence => repeated,
	 opts => []}]},
     {{msg, 'RequestOp'},
      [#{name => request, rnum => 2,
	 fields =>
	     [#{name => request_range, fnum => 1, rnum => 2,
		type => {msg, 'RangeRequest'}, occurrence => optional,
		opts => []},
	      #{name => request_put, fnum => 2, rnum => 2,
		type => {msg, 'PutRequest'}, occurrence => optional,
		opts => []},
	      #{name => request_delete_range, fnum => 3, rnum => 2,
		type => {msg, 'DeleteRangeRequest'},
		occurrence => optional, opts => []},
	      #{name => request_txn, fnum => 4, rnum => 2,
		type => {msg, 'TxnRequest'}, occurrence => optional,
		opts => []}]}]},
     {{msg, 'ResponseOp'},
      [#{name => response, rnum => 2,
	 fields =>
	     [#{name => response_range, fnum => 1, rnum => 2,
		type => {msg, 'RangeResponse'}, occurrence => optional,
		opts => []},
	      #{name => response_put, fnum => 2, rnum => 2,
		type => {msg, 'PutResponse'}, occurrence => optional,
		opts => []},
	      #{name => response_delete_range, fnum => 3, rnum => 2,
		type => {msg, 'DeleteRangeResponse'},
		occurrence => optional, opts => []},
	      #{name => response_txn, fnum => 4, rnum => 2,
		type => {msg, 'TxnResponse'}, occurrence => optional,
		opts => []}]}]},
     {{msg, 'Compare'},
      [#{name => result, fnum => 1, rnum => 2,
	 type => {enum, 'Compare.CompareResult'},
	 occurrence => optional, opts => []},
       #{name => target, fnum => 2, rnum => 3,
	 type => {enum, 'Compare.CompareTarget'},
	 occurrence => optional, opts => []},
       #{name => key, fnum => 3, rnum => 4, type => bytes,
	 occurrence => optional, opts => []},
       #{name => target_union, rnum => 5,
	 fields =>
	     [#{name => version, fnum => 4, rnum => 5, type => int64,
		occurrence => optional, opts => []},
	      #{name => create_revision, fnum => 5, rnum => 5,
		type => int64, occurrence => optional, opts => []},
	      #{name => mod_revision, fnum => 6, rnum => 5,
		type => int64, occurrence => optional, opts => []},
	      #{name => value, fnum => 7, rnum => 5, type => bytes,
		occurrence => optional, opts => []},
	      #{name => lease, fnum => 8, rnum => 5, type => int64,
		occurrence => optional, opts => []}]},
       #{name => range_end, fnum => 64, rnum => 6,
	 type => bytes, occurrence => optional, opts => []}]},
     {{msg, 'TxnRequest'},
      [#{name => compare, fnum => 1, rnum => 2,
	 type => {msg, 'Compare'}, occurrence => repeated,
	 opts => []},
       #{name => success, fnum => 2, rnum => 3,
	 type => {msg, 'RequestOp'}, occurrence => repeated,
	 opts => []},
       #{name => failure, fnum => 3, rnum => 4,
	 type => {msg, 'RequestOp'}, occurrence => repeated,
	 opts => []}]},
     {{msg, 'TxnResponse'},
      [#{name => header, fnum => 1, rnum => 2,
	 type => {msg, 'ResponseHeader'}, occurrence => optional,
	 opts => []},
       #{name => succeeded, fnum => 2, rnum => 3, type => bool,
	 occurrence => optional, opts => []},
       #{name => responses, fnum => 3, rnum => 4,
	 type => {msg, 'ResponseOp'}, occurrence => repeated,
	 opts => []}]},
     {{msg, 'CompactionRequest'},
      [#{name => revision, fnum => 1, rnum => 2,
	 type => int64, occurrence => optional, opts => []},
       #{name => physical, fnum => 2, rnum => 3, type => bool,
	 occurrence => optional, opts => []}]},
     {{msg, 'CompactionResponse'},
      [#{name => header, fnum => 1, rnum => 2,
	 type => {msg, 'ResponseHeader'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'HashRequest'}, []},
     {{msg, 'HashKVRequest'},
      [#{name => revision, fnum => 1, rnum => 2,
	 type => int64, occurrence => optional, opts => []}]},
     {{msg, 'HashKVResponse'},
      [#{name => header, fnum => 1, rnum => 2,
	 type => {msg, 'ResponseHeader'}, occurrence => optional,
	 opts => []},
       #{name => hash, fnum => 2, rnum => 3, type => uint32,
	 occurrence => optional, opts => []},
       #{name => compact_revision, fnum => 3, rnum => 4,
	 type => int64, occurrence => optional, opts => []}]},
     {{msg, 'HashResponse'},
      [#{name => header, fnum => 1, rnum => 2,
	 type => {msg, 'ResponseHeader'}, occurrence => optional,
	 opts => []},
       #{name => hash, fnum => 2, rnum => 3, type => uint32,
	 occurrence => optional, opts => []}]},
     {{msg, 'SnapshotRequest'}, []},
     {{msg, 'SnapshotResponse'},
      [#{name => header, fnum => 1, rnum => 2,
	 type => {msg, 'ResponseHeader'}, occurrence => optional,
	 opts => []},
       #{name => remaining_bytes, fnum => 2, rnum => 3,
	 type => uint64, occurrence => optional, opts => []},
       #{name => blob, fnum => 3, rnum => 4, type => bytes,
	 occurrence => optional, opts => []}]},
     {{msg, 'WatchRequest'},
      [#{name => request_union, rnum => 2,
	 fields =>
	     [#{name => create_request, fnum => 1, rnum => 2,
		type => {msg, 'WatchCreateRequest'},
		occurrence => optional, opts => []},
	      #{name => cancel_request, fnum => 2, rnum => 2,
		type => {msg, 'WatchCancelRequest'},
		occurrence => optional, opts => []},
	      #{name => progress_request, fnum => 3, rnum => 2,
		type => {msg, 'WatchProgressRequest'},
		occurrence => optional, opts => []}]}]},
     {{msg, 'WatchCreateRequest'},
      [#{name => key, fnum => 1, rnum => 2, type => bytes,
	 occurrence => optional, opts => []},
       #{name => range_end, fnum => 2, rnum => 3,
	 type => bytes, occurrence => optional, opts => []},
       #{name => start_revision, fnum => 3, rnum => 4,
	 type => int64, occurrence => optional, opts => []},
       #{name => progress_notify, fnum => 4, rnum => 5,
	 type => bool, occurrence => optional, opts => []},
       #{name => filters, fnum => 5, rnum => 6,
	 type => {enum, 'WatchCreateRequest.FilterType'},
	 occurrence => repeated, opts => [packed]},
       #{name => prev_kv, fnum => 6, rnum => 7, type => bool,
	 occurrence => optional, opts => []},
       #{name => watch_id, fnum => 7, rnum => 8, type => int64,
	 occurrence => optional, opts => []},
       #{name => fragment, fnum => 8, rnum => 9, type => bool,
	 occurrence => optional, opts => []}]},
     {{msg, 'WatchCancelRequest'},
      [#{name => watch_id, fnum => 1, rnum => 2,
	 type => int64, occurrence => optional, opts => []}]},
     {{msg, 'WatchProgressRequest'}, []},
     {{msg, 'WatchResponse'},
      [#{name => header, fnum => 1, rnum => 2,
	 type => {msg, 'ResponseHeader'}, occurrence => optional,
	 opts => []},
       #{name => watch_id, fnum => 2, rnum => 3, type => int64,
	 occurrence => optional, opts => []},
       #{name => created, fnum => 3, rnum => 4, type => bool,
	 occurrence => optional, opts => []},
       #{name => canceled, fnum => 4, rnum => 5, type => bool,
	 occurrence => optional, opts => []},
       #{name => compact_revision, fnum => 5, rnum => 6,
	 type => int64, occurrence => optional, opts => []},
       #{name => cancel_reason, fnum => 6, rnum => 7,
	 type => string, occurrence => optional, opts => []},
       #{name => fragment, fnum => 7, rnum => 8, type => bool,
	 occurrence => optional, opts => []},
       #{name => events, fnum => 11, rnum => 9,
	 type => {msg, 'Event'}, occurrence => repeated,
	 opts => []}]},
     {{msg, 'LeaseGrantRequest'},
      [#{name => 'TTL', fnum => 1, rnum => 2, type => int64,
	 occurrence => optional, opts => []},
       #{name => 'ID', fnum => 2, rnum => 3, type => int64,
	 occurrence => optional, opts => []}]},
     {{msg, 'LeaseGrantResponse'},
      [#{name => header, fnum => 1, rnum => 2,
	 type => {msg, 'ResponseHeader'}, occurrence => optional,
	 opts => []},
       #{name => 'ID', fnum => 2, rnum => 3, type => int64,
	 occurrence => optional, opts => []},
       #{name => 'TTL', fnum => 3, rnum => 4, type => int64,
	 occurrence => optional, opts => []},
       #{name => error, fnum => 4, rnum => 5, type => string,
	 occurrence => optional, opts => []}]},
     {{msg, 'LeaseRevokeRequest'},
      [#{name => 'ID', fnum => 1, rnum => 2, type => int64,
	 occurrence => optional, opts => []}]},
     {{msg, 'LeaseRevokeResponse'},
      [#{name => header, fnum => 1, rnum => 2,
	 type => {msg, 'ResponseHeader'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'LeaseCheckpoint'},
      [#{name => 'ID', fnum => 1, rnum => 2, type => int64,
	 occurrence => optional, opts => []},
       #{name => remaining_TTL, fnum => 2, rnum => 3,
	 type => int64, occurrence => optional, opts => []}]},
     {{msg, 'LeaseCheckpointRequest'},
      [#{name => checkpoints, fnum => 1, rnum => 2,
	 type => {msg, 'LeaseCheckpoint'},
	 occurrence => repeated, opts => []}]},
     {{msg, 'LeaseCheckpointResponse'},
      [#{name => header, fnum => 1, rnum => 2,
	 type => {msg, 'ResponseHeader'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'LeaseKeepAliveRequest'},
      [#{name => 'ID', fnum => 1, rnum => 2, type => int64,
	 occurrence => optional, opts => []}]},
     {{msg, 'LeaseKeepAliveResponse'},
      [#{name => header, fnum => 1, rnum => 2,
	 type => {msg, 'ResponseHeader'}, occurrence => optional,
	 opts => []},
       #{name => 'ID', fnum => 2, rnum => 3, type => int64,
	 occurrence => optional, opts => []},
       #{name => 'TTL', fnum => 3, rnum => 4, type => int64,
	 occurrence => optional, opts => []}]},
     {{msg, 'LeaseTimeToLiveRequest'},
      [#{name => 'ID', fnum => 1, rnum => 2, type => int64,
	 occurrence => optional, opts => []},
       #{name => keys, fnum => 2, rnum => 3, type => bool,
	 occurrence => optional, opts => []}]},
     {{msg, 'LeaseTimeToLiveResponse'},
      [#{name => header, fnum => 1, rnum => 2,
	 type => {msg, 'ResponseHeader'}, occurrence => optional,
	 opts => []},
       #{name => 'ID', fnum => 2, rnum => 3, type => int64,
	 occurrence => optional, opts => []},
       #{name => 'TTL', fnum => 3, rnum => 4, type => int64,
	 occurrence => optional, opts => []},
       #{name => grantedTTL, fnum => 4, rnum => 5,
	 type => int64, occurrence => optional, opts => []},
       #{name => keys, fnum => 5, rnum => 6, type => bytes,
	 occurrence => repeated, opts => []}]},
     {{msg, 'LeaseLeasesRequest'}, []},
     {{msg, 'LeaseStatus'},
      [#{name => 'ID', fnum => 1, rnum => 2, type => int64,
	 occurrence => optional, opts => []}]},
     {{msg, 'LeaseLeasesResponse'},
      [#{name => header, fnum => 1, rnum => 2,
	 type => {msg, 'ResponseHeader'}, occurrence => optional,
	 opts => []},
       #{name => leases, fnum => 2, rnum => 3,
	 type => {msg, 'LeaseStatus'}, occurrence => repeated,
	 opts => []}]},
     {{msg, 'Member'},
      [#{name => 'ID', fnum => 1, rnum => 2, type => uint64,
	 occurrence => optional, opts => []},
       #{name => name, fnum => 2, rnum => 3, type => string,
	 occurrence => optional, opts => []},
       #{name => peerURLs, fnum => 3, rnum => 4,
	 type => string, occurrence => repeated, opts => []},
       #{name => clientURLs, fnum => 4, rnum => 5,
	 type => string, occurrence => repeated, opts => []}]},
     {{msg, 'MemberAddRequest'},
      [#{name => peerURLs, fnum => 1, rnum => 2,
	 type => string, occurrence => repeated, opts => []}]},
     {{msg, 'MemberAddResponse'},
      [#{name => header, fnum => 1, rnum => 2,
	 type => {msg, 'ResponseHeader'}, occurrence => optional,
	 opts => []},
       #{name => member, fnum => 2, rnum => 3,
	 type => {msg, 'Member'}, occurrence => optional,
	 opts => []},
       #{name => members, fnum => 3, rnum => 4,
	 type => {msg, 'Member'}, occurrence => repeated,
	 opts => []}]},
     {{msg, 'MemberRemoveRequest'},
      [#{name => 'ID', fnum => 1, rnum => 2, type => uint64,
	 occurrence => optional, opts => []}]},
     {{msg, 'MemberRemoveResponse'},
      [#{name => header, fnum => 1, rnum => 2,
	 type => {msg, 'ResponseHeader'}, occurrence => optional,
	 opts => []},
       #{name => members, fnum => 2, rnum => 3,
	 type => {msg, 'Member'}, occurrence => repeated,
	 opts => []}]},
     {{msg, 'MemberUpdateRequest'},
      [#{name => 'ID', fnum => 1, rnum => 2, type => uint64,
	 occurrence => optional, opts => []},
       #{name => peerURLs, fnum => 2, rnum => 3,
	 type => string, occurrence => repeated, opts => []}]},
     {{msg, 'MemberUpdateResponse'},
      [#{name => header, fnum => 1, rnum => 2,
	 type => {msg, 'ResponseHeader'}, occurrence => optional,
	 opts => []},
       #{name => members, fnum => 2, rnum => 3,
	 type => {msg, 'Member'}, occurrence => repeated,
	 opts => []}]},
     {{msg, 'MemberListRequest'}, []},
     {{msg, 'MemberListResponse'},
      [#{name => header, fnum => 1, rnum => 2,
	 type => {msg, 'ResponseHeader'}, occurrence => optional,
	 opts => []},
       #{name => members, fnum => 2, rnum => 3,
	 type => {msg, 'Member'}, occurrence => repeated,
	 opts => []}]},
     {{msg, 'DefragmentRequest'}, []},
     {{msg, 'DefragmentResponse'},
      [#{name => header, fnum => 1, rnum => 2,
	 type => {msg, 'ResponseHeader'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'MoveLeaderRequest'},
      [#{name => targetID, fnum => 1, rnum => 2,
	 type => uint64, occurrence => optional, opts => []}]},
     {{msg, 'MoveLeaderResponse'},
      [#{name => header, fnum => 1, rnum => 2,
	 type => {msg, 'ResponseHeader'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'AlarmRequest'},
      [#{name => action, fnum => 1, rnum => 2,
	 type => {enum, 'AlarmRequest.AlarmAction'},
	 occurrence => optional, opts => []},
       #{name => memberID, fnum => 2, rnum => 3,
	 type => uint64, occurrence => optional, opts => []},
       #{name => alarm, fnum => 3, rnum => 4,
	 type => {enum, 'AlarmType'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'AlarmMember'},
      [#{name => memberID, fnum => 1, rnum => 2,
	 type => uint64, occurrence => optional, opts => []},
       #{name => alarm, fnum => 2, rnum => 3,
	 type => {enum, 'AlarmType'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'AlarmResponse'},
      [#{name => header, fnum => 1, rnum => 2,
	 type => {msg, 'ResponseHeader'}, occurrence => optional,
	 opts => []},
       #{name => alarms, fnum => 2, rnum => 3,
	 type => {msg, 'AlarmMember'}, occurrence => repeated,
	 opts => []}]},
     {{msg, 'StatusRequest'}, []},
     {{msg, 'StatusResponse'},
      [#{name => header, fnum => 1, rnum => 2,
	 type => {msg, 'ResponseHeader'}, occurrence => optional,
	 opts => []},
       #{name => version, fnum => 2, rnum => 3, type => string,
	 occurrence => optional, opts => []},
       #{name => dbSize, fnum => 3, rnum => 4, type => int64,
	 occurrence => optional, opts => []},
       #{name => leader, fnum => 4, rnum => 5, type => uint64,
	 occurrence => optional, opts => []},
       #{name => raftIndex, fnum => 5, rnum => 6,
	 type => uint64, occurrence => optional, opts => []},
       #{name => raftTerm, fnum => 6, rnum => 7,
	 type => uint64, occurrence => optional, opts => []},
       #{name => raftAppliedIndex, fnum => 7, rnum => 8,
	 type => uint64, occurrence => optional, opts => []},
       #{name => errors, fnum => 8, rnum => 9, type => string,
	 occurrence => repeated, opts => []},
       #{name => dbSizeInUse, fnum => 9, rnum => 10,
	 type => int64, occurrence => optional, opts => []}]},
     {{msg, 'AuthEnableRequest'}, []},
     {{msg, 'AuthDisableRequest'}, []},
     {{msg, 'AuthenticateRequest'},
      [#{name => name, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []},
       #{name => password, fnum => 2, rnum => 3,
	 type => string, occurrence => optional, opts => []}]},
     {{msg, 'AuthUserAddRequest'},
      [#{name => name, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []},
       #{name => password, fnum => 2, rnum => 3,
	 type => string, occurrence => optional, opts => []}]},
     {{msg, 'AuthUserGetRequest'},
      [#{name => name, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []}]},
     {{msg, 'AuthUserDeleteRequest'},
      [#{name => name, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []}]},
     {{msg, 'AuthUserChangePasswordRequest'},
      [#{name => name, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []},
       #{name => password, fnum => 2, rnum => 3,
	 type => string, occurrence => optional, opts => []}]},
     {{msg, 'AuthUserGrantRoleRequest'},
      [#{name => user, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []},
       #{name => role, fnum => 2, rnum => 3, type => string,
	 occurrence => optional, opts => []}]},
     {{msg, 'AuthUserRevokeRoleRequest'},
      [#{name => name, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []},
       #{name => role, fnum => 2, rnum => 3, type => string,
	 occurrence => optional, opts => []}]},
     {{msg, 'AuthRoleAddRequest'},
      [#{name => name, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []}]},
     {{msg, 'AuthRoleGetRequest'},
      [#{name => role, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []}]},
     {{msg, 'AuthUserListRequest'}, []},
     {{msg, 'AuthRoleListRequest'}, []},
     {{msg, 'AuthRoleDeleteRequest'},
      [#{name => role, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []}]},
     {{msg, 'AuthRoleGrantPermissionRequest'},
      [#{name => name, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []},
       #{name => perm, fnum => 2, rnum => 3,
	 type => {msg, 'Permission'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'AuthRoleRevokePermissionRequest'},
      [#{name => role, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []},
       #{name => key, fnum => 2, rnum => 3, type => bytes,
	 occurrence => optional, opts => []},
       #{name => range_end, fnum => 3, rnum => 4,
	 type => bytes, occurrence => optional, opts => []}]},
     {{msg, 'AuthEnableResponse'},
      [#{name => header, fnum => 1, rnum => 2,
	 type => {msg, 'ResponseHeader'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'AuthDisableResponse'},
      [#{name => header, fnum => 1, rnum => 2,
	 type => {msg, 'ResponseHeader'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'AuthenticateResponse'},
      [#{name => header, fnum => 1, rnum => 2,
	 type => {msg, 'ResponseHeader'}, occurrence => optional,
	 opts => []},
       #{name => token, fnum => 2, rnum => 3, type => string,
	 occurrence => optional, opts => []}]},
     {{msg, 'AuthUserAddResponse'},
      [#{name => header, fnum => 1, rnum => 2,
	 type => {msg, 'ResponseHeader'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'AuthUserGetResponse'},
      [#{name => header, fnum => 1, rnum => 2,
	 type => {msg, 'ResponseHeader'}, occurrence => optional,
	 opts => []},
       #{name => roles, fnum => 2, rnum => 3, type => string,
	 occurrence => repeated, opts => []}]},
     {{msg, 'AuthUserDeleteResponse'},
      [#{name => header, fnum => 1, rnum => 2,
	 type => {msg, 'ResponseHeader'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'AuthUserChangePasswordResponse'},
      [#{name => header, fnum => 1, rnum => 2,
	 type => {msg, 'ResponseHeader'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'AuthUserGrantRoleResponse'},
      [#{name => header, fnum => 1, rnum => 2,
	 type => {msg, 'ResponseHeader'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'AuthUserRevokeRoleResponse'},
      [#{name => header, fnum => 1, rnum => 2,
	 type => {msg, 'ResponseHeader'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'AuthRoleAddResponse'},
      [#{name => header, fnum => 1, rnum => 2,
	 type => {msg, 'ResponseHeader'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'AuthRoleGetResponse'},
      [#{name => header, fnum => 1, rnum => 2,
	 type => {msg, 'ResponseHeader'}, occurrence => optional,
	 opts => []},
       #{name => perm, fnum => 2, rnum => 3,
	 type => {msg, 'Permission'}, occurrence => repeated,
	 opts => []}]},
     {{msg, 'AuthRoleListResponse'},
      [#{name => header, fnum => 1, rnum => 2,
	 type => {msg, 'ResponseHeader'}, occurrence => optional,
	 opts => []},
       #{name => roles, fnum => 2, rnum => 3, type => string,
	 occurrence => repeated, opts => []}]},
     {{msg, 'AuthUserListResponse'},
      [#{name => header, fnum => 1, rnum => 2,
	 type => {msg, 'ResponseHeader'}, occurrence => optional,
	 opts => []},
       #{name => users, fnum => 2, rnum => 3, type => string,
	 occurrence => repeated, opts => []}]},
     {{msg, 'AuthRoleDeleteResponse'},
      [#{name => header, fnum => 1, rnum => 2,
	 type => {msg, 'ResponseHeader'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'AuthRoleGrantPermissionResponse'},
      [#{name => header, fnum => 1, rnum => 2,
	 type => {msg, 'ResponseHeader'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'AuthRoleRevokePermissionResponse'},
      [#{name => header, fnum => 1, rnum => 2,
	 type => {msg, 'ResponseHeader'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'KeyValue'},
      [#{name => key, fnum => 1, rnum => 2, type => bytes,
	 occurrence => optional, opts => []},
       #{name => create_revision, fnum => 2, rnum => 3,
	 type => int64, occurrence => optional, opts => []},
       #{name => mod_revision, fnum => 3, rnum => 4,
	 type => int64, occurrence => optional, opts => []},
       #{name => version, fnum => 4, rnum => 5, type => int64,
	 occurrence => optional, opts => []},
       #{name => value, fnum => 5, rnum => 6, type => bytes,
	 occurrence => optional, opts => []},
       #{name => lease, fnum => 6, rnum => 7, type => int64,
	 occurrence => optional, opts => []}]},
     {{msg, 'Event'},
      [#{name => type, fnum => 1, rnum => 2,
	 type => {enum, 'Event.EventType'},
	 occurrence => optional, opts => []},
       #{name => kv, fnum => 2, rnum => 3,
	 type => {msg, 'KeyValue'}, occurrence => optional,
	 opts => []},
       #{name => prev_kv, fnum => 3, rnum => 4,
	 type => {msg, 'KeyValue'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'User'},
      [#{name => name, fnum => 1, rnum => 2, type => bytes,
	 occurrence => optional, opts => []},
       #{name => password, fnum => 2, rnum => 3, type => bytes,
	 occurrence => optional, opts => []},
       #{name => roles, fnum => 3, rnum => 4, type => string,
	 occurrence => repeated, opts => []}]},
     {{msg, 'Permission'},
      [#{name => permType, fnum => 1, rnum => 2,
	 type => {enum, 'Permission.Type'},
	 occurrence => optional, opts => []},
       #{name => key, fnum => 2, rnum => 3, type => bytes,
	 occurrence => optional, opts => []},
       #{name => range_end, fnum => 3, rnum => 4,
	 type => bytes, occurrence => optional, opts => []}]},
     {{msg, 'Role'},
      [#{name => name, fnum => 1, rnum => 2, type => bytes,
	 occurrence => optional, opts => []},
       #{name => keyPermission, fnum => 2, rnum => 3,
	 type => {msg, 'Permission'}, occurrence => repeated,
	 opts => []}]}].


get_msg_names() ->
    ['ResponseHeader', 'RangeRequest', 'RangeResponse',
     'PutRequest', 'PutResponse', 'DeleteRangeRequest',
     'DeleteRangeResponse', 'RequestOp', 'ResponseOp',
     'Compare', 'TxnRequest', 'TxnResponse',
     'CompactionRequest', 'CompactionResponse',
     'HashRequest', 'HashKVRequest', 'HashKVResponse',
     'HashResponse', 'SnapshotRequest', 'SnapshotResponse',
     'WatchRequest', 'WatchCreateRequest',
     'WatchCancelRequest', 'WatchProgressRequest',
     'WatchResponse', 'LeaseGrantRequest',
     'LeaseGrantResponse', 'LeaseRevokeRequest',
     'LeaseRevokeResponse', 'LeaseCheckpoint',
     'LeaseCheckpointRequest', 'LeaseCheckpointResponse',
     'LeaseKeepAliveRequest', 'LeaseKeepAliveResponse',
     'LeaseTimeToLiveRequest', 'LeaseTimeToLiveResponse',
     'LeaseLeasesRequest', 'LeaseStatus',
     'LeaseLeasesResponse', 'Member', 'MemberAddRequest',
     'MemberAddResponse', 'MemberRemoveRequest',
     'MemberRemoveResponse', 'MemberUpdateRequest',
     'MemberUpdateResponse', 'MemberListRequest',
     'MemberListResponse', 'DefragmentRequest',
     'DefragmentResponse', 'MoveLeaderRequest',
     'MoveLeaderResponse', 'AlarmRequest', 'AlarmMember',
     'AlarmResponse', 'StatusRequest', 'StatusResponse',
     'AuthEnableRequest', 'AuthDisableRequest',
     'AuthenticateRequest', 'AuthUserAddRequest',
     'AuthUserGetRequest', 'AuthUserDeleteRequest',
     'AuthUserChangePasswordRequest',
     'AuthUserGrantRoleRequest', 'AuthUserRevokeRoleRequest',
     'AuthRoleAddRequest', 'AuthRoleGetRequest',
     'AuthUserListRequest', 'AuthRoleListRequest',
     'AuthRoleDeleteRequest',
     'AuthRoleGrantPermissionRequest',
     'AuthRoleRevokePermissionRequest', 'AuthEnableResponse',
     'AuthDisableResponse', 'AuthenticateResponse',
     'AuthUserAddResponse', 'AuthUserGetResponse',
     'AuthUserDeleteResponse',
     'AuthUserChangePasswordResponse',
     'AuthUserGrantRoleResponse',
     'AuthUserRevokeRoleResponse', 'AuthRoleAddResponse',
     'AuthRoleGetResponse', 'AuthRoleListResponse',
     'AuthUserListResponse', 'AuthRoleDeleteResponse',
     'AuthRoleGrantPermissionResponse',
     'AuthRoleRevokePermissionResponse', 'KeyValue', 'Event',
     'User', 'Permission', 'Role'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['ResponseHeader', 'RangeRequest', 'RangeResponse',
     'PutRequest', 'PutResponse', 'DeleteRangeRequest',
     'DeleteRangeResponse', 'RequestOp', 'ResponseOp',
     'Compare', 'TxnRequest', 'TxnResponse',
     'CompactionRequest', 'CompactionResponse',
     'HashRequest', 'HashKVRequest', 'HashKVResponse',
     'HashResponse', 'SnapshotRequest', 'SnapshotResponse',
     'WatchRequest', 'WatchCreateRequest',
     'WatchCancelRequest', 'WatchProgressRequest',
     'WatchResponse', 'LeaseGrantRequest',
     'LeaseGrantResponse', 'LeaseRevokeRequest',
     'LeaseRevokeResponse', 'LeaseCheckpoint',
     'LeaseCheckpointRequest', 'LeaseCheckpointResponse',
     'LeaseKeepAliveRequest', 'LeaseKeepAliveResponse',
     'LeaseTimeToLiveRequest', 'LeaseTimeToLiveResponse',
     'LeaseLeasesRequest', 'LeaseStatus',
     'LeaseLeasesResponse', 'Member', 'MemberAddRequest',
     'MemberAddResponse', 'MemberRemoveRequest',
     'MemberRemoveResponse', 'MemberUpdateRequest',
     'MemberUpdateResponse', 'MemberListRequest',
     'MemberListResponse', 'DefragmentRequest',
     'DefragmentResponse', 'MoveLeaderRequest',
     'MoveLeaderResponse', 'AlarmRequest', 'AlarmMember',
     'AlarmResponse', 'StatusRequest', 'StatusResponse',
     'AuthEnableRequest', 'AuthDisableRequest',
     'AuthenticateRequest', 'AuthUserAddRequest',
     'AuthUserGetRequest', 'AuthUserDeleteRequest',
     'AuthUserChangePasswordRequest',
     'AuthUserGrantRoleRequest', 'AuthUserRevokeRoleRequest',
     'AuthRoleAddRequest', 'AuthRoleGetRequest',
     'AuthUserListRequest', 'AuthRoleListRequest',
     'AuthRoleDeleteRequest',
     'AuthRoleGrantPermissionRequest',
     'AuthRoleRevokePermissionRequest', 'AuthEnableResponse',
     'AuthDisableResponse', 'AuthenticateResponse',
     'AuthUserAddResponse', 'AuthUserGetResponse',
     'AuthUserDeleteResponse',
     'AuthUserChangePasswordResponse',
     'AuthUserGrantRoleResponse',
     'AuthUserRevokeRoleResponse', 'AuthRoleAddResponse',
     'AuthRoleGetResponse', 'AuthRoleListResponse',
     'AuthUserListResponse', 'AuthRoleDeleteResponse',
     'AuthRoleGrantPermissionResponse',
     'AuthRoleRevokePermissionResponse', 'KeyValue', 'Event',
     'User', 'Permission', 'Role'].


get_enum_names() ->
    ['RangeRequest.SortOrder', 'RangeRequest.SortTarget',
     'Compare.CompareResult', 'Compare.CompareTarget',
     'WatchCreateRequest.FilterType', 'AlarmType',
     'AlarmRequest.AlarmAction', 'Event.EventType',
     'Permission.Type'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('ResponseHeader') ->
    [#{name => cluster_id, fnum => 1, rnum => 2,
       type => uint64, occurrence => optional, opts => []},
     #{name => member_id, fnum => 2, rnum => 3,
       type => uint64, occurrence => optional, opts => []},
     #{name => revision, fnum => 3, rnum => 4, type => int64,
       occurrence => optional, opts => []},
     #{name => raft_term, fnum => 4, rnum => 5,
       type => uint64, occurrence => optional, opts => []}];
find_msg_def('RangeRequest') ->
    [#{name => key, fnum => 1, rnum => 2, type => bytes,
       occurrence => optional, opts => []},
     #{name => range_end, fnum => 2, rnum => 3,
       type => bytes, occurrence => optional, opts => []},
     #{name => limit, fnum => 3, rnum => 4, type => int64,
       occurrence => optional, opts => []},
     #{name => revision, fnum => 4, rnum => 5, type => int64,
       occurrence => optional, opts => []},
     #{name => sort_order, fnum => 5, rnum => 6,
       type => {enum, 'RangeRequest.SortOrder'},
       occurrence => optional, opts => []},
     #{name => sort_target, fnum => 6, rnum => 7,
       type => {enum, 'RangeRequest.SortTarget'},
       occurrence => optional, opts => []},
     #{name => serializable, fnum => 7, rnum => 8,
       type => bool, occurrence => optional, opts => []},
     #{name => keys_only, fnum => 8, rnum => 9, type => bool,
       occurrence => optional, opts => []},
     #{name => count_only, fnum => 9, rnum => 10,
       type => bool, occurrence => optional, opts => []},
     #{name => min_mod_revision, fnum => 10, rnum => 11,
       type => int64, occurrence => optional, opts => []},
     #{name => max_mod_revision, fnum => 11, rnum => 12,
       type => int64, occurrence => optional, opts => []},
     #{name => min_create_revision, fnum => 12, rnum => 13,
       type => int64, occurrence => optional, opts => []},
     #{name => max_create_revision, fnum => 13, rnum => 14,
       type => int64, occurrence => optional, opts => []}];
find_msg_def('RangeResponse') ->
    [#{name => header, fnum => 1, rnum => 2,
       type => {msg, 'ResponseHeader'}, occurrence => optional,
       opts => []},
     #{name => kvs, fnum => 2, rnum => 3,
       type => {msg, 'KeyValue'}, occurrence => repeated,
       opts => []},
     #{name => more, fnum => 3, rnum => 4, type => bool,
       occurrence => optional, opts => []},
     #{name => count, fnum => 4, rnum => 5, type => int64,
       occurrence => optional, opts => []}];
find_msg_def('PutRequest') ->
    [#{name => key, fnum => 1, rnum => 2, type => bytes,
       occurrence => optional, opts => []},
     #{name => value, fnum => 2, rnum => 3, type => bytes,
       occurrence => optional, opts => []},
     #{name => lease, fnum => 3, rnum => 4, type => int64,
       occurrence => optional, opts => []},
     #{name => prev_kv, fnum => 4, rnum => 5, type => bool,
       occurrence => optional, opts => []},
     #{name => ignore_value, fnum => 5, rnum => 6,
       type => bool, occurrence => optional, opts => []},
     #{name => ignore_lease, fnum => 6, rnum => 7,
       type => bool, occurrence => optional, opts => []}];
find_msg_def('PutResponse') ->
    [#{name => header, fnum => 1, rnum => 2,
       type => {msg, 'ResponseHeader'}, occurrence => optional,
       opts => []},
     #{name => prev_kv, fnum => 2, rnum => 3,
       type => {msg, 'KeyValue'}, occurrence => optional,
       opts => []}];
find_msg_def('DeleteRangeRequest') ->
    [#{name => key, fnum => 1, rnum => 2, type => bytes,
       occurrence => optional, opts => []},
     #{name => range_end, fnum => 2, rnum => 3,
       type => bytes, occurrence => optional, opts => []},
     #{name => prev_kv, fnum => 3, rnum => 4, type => bool,
       occurrence => optional, opts => []}];
find_msg_def('DeleteRangeResponse') ->
    [#{name => header, fnum => 1, rnum => 2,
       type => {msg, 'ResponseHeader'}, occurrence => optional,
       opts => []},
     #{name => deleted, fnum => 2, rnum => 3, type => int64,
       occurrence => optional, opts => []},
     #{name => prev_kvs, fnum => 3, rnum => 4,
       type => {msg, 'KeyValue'}, occurrence => repeated,
       opts => []}];
find_msg_def('RequestOp') ->
    [#{name => request, rnum => 2,
       fields =>
	   [#{name => request_range, fnum => 1, rnum => 2,
	      type => {msg, 'RangeRequest'}, occurrence => optional,
	      opts => []},
	    #{name => request_put, fnum => 2, rnum => 2,
	      type => {msg, 'PutRequest'}, occurrence => optional,
	      opts => []},
	    #{name => request_delete_range, fnum => 3, rnum => 2,
	      type => {msg, 'DeleteRangeRequest'},
	      occurrence => optional, opts => []},
	    #{name => request_txn, fnum => 4, rnum => 2,
	      type => {msg, 'TxnRequest'}, occurrence => optional,
	      opts => []}]}];
find_msg_def('ResponseOp') ->
    [#{name => response, rnum => 2,
       fields =>
	   [#{name => response_range, fnum => 1, rnum => 2,
	      type => {msg, 'RangeResponse'}, occurrence => optional,
	      opts => []},
	    #{name => response_put, fnum => 2, rnum => 2,
	      type => {msg, 'PutResponse'}, occurrence => optional,
	      opts => []},
	    #{name => response_delete_range, fnum => 3, rnum => 2,
	      type => {msg, 'DeleteRangeResponse'},
	      occurrence => optional, opts => []},
	    #{name => response_txn, fnum => 4, rnum => 2,
	      type => {msg, 'TxnResponse'}, occurrence => optional,
	      opts => []}]}];
find_msg_def('Compare') ->
    [#{name => result, fnum => 1, rnum => 2,
       type => {enum, 'Compare.CompareResult'},
       occurrence => optional, opts => []},
     #{name => target, fnum => 2, rnum => 3,
       type => {enum, 'Compare.CompareTarget'},
       occurrence => optional, opts => []},
     #{name => key, fnum => 3, rnum => 4, type => bytes,
       occurrence => optional, opts => []},
     #{name => target_union, rnum => 5,
       fields =>
	   [#{name => version, fnum => 4, rnum => 5, type => int64,
	      occurrence => optional, opts => []},
	    #{name => create_revision, fnum => 5, rnum => 5,
	      type => int64, occurrence => optional, opts => []},
	    #{name => mod_revision, fnum => 6, rnum => 5,
	      type => int64, occurrence => optional, opts => []},
	    #{name => value, fnum => 7, rnum => 5, type => bytes,
	      occurrence => optional, opts => []},
	    #{name => lease, fnum => 8, rnum => 5, type => int64,
	      occurrence => optional, opts => []}]},
     #{name => range_end, fnum => 64, rnum => 6,
       type => bytes, occurrence => optional, opts => []}];
find_msg_def('TxnRequest') ->
    [#{name => compare, fnum => 1, rnum => 2,
       type => {msg, 'Compare'}, occurrence => repeated,
       opts => []},
     #{name => success, fnum => 2, rnum => 3,
       type => {msg, 'RequestOp'}, occurrence => repeated,
       opts => []},
     #{name => failure, fnum => 3, rnum => 4,
       type => {msg, 'RequestOp'}, occurrence => repeated,
       opts => []}];
find_msg_def('TxnResponse') ->
    [#{name => header, fnum => 1, rnum => 2,
       type => {msg, 'ResponseHeader'}, occurrence => optional,
       opts => []},
     #{name => succeeded, fnum => 2, rnum => 3, type => bool,
       occurrence => optional, opts => []},
     #{name => responses, fnum => 3, rnum => 4,
       type => {msg, 'ResponseOp'}, occurrence => repeated,
       opts => []}];
find_msg_def('CompactionRequest') ->
    [#{name => revision, fnum => 1, rnum => 2,
       type => int64, occurrence => optional, opts => []},
     #{name => physical, fnum => 2, rnum => 3, type => bool,
       occurrence => optional, opts => []}];
find_msg_def('CompactionResponse') ->
    [#{name => header, fnum => 1, rnum => 2,
       type => {msg, 'ResponseHeader'}, occurrence => optional,
       opts => []}];
find_msg_def('HashRequest') -> [];
find_msg_def('HashKVRequest') ->
    [#{name => revision, fnum => 1, rnum => 2,
       type => int64, occurrence => optional, opts => []}];
find_msg_def('HashKVResponse') ->
    [#{name => header, fnum => 1, rnum => 2,
       type => {msg, 'ResponseHeader'}, occurrence => optional,
       opts => []},
     #{name => hash, fnum => 2, rnum => 3, type => uint32,
       occurrence => optional, opts => []},
     #{name => compact_revision, fnum => 3, rnum => 4,
       type => int64, occurrence => optional, opts => []}];
find_msg_def('HashResponse') ->
    [#{name => header, fnum => 1, rnum => 2,
       type => {msg, 'ResponseHeader'}, occurrence => optional,
       opts => []},
     #{name => hash, fnum => 2, rnum => 3, type => uint32,
       occurrence => optional, opts => []}];
find_msg_def('SnapshotRequest') -> [];
find_msg_def('SnapshotResponse') ->
    [#{name => header, fnum => 1, rnum => 2,
       type => {msg, 'ResponseHeader'}, occurrence => optional,
       opts => []},
     #{name => remaining_bytes, fnum => 2, rnum => 3,
       type => uint64, occurrence => optional, opts => []},
     #{name => blob, fnum => 3, rnum => 4, type => bytes,
       occurrence => optional, opts => []}];
find_msg_def('WatchRequest') ->
    [#{name => request_union, rnum => 2,
       fields =>
	   [#{name => create_request, fnum => 1, rnum => 2,
	      type => {msg, 'WatchCreateRequest'},
	      occurrence => optional, opts => []},
	    #{name => cancel_request, fnum => 2, rnum => 2,
	      type => {msg, 'WatchCancelRequest'},
	      occurrence => optional, opts => []},
	    #{name => progress_request, fnum => 3, rnum => 2,
	      type => {msg, 'WatchProgressRequest'},
	      occurrence => optional, opts => []}]}];
find_msg_def('WatchCreateRequest') ->
    [#{name => key, fnum => 1, rnum => 2, type => bytes,
       occurrence => optional, opts => []},
     #{name => range_end, fnum => 2, rnum => 3,
       type => bytes, occurrence => optional, opts => []},
     #{name => start_revision, fnum => 3, rnum => 4,
       type => int64, occurrence => optional, opts => []},
     #{name => progress_notify, fnum => 4, rnum => 5,
       type => bool, occurrence => optional, opts => []},
     #{name => filters, fnum => 5, rnum => 6,
       type => {enum, 'WatchCreateRequest.FilterType'},
       occurrence => repeated, opts => [packed]},
     #{name => prev_kv, fnum => 6, rnum => 7, type => bool,
       occurrence => optional, opts => []},
     #{name => watch_id, fnum => 7, rnum => 8, type => int64,
       occurrence => optional, opts => []},
     #{name => fragment, fnum => 8, rnum => 9, type => bool,
       occurrence => optional, opts => []}];
find_msg_def('WatchCancelRequest') ->
    [#{name => watch_id, fnum => 1, rnum => 2,
       type => int64, occurrence => optional, opts => []}];
find_msg_def('WatchProgressRequest') -> [];
find_msg_def('WatchResponse') ->
    [#{name => header, fnum => 1, rnum => 2,
       type => {msg, 'ResponseHeader'}, occurrence => optional,
       opts => []},
     #{name => watch_id, fnum => 2, rnum => 3, type => int64,
       occurrence => optional, opts => []},
     #{name => created, fnum => 3, rnum => 4, type => bool,
       occurrence => optional, opts => []},
     #{name => canceled, fnum => 4, rnum => 5, type => bool,
       occurrence => optional, opts => []},
     #{name => compact_revision, fnum => 5, rnum => 6,
       type => int64, occurrence => optional, opts => []},
     #{name => cancel_reason, fnum => 6, rnum => 7,
       type => string, occurrence => optional, opts => []},
     #{name => fragment, fnum => 7, rnum => 8, type => bool,
       occurrence => optional, opts => []},
     #{name => events, fnum => 11, rnum => 9,
       type => {msg, 'Event'}, occurrence => repeated,
       opts => []}];
find_msg_def('LeaseGrantRequest') ->
    [#{name => 'TTL', fnum => 1, rnum => 2, type => int64,
       occurrence => optional, opts => []},
     #{name => 'ID', fnum => 2, rnum => 3, type => int64,
       occurrence => optional, opts => []}];
find_msg_def('LeaseGrantResponse') ->
    [#{name => header, fnum => 1, rnum => 2,
       type => {msg, 'ResponseHeader'}, occurrence => optional,
       opts => []},
     #{name => 'ID', fnum => 2, rnum => 3, type => int64,
       occurrence => optional, opts => []},
     #{name => 'TTL', fnum => 3, rnum => 4, type => int64,
       occurrence => optional, opts => []},
     #{name => error, fnum => 4, rnum => 5, type => string,
       occurrence => optional, opts => []}];
find_msg_def('LeaseRevokeRequest') ->
    [#{name => 'ID', fnum => 1, rnum => 2, type => int64,
       occurrence => optional, opts => []}];
find_msg_def('LeaseRevokeResponse') ->
    [#{name => header, fnum => 1, rnum => 2,
       type => {msg, 'ResponseHeader'}, occurrence => optional,
       opts => []}];
find_msg_def('LeaseCheckpoint') ->
    [#{name => 'ID', fnum => 1, rnum => 2, type => int64,
       occurrence => optional, opts => []},
     #{name => remaining_TTL, fnum => 2, rnum => 3,
       type => int64, occurrence => optional, opts => []}];
find_msg_def('LeaseCheckpointRequest') ->
    [#{name => checkpoints, fnum => 1, rnum => 2,
       type => {msg, 'LeaseCheckpoint'},
       occurrence => repeated, opts => []}];
find_msg_def('LeaseCheckpointResponse') ->
    [#{name => header, fnum => 1, rnum => 2,
       type => {msg, 'ResponseHeader'}, occurrence => optional,
       opts => []}];
find_msg_def('LeaseKeepAliveRequest') ->
    [#{name => 'ID', fnum => 1, rnum => 2, type => int64,
       occurrence => optional, opts => []}];
find_msg_def('LeaseKeepAliveResponse') ->
    [#{name => header, fnum => 1, rnum => 2,
       type => {msg, 'ResponseHeader'}, occurrence => optional,
       opts => []},
     #{name => 'ID', fnum => 2, rnum => 3, type => int64,
       occurrence => optional, opts => []},
     #{name => 'TTL', fnum => 3, rnum => 4, type => int64,
       occurrence => optional, opts => []}];
find_msg_def('LeaseTimeToLiveRequest') ->
    [#{name => 'ID', fnum => 1, rnum => 2, type => int64,
       occurrence => optional, opts => []},
     #{name => keys, fnum => 2, rnum => 3, type => bool,
       occurrence => optional, opts => []}];
find_msg_def('LeaseTimeToLiveResponse') ->
    [#{name => header, fnum => 1, rnum => 2,
       type => {msg, 'ResponseHeader'}, occurrence => optional,
       opts => []},
     #{name => 'ID', fnum => 2, rnum => 3, type => int64,
       occurrence => optional, opts => []},
     #{name => 'TTL', fnum => 3, rnum => 4, type => int64,
       occurrence => optional, opts => []},
     #{name => grantedTTL, fnum => 4, rnum => 5,
       type => int64, occurrence => optional, opts => []},
     #{name => keys, fnum => 5, rnum => 6, type => bytes,
       occurrence => repeated, opts => []}];
find_msg_def('LeaseLeasesRequest') -> [];
find_msg_def('LeaseStatus') ->
    [#{name => 'ID', fnum => 1, rnum => 2, type => int64,
       occurrence => optional, opts => []}];
find_msg_def('LeaseLeasesResponse') ->
    [#{name => header, fnum => 1, rnum => 2,
       type => {msg, 'ResponseHeader'}, occurrence => optional,
       opts => []},
     #{name => leases, fnum => 2, rnum => 3,
       type => {msg, 'LeaseStatus'}, occurrence => repeated,
       opts => []}];
find_msg_def('Member') ->
    [#{name => 'ID', fnum => 1, rnum => 2, type => uint64,
       occurrence => optional, opts => []},
     #{name => name, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []},
     #{name => peerURLs, fnum => 3, rnum => 4,
       type => string, occurrence => repeated, opts => []},
     #{name => clientURLs, fnum => 4, rnum => 5,
       type => string, occurrence => repeated, opts => []}];
find_msg_def('MemberAddRequest') ->
    [#{name => peerURLs, fnum => 1, rnum => 2,
       type => string, occurrence => repeated, opts => []}];
find_msg_def('MemberAddResponse') ->
    [#{name => header, fnum => 1, rnum => 2,
       type => {msg, 'ResponseHeader'}, occurrence => optional,
       opts => []},
     #{name => member, fnum => 2, rnum => 3,
       type => {msg, 'Member'}, occurrence => optional,
       opts => []},
     #{name => members, fnum => 3, rnum => 4,
       type => {msg, 'Member'}, occurrence => repeated,
       opts => []}];
find_msg_def('MemberRemoveRequest') ->
    [#{name => 'ID', fnum => 1, rnum => 2, type => uint64,
       occurrence => optional, opts => []}];
find_msg_def('MemberRemoveResponse') ->
    [#{name => header, fnum => 1, rnum => 2,
       type => {msg, 'ResponseHeader'}, occurrence => optional,
       opts => []},
     #{name => members, fnum => 2, rnum => 3,
       type => {msg, 'Member'}, occurrence => repeated,
       opts => []}];
find_msg_def('MemberUpdateRequest') ->
    [#{name => 'ID', fnum => 1, rnum => 2, type => uint64,
       occurrence => optional, opts => []},
     #{name => peerURLs, fnum => 2, rnum => 3,
       type => string, occurrence => repeated, opts => []}];
find_msg_def('MemberUpdateResponse') ->
    [#{name => header, fnum => 1, rnum => 2,
       type => {msg, 'ResponseHeader'}, occurrence => optional,
       opts => []},
     #{name => members, fnum => 2, rnum => 3,
       type => {msg, 'Member'}, occurrence => repeated,
       opts => []}];
find_msg_def('MemberListRequest') -> [];
find_msg_def('MemberListResponse') ->
    [#{name => header, fnum => 1, rnum => 2,
       type => {msg, 'ResponseHeader'}, occurrence => optional,
       opts => []},
     #{name => members, fnum => 2, rnum => 3,
       type => {msg, 'Member'}, occurrence => repeated,
       opts => []}];
find_msg_def('DefragmentRequest') -> [];
find_msg_def('DefragmentResponse') ->
    [#{name => header, fnum => 1, rnum => 2,
       type => {msg, 'ResponseHeader'}, occurrence => optional,
       opts => []}];
find_msg_def('MoveLeaderRequest') ->
    [#{name => targetID, fnum => 1, rnum => 2,
       type => uint64, occurrence => optional, opts => []}];
find_msg_def('MoveLeaderResponse') ->
    [#{name => header, fnum => 1, rnum => 2,
       type => {msg, 'ResponseHeader'}, occurrence => optional,
       opts => []}];
find_msg_def('AlarmRequest') ->
    [#{name => action, fnum => 1, rnum => 2,
       type => {enum, 'AlarmRequest.AlarmAction'},
       occurrence => optional, opts => []},
     #{name => memberID, fnum => 2, rnum => 3,
       type => uint64, occurrence => optional, opts => []},
     #{name => alarm, fnum => 3, rnum => 4,
       type => {enum, 'AlarmType'}, occurrence => optional,
       opts => []}];
find_msg_def('AlarmMember') ->
    [#{name => memberID, fnum => 1, rnum => 2,
       type => uint64, occurrence => optional, opts => []},
     #{name => alarm, fnum => 2, rnum => 3,
       type => {enum, 'AlarmType'}, occurrence => optional,
       opts => []}];
find_msg_def('AlarmResponse') ->
    [#{name => header, fnum => 1, rnum => 2,
       type => {msg, 'ResponseHeader'}, occurrence => optional,
       opts => []},
     #{name => alarms, fnum => 2, rnum => 3,
       type => {msg, 'AlarmMember'}, occurrence => repeated,
       opts => []}];
find_msg_def('StatusRequest') -> [];
find_msg_def('StatusResponse') ->
    [#{name => header, fnum => 1, rnum => 2,
       type => {msg, 'ResponseHeader'}, occurrence => optional,
       opts => []},
     #{name => version, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []},
     #{name => dbSize, fnum => 3, rnum => 4, type => int64,
       occurrence => optional, opts => []},
     #{name => leader, fnum => 4, rnum => 5, type => uint64,
       occurrence => optional, opts => []},
     #{name => raftIndex, fnum => 5, rnum => 6,
       type => uint64, occurrence => optional, opts => []},
     #{name => raftTerm, fnum => 6, rnum => 7,
       type => uint64, occurrence => optional, opts => []},
     #{name => raftAppliedIndex, fnum => 7, rnum => 8,
       type => uint64, occurrence => optional, opts => []},
     #{name => errors, fnum => 8, rnum => 9, type => string,
       occurrence => repeated, opts => []},
     #{name => dbSizeInUse, fnum => 9, rnum => 10,
       type => int64, occurrence => optional, opts => []}];
find_msg_def('AuthEnableRequest') -> [];
find_msg_def('AuthDisableRequest') -> [];
find_msg_def('AuthenticateRequest') ->
    [#{name => name, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => password, fnum => 2, rnum => 3,
       type => string, occurrence => optional, opts => []}];
find_msg_def('AuthUserAddRequest') ->
    [#{name => name, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => password, fnum => 2, rnum => 3,
       type => string, occurrence => optional, opts => []}];
find_msg_def('AuthUserGetRequest') ->
    [#{name => name, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []}];
find_msg_def('AuthUserDeleteRequest') ->
    [#{name => name, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []}];
find_msg_def('AuthUserChangePasswordRequest') ->
    [#{name => name, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => password, fnum => 2, rnum => 3,
       type => string, occurrence => optional, opts => []}];
find_msg_def('AuthUserGrantRoleRequest') ->
    [#{name => user, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => role, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []}];
find_msg_def('AuthUserRevokeRoleRequest') ->
    [#{name => name, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => role, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []}];
find_msg_def('AuthRoleAddRequest') ->
    [#{name => name, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []}];
find_msg_def('AuthRoleGetRequest') ->
    [#{name => role, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []}];
find_msg_def('AuthUserListRequest') -> [];
find_msg_def('AuthRoleListRequest') -> [];
find_msg_def('AuthRoleDeleteRequest') ->
    [#{name => role, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []}];
find_msg_def('AuthRoleGrantPermissionRequest') ->
    [#{name => name, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => perm, fnum => 2, rnum => 3,
       type => {msg, 'Permission'}, occurrence => optional,
       opts => []}];
find_msg_def('AuthRoleRevokePermissionRequest') ->
    [#{name => role, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => key, fnum => 2, rnum => 3, type => bytes,
       occurrence => optional, opts => []},
     #{name => range_end, fnum => 3, rnum => 4,
       type => bytes, occurrence => optional, opts => []}];
find_msg_def('AuthEnableResponse') ->
    [#{name => header, fnum => 1, rnum => 2,
       type => {msg, 'ResponseHeader'}, occurrence => optional,
       opts => []}];
find_msg_def('AuthDisableResponse') ->
    [#{name => header, fnum => 1, rnum => 2,
       type => {msg, 'ResponseHeader'}, occurrence => optional,
       opts => []}];
find_msg_def('AuthenticateResponse') ->
    [#{name => header, fnum => 1, rnum => 2,
       type => {msg, 'ResponseHeader'}, occurrence => optional,
       opts => []},
     #{name => token, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []}];
find_msg_def('AuthUserAddResponse') ->
    [#{name => header, fnum => 1, rnum => 2,
       type => {msg, 'ResponseHeader'}, occurrence => optional,
       opts => []}];
find_msg_def('AuthUserGetResponse') ->
    [#{name => header, fnum => 1, rnum => 2,
       type => {msg, 'ResponseHeader'}, occurrence => optional,
       opts => []},
     #{name => roles, fnum => 2, rnum => 3, type => string,
       occurrence => repeated, opts => []}];
find_msg_def('AuthUserDeleteResponse') ->
    [#{name => header, fnum => 1, rnum => 2,
       type => {msg, 'ResponseHeader'}, occurrence => optional,
       opts => []}];
find_msg_def('AuthUserChangePasswordResponse') ->
    [#{name => header, fnum => 1, rnum => 2,
       type => {msg, 'ResponseHeader'}, occurrence => optional,
       opts => []}];
find_msg_def('AuthUserGrantRoleResponse') ->
    [#{name => header, fnum => 1, rnum => 2,
       type => {msg, 'ResponseHeader'}, occurrence => optional,
       opts => []}];
find_msg_def('AuthUserRevokeRoleResponse') ->
    [#{name => header, fnum => 1, rnum => 2,
       type => {msg, 'ResponseHeader'}, occurrence => optional,
       opts => []}];
find_msg_def('AuthRoleAddResponse') ->
    [#{name => header, fnum => 1, rnum => 2,
       type => {msg, 'ResponseHeader'}, occurrence => optional,
       opts => []}];
find_msg_def('AuthRoleGetResponse') ->
    [#{name => header, fnum => 1, rnum => 2,
       type => {msg, 'ResponseHeader'}, occurrence => optional,
       opts => []},
     #{name => perm, fnum => 2, rnum => 3,
       type => {msg, 'Permission'}, occurrence => repeated,
       opts => []}];
find_msg_def('AuthRoleListResponse') ->
    [#{name => header, fnum => 1, rnum => 2,
       type => {msg, 'ResponseHeader'}, occurrence => optional,
       opts => []},
     #{name => roles, fnum => 2, rnum => 3, type => string,
       occurrence => repeated, opts => []}];
find_msg_def('AuthUserListResponse') ->
    [#{name => header, fnum => 1, rnum => 2,
       type => {msg, 'ResponseHeader'}, occurrence => optional,
       opts => []},
     #{name => users, fnum => 2, rnum => 3, type => string,
       occurrence => repeated, opts => []}];
find_msg_def('AuthRoleDeleteResponse') ->
    [#{name => header, fnum => 1, rnum => 2,
       type => {msg, 'ResponseHeader'}, occurrence => optional,
       opts => []}];
find_msg_def('AuthRoleGrantPermissionResponse') ->
    [#{name => header, fnum => 1, rnum => 2,
       type => {msg, 'ResponseHeader'}, occurrence => optional,
       opts => []}];
find_msg_def('AuthRoleRevokePermissionResponse') ->
    [#{name => header, fnum => 1, rnum => 2,
       type => {msg, 'ResponseHeader'}, occurrence => optional,
       opts => []}];
find_msg_def('KeyValue') ->
    [#{name => key, fnum => 1, rnum => 2, type => bytes,
       occurrence => optional, opts => []},
     #{name => create_revision, fnum => 2, rnum => 3,
       type => int64, occurrence => optional, opts => []},
     #{name => mod_revision, fnum => 3, rnum => 4,
       type => int64, occurrence => optional, opts => []},
     #{name => version, fnum => 4, rnum => 5, type => int64,
       occurrence => optional, opts => []},
     #{name => value, fnum => 5, rnum => 6, type => bytes,
       occurrence => optional, opts => []},
     #{name => lease, fnum => 6, rnum => 7, type => int64,
       occurrence => optional, opts => []}];
find_msg_def('Event') ->
    [#{name => type, fnum => 1, rnum => 2,
       type => {enum, 'Event.EventType'},
       occurrence => optional, opts => []},
     #{name => kv, fnum => 2, rnum => 3,
       type => {msg, 'KeyValue'}, occurrence => optional,
       opts => []},
     #{name => prev_kv, fnum => 3, rnum => 4,
       type => {msg, 'KeyValue'}, occurrence => optional,
       opts => []}];
find_msg_def('User') ->
    [#{name => name, fnum => 1, rnum => 2, type => bytes,
       occurrence => optional, opts => []},
     #{name => password, fnum => 2, rnum => 3, type => bytes,
       occurrence => optional, opts => []},
     #{name => roles, fnum => 3, rnum => 4, type => string,
       occurrence => repeated, opts => []}];
find_msg_def('Permission') ->
    [#{name => permType, fnum => 1, rnum => 2,
       type => {enum, 'Permission.Type'},
       occurrence => optional, opts => []},
     #{name => key, fnum => 2, rnum => 3, type => bytes,
       occurrence => optional, opts => []},
     #{name => range_end, fnum => 3, rnum => 4,
       type => bytes, occurrence => optional, opts => []}];
find_msg_def('Role') ->
    [#{name => name, fnum => 1, rnum => 2, type => bytes,
       occurrence => optional, opts => []},
     #{name => keyPermission, fnum => 2, rnum => 3,
       type => {msg, 'Permission'}, occurrence => repeated,
       opts => []}];
find_msg_def(_) -> error.


find_enum_def('RangeRequest.SortOrder') ->
    [{'NONE', 0}, {'ASCEND', 1}, {'DESCEND', 2}];
find_enum_def('RangeRequest.SortTarget') ->
    [{'KEY', 0}, {'VERSION', 1}, {'CREATE', 2}, {'MOD', 3},
     {'VALUE', 4}];
find_enum_def('Compare.CompareResult') ->
    [{'EQUAL', 0}, {'GREATER', 1}, {'LESS', 2},
     {'NOT_EQUAL', 3}];
find_enum_def('Compare.CompareTarget') ->
    [{'VERSION', 0}, {'CREATE', 1}, {'MOD', 2},
     {'VALUE', 3}, {'LEASE', 4}];
find_enum_def('WatchCreateRequest.FilterType') ->
    [{'NOPUT', 0}, {'NODELETE', 1}];
find_enum_def('AlarmType') ->
    [{'NONE', 0}, {'NOSPACE', 1}, {'CORRUPT', 2}];
find_enum_def('AlarmRequest.AlarmAction') ->
    [{'GET', 0}, {'ACTIVATE', 1}, {'DEACTIVATE', 2}];
find_enum_def('Event.EventType') ->
    [{'PUT', 0}, {'DELETE', 1}];
find_enum_def('Permission.Type') ->
    [{'READ', 0}, {'WRITE', 1}, {'READWRITE', 2}];
find_enum_def(_) -> error.


enum_symbol_by_value('RangeRequest.SortOrder', Value) ->
    'enum_symbol_by_value_RangeRequest.SortOrder'(Value);
enum_symbol_by_value('RangeRequest.SortTarget',
		     Value) ->
    'enum_symbol_by_value_RangeRequest.SortTarget'(Value);
enum_symbol_by_value('Compare.CompareResult', Value) ->
    'enum_symbol_by_value_Compare.CompareResult'(Value);
enum_symbol_by_value('Compare.CompareTarget', Value) ->
    'enum_symbol_by_value_Compare.CompareTarget'(Value);
enum_symbol_by_value('WatchCreateRequest.FilterType',
		     Value) ->
    'enum_symbol_by_value_WatchCreateRequest.FilterType'(Value);
enum_symbol_by_value('AlarmType', Value) ->
    enum_symbol_by_value_AlarmType(Value);
enum_symbol_by_value('AlarmRequest.AlarmAction',
		     Value) ->
    'enum_symbol_by_value_AlarmRequest.AlarmAction'(Value);
enum_symbol_by_value('Event.EventType', Value) ->
    'enum_symbol_by_value_Event.EventType'(Value);
enum_symbol_by_value('Permission.Type', Value) ->
    'enum_symbol_by_value_Permission.Type'(Value).


enum_value_by_symbol('RangeRequest.SortOrder', Sym) ->
    'enum_value_by_symbol_RangeRequest.SortOrder'(Sym);
enum_value_by_symbol('RangeRequest.SortTarget', Sym) ->
    'enum_value_by_symbol_RangeRequest.SortTarget'(Sym);
enum_value_by_symbol('Compare.CompareResult', Sym) ->
    'enum_value_by_symbol_Compare.CompareResult'(Sym);
enum_value_by_symbol('Compare.CompareTarget', Sym) ->
    'enum_value_by_symbol_Compare.CompareTarget'(Sym);
enum_value_by_symbol('WatchCreateRequest.FilterType',
		     Sym) ->
    'enum_value_by_symbol_WatchCreateRequest.FilterType'(Sym);
enum_value_by_symbol('AlarmType', Sym) ->
    enum_value_by_symbol_AlarmType(Sym);
enum_value_by_symbol('AlarmRequest.AlarmAction', Sym) ->
    'enum_value_by_symbol_AlarmRequest.AlarmAction'(Sym);
enum_value_by_symbol('Event.EventType', Sym) ->
    'enum_value_by_symbol_Event.EventType'(Sym);
enum_value_by_symbol('Permission.Type', Sym) ->
    'enum_value_by_symbol_Permission.Type'(Sym).


'enum_symbol_by_value_RangeRequest.SortOrder'(0) ->
    'NONE';
'enum_symbol_by_value_RangeRequest.SortOrder'(1) ->
    'ASCEND';
'enum_symbol_by_value_RangeRequest.SortOrder'(2) ->
    'DESCEND'.


'enum_value_by_symbol_RangeRequest.SortOrder'('NONE') ->
    0;
'enum_value_by_symbol_RangeRequest.SortOrder'('ASCEND') ->
    1;
'enum_value_by_symbol_RangeRequest.SortOrder'('DESCEND') ->
    2.

'enum_symbol_by_value_RangeRequest.SortTarget'(0) ->
    'KEY';
'enum_symbol_by_value_RangeRequest.SortTarget'(1) ->
    'VERSION';
'enum_symbol_by_value_RangeRequest.SortTarget'(2) ->
    'CREATE';
'enum_symbol_by_value_RangeRequest.SortTarget'(3) ->
    'MOD';
'enum_symbol_by_value_RangeRequest.SortTarget'(4) ->
    'VALUE'.


'enum_value_by_symbol_RangeRequest.SortTarget'('KEY') ->
    0;
'enum_value_by_symbol_RangeRequest.SortTarget'('VERSION') ->
    1;
'enum_value_by_symbol_RangeRequest.SortTarget'('CREATE') ->
    2;
'enum_value_by_symbol_RangeRequest.SortTarget'('MOD') ->
    3;
'enum_value_by_symbol_RangeRequest.SortTarget'('VALUE') ->
    4.

'enum_symbol_by_value_Compare.CompareResult'(0) ->
    'EQUAL';
'enum_symbol_by_value_Compare.CompareResult'(1) ->
    'GREATER';
'enum_symbol_by_value_Compare.CompareResult'(2) ->
    'LESS';
'enum_symbol_by_value_Compare.CompareResult'(3) ->
    'NOT_EQUAL'.


'enum_value_by_symbol_Compare.CompareResult'('EQUAL') ->
    0;
'enum_value_by_symbol_Compare.CompareResult'('GREATER') ->
    1;
'enum_value_by_symbol_Compare.CompareResult'('LESS') ->
    2;
'enum_value_by_symbol_Compare.CompareResult'('NOT_EQUAL') ->
    3.

'enum_symbol_by_value_Compare.CompareTarget'(0) ->
    'VERSION';
'enum_symbol_by_value_Compare.CompareTarget'(1) ->
    'CREATE';
'enum_symbol_by_value_Compare.CompareTarget'(2) ->
    'MOD';
'enum_symbol_by_value_Compare.CompareTarget'(3) ->
    'VALUE';
'enum_symbol_by_value_Compare.CompareTarget'(4) ->
    'LEASE'.


'enum_value_by_symbol_Compare.CompareTarget'('VERSION') ->
    0;
'enum_value_by_symbol_Compare.CompareTarget'('CREATE') ->
    1;
'enum_value_by_symbol_Compare.CompareTarget'('MOD') ->
    2;
'enum_value_by_symbol_Compare.CompareTarget'('VALUE') ->
    3;
'enum_value_by_symbol_Compare.CompareTarget'('LEASE') ->
    4.

'enum_symbol_by_value_WatchCreateRequest.FilterType'(0) ->
    'NOPUT';
'enum_symbol_by_value_WatchCreateRequest.FilterType'(1) ->
    'NODELETE'.


'enum_value_by_symbol_WatchCreateRequest.FilterType'('NOPUT') ->
    0;
'enum_value_by_symbol_WatchCreateRequest.FilterType'('NODELETE') ->
    1.

enum_symbol_by_value_AlarmType(0) -> 'NONE';
enum_symbol_by_value_AlarmType(1) -> 'NOSPACE';
enum_symbol_by_value_AlarmType(2) -> 'CORRUPT'.


enum_value_by_symbol_AlarmType('NONE') -> 0;
enum_value_by_symbol_AlarmType('NOSPACE') -> 1;
enum_value_by_symbol_AlarmType('CORRUPT') -> 2.

'enum_symbol_by_value_AlarmRequest.AlarmAction'(0) ->
    'GET';
'enum_symbol_by_value_AlarmRequest.AlarmAction'(1) ->
    'ACTIVATE';
'enum_symbol_by_value_AlarmRequest.AlarmAction'(2) ->
    'DEACTIVATE'.


'enum_value_by_symbol_AlarmRequest.AlarmAction'('GET') ->
    0;
'enum_value_by_symbol_AlarmRequest.AlarmAction'('ACTIVATE') ->
    1;
'enum_value_by_symbol_AlarmRequest.AlarmAction'('DEACTIVATE') ->
    2.

'enum_symbol_by_value_Event.EventType'(0) -> 'PUT';
'enum_symbol_by_value_Event.EventType'(1) -> 'DELETE'.


'enum_value_by_symbol_Event.EventType'('PUT') -> 0;
'enum_value_by_symbol_Event.EventType'('DELETE') -> 1.

'enum_symbol_by_value_Permission.Type'(0) -> 'READ';
'enum_symbol_by_value_Permission.Type'(1) -> 'WRITE';
'enum_symbol_by_value_Permission.Type'(2) ->
    'READWRITE'.


'enum_value_by_symbol_Permission.Type'('READ') -> 0;
'enum_value_by_symbol_Permission.Type'('WRITE') -> 1;
'enum_value_by_symbol_Permission.Type'('READWRITE') ->
    2.


get_service_names() ->
    ['KV', 'Watch', 'Lease', 'Cluster', 'Maintenance',
     'Auth'].


get_service_def('KV') ->
    {{service, 'KV'},
     [#{name => 'Range', input => 'RangeRequest',
	output => 'RangeResponse', input_stream => false,
	output_stream => false, opts => []},
      #{name => 'Put', input => 'PutRequest',
	output => 'PutResponse', input_stream => false,
	output_stream => false, opts => []},
      #{name => 'DeleteRange', input => 'DeleteRangeRequest',
	output => 'DeleteRangeResponse', input_stream => false,
	output_stream => false, opts => []},
      #{name => 'Txn', input => 'TxnRequest',
	output => 'TxnResponse', input_stream => false,
	output_stream => false, opts => []},
      #{name => 'Compact', input => 'CompactionRequest',
	output => 'CompactionResponse', input_stream => false,
	output_stream => false, opts => []}]};
get_service_def('Watch') ->
    {{service, 'Watch'},
     [#{name => 'Watch', input => 'WatchRequest',
	output => 'WatchResponse', input_stream => true,
	output_stream => true, opts => []}]};
get_service_def('Lease') ->
    {{service, 'Lease'},
     [#{name => 'LeaseGrant', input => 'LeaseGrantRequest',
	output => 'LeaseGrantResponse', input_stream => false,
	output_stream => false, opts => []},
      #{name => 'LeaseRevoke', input => 'LeaseRevokeRequest',
	output => 'LeaseRevokeResponse', input_stream => false,
	output_stream => false, opts => []},
      #{name => 'LeaseKeepAlive',
	input => 'LeaseKeepAliveRequest',
	output => 'LeaseKeepAliveResponse',
	input_stream => true, output_stream => true,
	opts => []},
      #{name => 'LeaseTimeToLive',
	input => 'LeaseTimeToLiveRequest',
	output => 'LeaseTimeToLiveResponse',
	input_stream => false, output_stream => false,
	opts => []},
      #{name => 'LeaseLeases', input => 'LeaseLeasesRequest',
	output => 'LeaseLeasesResponse', input_stream => false,
	output_stream => false, opts => []}]};
get_service_def('Cluster') ->
    {{service, 'Cluster'},
     [#{name => 'MemberAdd', input => 'MemberAddRequest',
	output => 'MemberAddResponse', input_stream => false,
	output_stream => false, opts => []},
      #{name => 'MemberRemove',
	input => 'MemberRemoveRequest',
	output => 'MemberRemoveResponse', input_stream => false,
	output_stream => false, opts => []},
      #{name => 'MemberUpdate',
	input => 'MemberUpdateRequest',
	output => 'MemberUpdateResponse', input_stream => false,
	output_stream => false, opts => []},
      #{name => 'MemberList', input => 'MemberListRequest',
	output => 'MemberListResponse', input_stream => false,
	output_stream => false, opts => []}]};
get_service_def('Maintenance') ->
    {{service, 'Maintenance'},
     [#{name => 'Alarm', input => 'AlarmRequest',
	output => 'AlarmResponse', input_stream => false,
	output_stream => false, opts => []},
      #{name => 'Status', input => 'StatusRequest',
	output => 'StatusResponse', input_stream => false,
	output_stream => false, opts => []},
      #{name => 'Defragment', input => 'DefragmentRequest',
	output => 'DefragmentResponse', input_stream => false,
	output_stream => false, opts => []},
      #{name => 'Hash', input => 'HashRequest',
	output => 'HashResponse', input_stream => false,
	output_stream => false, opts => []},
      #{name => 'HashKV', input => 'HashKVRequest',
	output => 'HashKVResponse', input_stream => false,
	output_stream => false, opts => []},
      #{name => 'Snapshot', input => 'SnapshotRequest',
	output => 'SnapshotResponse', input_stream => false,
	output_stream => true, opts => []},
      #{name => 'MoveLeader', input => 'MoveLeaderRequest',
	output => 'MoveLeaderResponse', input_stream => false,
	output_stream => false, opts => []}]};
get_service_def('Auth') ->
    {{service, 'Auth'},
     [#{name => 'AuthEnable', input => 'AuthEnableRequest',
	output => 'AuthEnableResponse', input_stream => false,
	output_stream => false, opts => []},
      #{name => 'AuthDisable', input => 'AuthDisableRequest',
	output => 'AuthDisableResponse', input_stream => false,
	output_stream => false, opts => []},
      #{name => 'Authenticate',
	input => 'AuthenticateRequest',
	output => 'AuthenticateResponse', input_stream => false,
	output_stream => false, opts => []},
      #{name => 'UserAdd', input => 'AuthUserAddRequest',
	output => 'AuthUserAddResponse', input_stream => false,
	output_stream => false, opts => []},
      #{name => 'UserGet', input => 'AuthUserGetRequest',
	output => 'AuthUserGetResponse', input_stream => false,
	output_stream => false, opts => []},
      #{name => 'UserList', input => 'AuthUserListRequest',
	output => 'AuthUserListResponse', input_stream => false,
	output_stream => false, opts => []},
      #{name => 'UserDelete',
	input => 'AuthUserDeleteRequest',
	output => 'AuthUserDeleteResponse',
	input_stream => false, output_stream => false,
	opts => []},
      #{name => 'UserChangePassword',
	input => 'AuthUserChangePasswordRequest',
	output => 'AuthUserChangePasswordResponse',
	input_stream => false, output_stream => false,
	opts => []},
      #{name => 'UserGrantRole',
	input => 'AuthUserGrantRoleRequest',
	output => 'AuthUserGrantRoleResponse',
	input_stream => false, output_stream => false,
	opts => []},
      #{name => 'UserRevokeRole',
	input => 'AuthUserRevokeRoleRequest',
	output => 'AuthUserRevokeRoleResponse',
	input_stream => false, output_stream => false,
	opts => []},
      #{name => 'RoleAdd', input => 'AuthRoleAddRequest',
	output => 'AuthRoleAddResponse', input_stream => false,
	output_stream => false, opts => []},
      #{name => 'RoleGet', input => 'AuthRoleGetRequest',
	output => 'AuthRoleGetResponse', input_stream => false,
	output_stream => false, opts => []},
      #{name => 'RoleList', input => 'AuthRoleListRequest',
	output => 'AuthRoleListResponse', input_stream => false,
	output_stream => false, opts => []},
      #{name => 'RoleDelete',
	input => 'AuthRoleDeleteRequest',
	output => 'AuthRoleDeleteResponse',
	input_stream => false, output_stream => false,
	opts => []},
      #{name => 'RoleGrantPermission',
	input => 'AuthRoleGrantPermissionRequest',
	output => 'AuthRoleGrantPermissionResponse',
	input_stream => false, output_stream => false,
	opts => []},
      #{name => 'RoleRevokePermission',
	input => 'AuthRoleRevokePermissionRequest',
	output => 'AuthRoleRevokePermissionResponse',
	input_stream => false, output_stream => false,
	opts => []}]};
get_service_def(_) -> error.


get_rpc_names('KV') ->
    ['Range', 'Put', 'DeleteRange', 'Txn', 'Compact'];
get_rpc_names('Watch') -> ['Watch'];
get_rpc_names('Lease') ->
    ['LeaseGrant', 'LeaseRevoke', 'LeaseKeepAlive',
     'LeaseTimeToLive', 'LeaseLeases'];
get_rpc_names('Cluster') ->
    ['MemberAdd', 'MemberRemove', 'MemberUpdate',
     'MemberList'];
get_rpc_names('Maintenance') ->
    ['Alarm', 'Status', 'Defragment', 'Hash', 'HashKV',
     'Snapshot', 'MoveLeader'];
get_rpc_names('Auth') ->
    ['AuthEnable', 'AuthDisable', 'Authenticate', 'UserAdd',
     'UserGet', 'UserList', 'UserDelete',
     'UserChangePassword', 'UserGrantRole', 'UserRevokeRole',
     'RoleAdd', 'RoleGet', 'RoleList', 'RoleDelete',
     'RoleGrantPermission', 'RoleRevokePermission'];
get_rpc_names(_) -> error.


find_rpc_def('KV', RpcName) -> find_rpc_def_KV(RpcName);
find_rpc_def('Watch', RpcName) ->
    find_rpc_def_Watch(RpcName);
find_rpc_def('Lease', RpcName) ->
    find_rpc_def_Lease(RpcName);
find_rpc_def('Cluster', RpcName) ->
    find_rpc_def_Cluster(RpcName);
find_rpc_def('Maintenance', RpcName) ->
    find_rpc_def_Maintenance(RpcName);
find_rpc_def('Auth', RpcName) ->
    find_rpc_def_Auth(RpcName);
find_rpc_def(_, _) -> error.


find_rpc_def_KV('Range') ->
    #{name => 'Range', input => 'RangeRequest',
      output => 'RangeResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_KV('Put') ->
    #{name => 'Put', input => 'PutRequest',
      output => 'PutResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_KV('DeleteRange') ->
    #{name => 'DeleteRange', input => 'DeleteRangeRequest',
      output => 'DeleteRangeResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_KV('Txn') ->
    #{name => 'Txn', input => 'TxnRequest',
      output => 'TxnResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_KV('Compact') ->
    #{name => 'Compact', input => 'CompactionRequest',
      output => 'CompactionResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_KV(_) -> error.

find_rpc_def_Watch('Watch') ->
    #{name => 'Watch', input => 'WatchRequest',
      output => 'WatchResponse', input_stream => true,
      output_stream => true, opts => []};
find_rpc_def_Watch(_) -> error.

find_rpc_def_Lease('LeaseGrant') ->
    #{name => 'LeaseGrant', input => 'LeaseGrantRequest',
      output => 'LeaseGrantResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_Lease('LeaseRevoke') ->
    #{name => 'LeaseRevoke', input => 'LeaseRevokeRequest',
      output => 'LeaseRevokeResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_Lease('LeaseKeepAlive') ->
    #{name => 'LeaseKeepAlive',
      input => 'LeaseKeepAliveRequest',
      output => 'LeaseKeepAliveResponse',
      input_stream => true, output_stream => true,
      opts => []};
find_rpc_def_Lease('LeaseTimeToLive') ->
    #{name => 'LeaseTimeToLive',
      input => 'LeaseTimeToLiveRequest',
      output => 'LeaseTimeToLiveResponse',
      input_stream => false, output_stream => false,
      opts => []};
find_rpc_def_Lease('LeaseLeases') ->
    #{name => 'LeaseLeases', input => 'LeaseLeasesRequest',
      output => 'LeaseLeasesResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_Lease(_) -> error.

find_rpc_def_Cluster('MemberAdd') ->
    #{name => 'MemberAdd', input => 'MemberAddRequest',
      output => 'MemberAddResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_Cluster('MemberRemove') ->
    #{name => 'MemberRemove',
      input => 'MemberRemoveRequest',
      output => 'MemberRemoveResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_Cluster('MemberUpdate') ->
    #{name => 'MemberUpdate',
      input => 'MemberUpdateRequest',
      output => 'MemberUpdateResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_Cluster('MemberList') ->
    #{name => 'MemberList', input => 'MemberListRequest',
      output => 'MemberListResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_Cluster(_) -> error.

find_rpc_def_Maintenance('Alarm') ->
    #{name => 'Alarm', input => 'AlarmRequest',
      output => 'AlarmResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_Maintenance('Status') ->
    #{name => 'Status', input => 'StatusRequest',
      output => 'StatusResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_Maintenance('Defragment') ->
    #{name => 'Defragment', input => 'DefragmentRequest',
      output => 'DefragmentResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_Maintenance('Hash') ->
    #{name => 'Hash', input => 'HashRequest',
      output => 'HashResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_Maintenance('HashKV') ->
    #{name => 'HashKV', input => 'HashKVRequest',
      output => 'HashKVResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_Maintenance('Snapshot') ->
    #{name => 'Snapshot', input => 'SnapshotRequest',
      output => 'SnapshotResponse', input_stream => false,
      output_stream => true, opts => []};
find_rpc_def_Maintenance('MoveLeader') ->
    #{name => 'MoveLeader', input => 'MoveLeaderRequest',
      output => 'MoveLeaderResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_Maintenance(_) -> error.

find_rpc_def_Auth('AuthEnable') ->
    #{name => 'AuthEnable', input => 'AuthEnableRequest',
      output => 'AuthEnableResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_Auth('AuthDisable') ->
    #{name => 'AuthDisable', input => 'AuthDisableRequest',
      output => 'AuthDisableResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_Auth('Authenticate') ->
    #{name => 'Authenticate',
      input => 'AuthenticateRequest',
      output => 'AuthenticateResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_Auth('UserAdd') ->
    #{name => 'UserAdd', input => 'AuthUserAddRequest',
      output => 'AuthUserAddResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_Auth('UserGet') ->
    #{name => 'UserGet', input => 'AuthUserGetRequest',
      output => 'AuthUserGetResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_Auth('UserList') ->
    #{name => 'UserList', input => 'AuthUserListRequest',
      output => 'AuthUserListResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_Auth('UserDelete') ->
    #{name => 'UserDelete',
      input => 'AuthUserDeleteRequest',
      output => 'AuthUserDeleteResponse',
      input_stream => false, output_stream => false,
      opts => []};
find_rpc_def_Auth('UserChangePassword') ->
    #{name => 'UserChangePassword',
      input => 'AuthUserChangePasswordRequest',
      output => 'AuthUserChangePasswordResponse',
      input_stream => false, output_stream => false,
      opts => []};
find_rpc_def_Auth('UserGrantRole') ->
    #{name => 'UserGrantRole',
      input => 'AuthUserGrantRoleRequest',
      output => 'AuthUserGrantRoleResponse',
      input_stream => false, output_stream => false,
      opts => []};
find_rpc_def_Auth('UserRevokeRole') ->
    #{name => 'UserRevokeRole',
      input => 'AuthUserRevokeRoleRequest',
      output => 'AuthUserRevokeRoleResponse',
      input_stream => false, output_stream => false,
      opts => []};
find_rpc_def_Auth('RoleAdd') ->
    #{name => 'RoleAdd', input => 'AuthRoleAddRequest',
      output => 'AuthRoleAddResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_Auth('RoleGet') ->
    #{name => 'RoleGet', input => 'AuthRoleGetRequest',
      output => 'AuthRoleGetResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_Auth('RoleList') ->
    #{name => 'RoleList', input => 'AuthRoleListRequest',
      output => 'AuthRoleListResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_Auth('RoleDelete') ->
    #{name => 'RoleDelete',
      input => 'AuthRoleDeleteRequest',
      output => 'AuthRoleDeleteResponse',
      input_stream => false, output_stream => false,
      opts => []};
find_rpc_def_Auth('RoleGrantPermission') ->
    #{name => 'RoleGrantPermission',
      input => 'AuthRoleGrantPermissionRequest',
      output => 'AuthRoleGrantPermissionResponse',
      input_stream => false, output_stream => false,
      opts => []};
find_rpc_def_Auth('RoleRevokePermission') ->
    #{name => 'RoleRevokePermission',
      input => 'AuthRoleRevokePermissionRequest',
      output => 'AuthRoleRevokePermissionResponse',
      input_stream => false, output_stream => false,
      opts => []};
find_rpc_def_Auth(_) -> error.


fetch_rpc_def(ServiceName, RpcName) ->
    case find_rpc_def(ServiceName, RpcName) of
      Def when is_map(Def) -> Def;
      error ->
	  erlang:error({no_such_rpc, ServiceName, RpcName})
    end.


get_package_name() -> etcdserverpb.



gpb_version_as_string() ->
    "4.4.0".

gpb_version_as_list() ->
    [4,4,0].
